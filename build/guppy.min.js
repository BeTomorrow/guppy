(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Guppy = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
(function(e){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=e()}else if(typeof define==="function"&&define.amd){define([],e)}else{var t;if(typeof window!=="undefined"){t=window}else if(typeof global!=="undefined"){t=global}else if(typeof self!=="undefined"){t=self}else{t=this}t.katex=e()}})(function(){var e,t,r;return function e(t,r,a){function i(o,s){if(!r[o]){if(!t[o]){var l=typeof require=="function"&&require;if(!s&&l)return l(o,!0);if(n)return n(o,!0);var u=new Error("Cannot find module '"+o+"'");throw u.code="MODULE_NOT_FOUND",u}var h=r[o]={exports:{}};t[o][0].call(h.exports,function(e){var r=t[o][1][e];return i(r?r:e)},h,h.exports,e,t,r,a)}return r[o].exports}var n=typeof require=="function"&&require;for(var o=0;o<a.length;o++)i(a[o]);return i}({1:[function(e,t,r){"use strict";var a=e("./src/ParseError");var i=e("./src/Settings");var n=e("./src/buildTree");var o=e("./src/parseTree");var s=e("./src/utils");var l=function e(t,r,a){s.clearNode(r);var l=new i(a);var u=o(t,l);var h=n(u,t,l).toNode();r.appendChild(h)};if(typeof document!=="undefined"){if(document.compatMode!=="CSS1Compat"){typeof console!=="undefined"&&console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your "+"website has a suitable doctype.");l=function e(){throw new a("KaTeX doesn't work in quirks mode.")}}}var u=function e(t,r){var a=new i(r);var s=o(t,a);return n(s,t,a).toMarkup()};var h=function e(t,r){var a=new i(r);return o(t,a)};t.exports={render:l,renderToString:u,__parse:h,ParseError:a}},{"./src/ParseError":10,"./src/Settings":12,"./src/buildTree":17,"./src/parseTree":27,"./src/utils":31}],2:[function(e,t,r){t.exports={default:e("core-js/library/fn/json/stringify"),__esModule:true}},{"core-js/library/fn/json/stringify":3}],3:[function(e,t,r){var a=e("../../modules/_core"),i=a.JSON||(a.JSON={stringify:JSON.stringify});t.exports=function e(t){return i.stringify.apply(i,arguments)}},{"../../modules/_core":4}],4:[function(e,t,r){var a=t.exports={version:"2.4.0"};if(typeof __e=="number")__e=a},{}],5:[function(e,t,r){"use strict";function a(e){if(!e.__matchAtRelocatable){var t=e.source+"|()";var r="g"+(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"");e.__matchAtRelocatable=new RegExp(t,r)}return e.__matchAtRelocatable}function i(e,t,r){if(e.global||e.sticky){throw new Error("matchAt(...): Only non-global regexes are supported")}var i=a(e);i.lastIndex=r;var n=i.exec(t);if(n[n.length-1]==null){n.length=n.length-1;return n}else{return null}}t.exports=i},{}],6:[function(e,t,r){"use strict";var a=Object.getOwnPropertySymbols;var i=Object.prototype.hasOwnProperty;var n=Object.prototype.propertyIsEnumerable;function o(e){if(e===null||e===undefined){throw new TypeError("Object.assign cannot be called with null or undefined")}return Object(e)}function s(){try{if(!Object.assign){return false}var e=new String("abc");e[5]="de";if(Object.getOwnPropertyNames(e)[0]==="5"){return false}var t={};for(var r=0;r<10;r++){t["_"+String.fromCharCode(r)]=r}var a=Object.getOwnPropertyNames(t).map(function(e){return t[e]});if(a.join("")!=="0123456789"){return false}var i={};"abcdefghijklmnopqrst".split("").forEach(function(e){i[e]=e});if(Object.keys(Object.assign({},i)).join("")!=="abcdefghijklmnopqrst"){return false}return true}catch(e){return false}}t.exports=s()?Object.assign:function(e,t){var r;var s=o(e);var l;for(var u=1;u<arguments.length;u++){r=Object(arguments[u]);for(var h in r){if(i.call(r,h)){s[h]=r[h]}}if(a){l=a(r);for(var p=0;p<l.length;p++){if(n.call(r,l[p])){s[l[p]]=r[l[p]]}}}}return s}},{}],7:[function(e,t,r){"use strict";var a=e("match-at");var i=e("./ParseError");function n(e){this.input=e;this.pos=0}function o(e,t,r,a){this.text=e;this.start=t;this.end=r;this.lexer=a}o.prototype.range=function(e,t){if(e.lexer!==this.lexer){return new o(t)}return new o(t,this.start,e.end,this.lexer)};var s=new RegExp("([ \r\n\t]+)|"+"([!-\\[\\]-\u2027\u202a-\ud7ff\uf900-\uffff]"+"|[\ud800-\udbff][\udc00-\udfff]"+"|\\\\(?:[a-zA-Z]+|[^\ud800-\udfff])"+")");n.prototype.lex=function(){var e=this.input;var t=this.pos;if(t===e.length){return new o("EOF",t,t,this)}var r=a(s,e,t);if(r===null){throw new i("Unexpected character: '"+e[t]+"'",new o(e[t],t,t+1,this))}var n=r[2]||" ";var l=this.pos;this.pos+=r[0].length;var u=this.pos;return new o(n,l,u,this)};t.exports=n},{"./ParseError":10,"match-at":5}],8:[function(e,t,r){"use strict";var a=e("./Lexer");var i=e("./macros");var n=e("./ParseError");var o=e("object-assign");function s(e,t){this.lexer=new a(e);this.macros=o({},i,t);this.stack=[];this.discardedWhiteSpace=[]}s.prototype.nextToken=function(){for(;;){if(this.stack.length===0){this.stack.push(this.lexer.lex())}var e=this.stack.pop();var t=e.text;if(!(t.charAt(0)==="\\"&&this.macros.hasOwnProperty(t))){return e}var r=void 0;var i=this.macros[t];if(typeof i==="string"){var o=0;if(i.indexOf("#")!==-1){var s=i.replace(/##/g,"");while(s.indexOf("#"+(o+1))!==-1){++o}}var l=new a(i);i=[];r=l.lex();while(r.text!=="EOF"){i.push(r);r=l.lex()}i.reverse();i.numArgs=o;this.macros[t]=i}if(i.numArgs){var u=[];var h=void 0;for(h=0;h<i.numArgs;++h){var p=this.get(true);if(p.text==="{"){var c=[];var v=1;while(v!==0){r=this.get(false);c.push(r);if(r.text==="{"){++v}else if(r.text==="}"){--v}else if(r.text==="EOF"){throw new n("End of input in macro argument",p)}}c.pop();c.reverse();u[h]=c}else if(p.text==="EOF"){throw new n("End of input expecting macro argument",e)}else{u[h]=[p]}}i=i.slice();for(h=i.length-1;h>=0;--h){r=i[h];if(r.text==="#"){if(h===0){throw new n("Incomplete placeholder at end of macro body",r)}r=i[--h];if(r.text==="#"){i.splice(h+1,1)}else if(/^[1-9]$/.test(r.text)){i.splice.apply(i,[h,2].concat(u[r.text-1]))}else{throw new n("Not a valid argument number",r)}}}}this.stack=this.stack.concat(i)}};s.prototype.get=function(e){this.discardedWhiteSpace=[];var t=this.nextToken();if(e){while(t.text===" "){this.discardedWhiteSpace.push(t);t=this.nextToken()}}return t};s.prototype.unget=function(e){this.stack.push(e);while(this.discardedWhiteSpace.length!==0){this.stack.push(this.discardedWhiteSpace.pop())}};t.exports=s},{"./Lexer":7,"./ParseError":10,"./macros":24,"object-assign":6}],9:[function(e,t,r){"use strict";var a=e("./fontMetrics");var i=6;var n=[[1,1,1],[2,1,1],[3,1,1],[4,2,1],[5,2,1],[6,3,1],[7,4,2],[8,6,3],[9,7,6],[10,8,7],[11,10,9]];var o=[.5,.6,.7,.8,.9,1,1.2,1.44,1.728,2.074,2.488];function s(e){this.style=e.style;this.color=e.color;this.size=e.size||i;this.textSize=e.textSize||this.size;this.phantom=e.phantom;this.font=e.font;this.sizeMultiplier=o[this.size-1];this._fontMetrics=null}s.prototype.extend=function(e){var t={style:this.style,size:this.size,textSize:this.textSize,color:this.color,phantom:this.phantom,font:this.font};for(var r in e){if(e.hasOwnProperty(r)){t[r]=e[r]}}return new s(t)};function l(e,t){return t.size<2?e:n[e-1][t.size-1]}s.prototype.havingStyle=function(e){if(this.style===e){return this}else{return this.extend({style:e,size:l(this.textSize,e)})}};s.prototype.havingCrampedStyle=function(){return this.havingStyle(this.style.cramp())};s.prototype.havingSize=function(e){if(this.size===e&&this.textSize===e){return this}else{return this.extend({style:this.style.text(),size:e,textSize:e})}};s.prototype.havingBaseStyle=function(e){e=e||this.style.text();var t=l(i,e);if(this.size===t&&this.textSize===i&&this.style===e){return this}else{return this.extend({style:e,size:t,baseSize:i})}};s.prototype.withColor=function(e){return this.extend({color:e})};s.prototype.withPhantom=function(){return this.extend({phantom:true})};s.prototype.withFont=function(e){return this.extend({font:e||this.font})};s.prototype.sizingClasses=function(e){if(e.size!==this.size){return["sizing","reset-size"+e.size,"size"+this.size]}else{return[]}};s.prototype.baseSizingClasses=function(){if(this.size!==i){return["sizing","reset-size"+this.size,"size"+i]}else{return[]}};s.prototype.fontMetrics=function(){if(!this._fontMetrics){this._fontMetrics=a.getFontMetrics(this.size)}return this._fontMetrics};var u={"katex-blue":"#6495ed","katex-orange":"#ffa500","katex-pink":"#ff00af","katex-red":"#df0030","katex-green":"#28ae7b","katex-gray":"gray","katex-purple":"#9d38bd","katex-blueA":"#ccfaff","katex-blueB":"#80f6ff","katex-blueC":"#63d9ea","katex-blueD":"#11accd","katex-blueE":"#0c7f99","katex-tealA":"#94fff5","katex-tealB":"#26edd5","katex-tealC":"#01d1c1","katex-tealD":"#01a995","katex-tealE":"#208170","katex-greenA":"#b6ffb0","katex-greenB":"#8af281","katex-greenC":"#74cf70","katex-greenD":"#1fab54","katex-greenE":"#0d923f","katex-goldA":"#ffd0a9","katex-goldB":"#ffbb71","katex-goldC":"#ff9c39","katex-goldD":"#e07d10","katex-goldE":"#a75a05","katex-redA":"#fca9a9","katex-redB":"#ff8482","katex-redC":"#f9685d","katex-redD":"#e84d39","katex-redE":"#bc2612","katex-maroonA":"#ffbde0","katex-maroonB":"#ff92c6","katex-maroonC":"#ed5fa6","katex-maroonD":"#ca337c","katex-maroonE":"#9e034e","katex-purpleA":"#ddd7ff","katex-purpleB":"#c6b9fc","katex-purpleC":"#aa87ff","katex-purpleD":"#7854ab","katex-purpleE":"#543b78","katex-mintA":"#f5f9e8","katex-mintB":"#edf2df","katex-mintC":"#e0e5cc","katex-grayA":"#f6f7f7","katex-grayB":"#f0f1f2","katex-grayC":"#e3e5e6","katex-grayD":"#d6d8da","katex-grayE":"#babec2","katex-grayF":"#888d93","katex-grayG":"#626569","katex-grayH":"#3b3e40","katex-grayI":"#21242c","katex-kaBlue":"#314453","katex-kaGreen":"#71B307"};s.prototype.getColor=function(){if(this.phantom){return"transparent"}else{return u[this.color]||this.color}};s.BASESIZE=i;t.exports=s},{"./fontMetrics":21}],10:[function(e,t,r){"use strict";function a(e,t){var r="KaTeX parse error: "+e;var i=void 0;var n=void 0;if(t&&t.lexer&&t.start<=t.end){var o=t.lexer.input;i=t.start;n=t.end;if(i===o.length){r+=" at end of input: "}else{r+=" at position "+(i+1)+": "}var s=o.slice(i,n).replace(/[^]/g,"$&\u0332");var l=void 0;if(i>15){l="\u2026"+o.slice(i-15,i)}else{l=o.slice(0,i)}var u=void 0;if(n+15<o.length){u=o.slice(n,n+15)+"\u2026"}else{u=o.slice(n)}r+=l+s+u}var h=new Error(r);h.name="ParseError";h.__proto__=a.prototype;h.position=i;return h}a.prototype.__proto__=Error.prototype;t.exports=a},{}],11:[function(e,t,r){"use strict";var a=e("./functions");var i=e("./environments");var n=e("./MacroExpander");var o=e("./symbols");var s=e("./utils");var l=e("./unicodeRegexes").cjkRegex;var u=e("./parseData");var h=e("./ParseError");function p(e,t){this.gullet=new n(e,t.macros);if(t.colorIsTextColor){this.gullet.macros["\\color"]="\\textcolor"}this.settings=t;this.leftrightDepth=0}var c=u.ParseNode;function v(e,t,r){this.result=e;this.isFunction=t;this.token=r}p.prototype.expect=function(e,t){if(this.nextToken.text!==e){throw new h("Expected '"+e+"', got '"+this.nextToken.text+"'",this.nextToken)}if(t!==false){this.consume()}};p.prototype.consume=function(){this.nextToken=this.gullet.get(this.mode==="math")};p.prototype.switchMode=function(e){this.gullet.unget(this.nextToken);this.mode=e;this.consume()};p.prototype.parse=function(){this.mode="math";this.consume();var e=this.parseInput();return e};p.prototype.parseInput=function(){var e=this.parseExpression(false);this.expect("EOF",false);return e};var f=["}","\\end","\\right","&","\\\\","\\cr"];p.prototype.parseExpression=function(e,t){var r=[];while(true){var i=this.nextToken;if(f.indexOf(i.text)!==-1){break}if(t&&i.text===t){break}if(e&&a[i.text]&&a[i.text].infix){break}var n=this.parseAtom();if(!n){if(!this.settings.throwOnError&&i.text[0]==="\\"){var o=this.handleUnsupportedCmd();r.push(o);continue}break}r.push(n)}return this.handleInfixNodes(r)};p.prototype.handleInfixNodes=function(e){var t=-1;var r=void 0;for(var a=0;a<e.length;a++){var i=e[a];if(i.type==="infix"){if(t!==-1){throw new h("only one infix operator per group",i.value.token)}t=a;r=i.value.replaceWith}}if(t!==-1){var n=void 0;var o=void 0;var s=e.slice(0,t);var l=e.slice(t+1);if(s.length===1&&s[0].type==="ordgroup"){n=s[0]}else{n=new c("ordgroup",s,this.mode)}if(l.length===1&&l[0].type==="ordgroup"){o=l[0]}else{o=new c("ordgroup",l,this.mode)}var u=this.callFunction(r,[n,o],null);return[new c(u.type,u,this.mode)]}else{return e}};var m=1;p.prototype.handleSupSubscript=function(e){var t=this.nextToken;var r=t.text;this.consume();var i=this.parseGroup();if(!i){if(!this.settings.throwOnError&&this.nextToken.text[0]==="\\"){return this.handleUnsupportedCmd()}else{throw new h("Expected group after '"+r+"'",t)}}else if(i.isFunction){var n=a[i.result].greediness;if(n>m){return this.parseFunction(i)}else{throw new h("Got function '"+i.result+"' with no arguments "+"as "+e,t)}}else{return i.result}};p.prototype.handleUnsupportedCmd=function(){var e=this.nextToken.text;var t=[];for(var r=0;r<e.length;r++){t.push(new c("textord",e[r],"text"))}var a=new c("text",{body:t,type:"text"},this.mode);var i=new c("color",{color:this.settings.errorColor,value:[a],type:"color"},this.mode);this.consume();return i};p.prototype.parseAtom=function(){var e=this.parseImplicitGroup();if(this.mode==="text"){return e}var t=void 0;var r=void 0;while(true){var a=this.nextToken;if(a.text==="\\limits"||a.text==="\\nolimits"){if(!e||e.type!=="op"){throw new h("Limit controls must follow a math operator",a)}else{var i=a.text==="\\limits";e.value.limits=i;e.value.alwaysHandleSupSub=true}this.consume()}else if(a.text==="^"){if(t){throw new h("Double superscript",a)}t=this.handleSupSubscript("superscript")}else if(a.text==="_"){if(r){throw new h("Double subscript",a)}r=this.handleSupSubscript("subscript")}else if(a.text==="'"){if(t){throw new h("Double superscript",a)}var n=new c("textord","\\prime",this.mode);var o=[n];this.consume();while(this.nextToken.text==="'"){o.push(n);this.consume()}if(this.nextToken.text==="^"){o.push(this.handleSupSubscript("superscript"))}t=new c("ordgroup",o,this.mode)}else{break}}if(t||r){return new c("supsub",{base:e,sup:t,sub:r},this.mode)}else{return e}};var d=["\\tiny","\\sixptsize","\\scriptsize","\\footnotesize","\\small","\\normalsize","\\large","\\Large","\\LARGE","\\huge","\\Huge"];var g=["\\displaystyle","\\textstyle","\\scriptstyle","\\scriptscriptstyle"];var y={"\\rm":"mathrm","\\sf":"mathsf","\\tt":"mathtt","\\bf":"mathbf","\\it":"mathit"};p.prototype.parseImplicitGroup=function(){var e=this.parseSymbol();if(e==null){return this.parseFunction()}var t=e.result;if(t==="\\left"){var r=this.parseFunction(e);++this.leftrightDepth;var a=this.parseExpression(false);--this.leftrightDepth;this.expect("\\right",false);var n=this.parseFunction();return new c("leftright",{body:a,left:r.value.value,right:n.value.value},this.mode)}else if(t==="\\begin"){var o=this.parseFunction(e);var l=o.value.name;if(!i.hasOwnProperty(l)){throw new h("No such environment: "+l,o.value.nameGroup)}var u=i[l];var p=this.parseArguments("\\begin{"+l+"}",u);var v={mode:this.mode,envName:l,parser:this,positions:p.pop()};var f=u.handler(v,p);this.expect("\\end",false);var m=this.nextToken;var x=this.parseFunction();if(x.value.name!==l){throw new h("Mismatch: \\begin{"+l+"} matched "+"by \\end{"+x.value.name+"}",m)}f.position=x.position;return f}else if(s.contains(d,t)){this.consumeSpaces();var b=this.parseExpression(false);return new c("sizing",{size:s.indexOf(d,t)+1,value:b},this.mode)}else if(s.contains(g,t)){this.consumeSpaces();var w=this.parseExpression(true);return new c("styling",{style:t.slice(1,t.length-5),value:w},this.mode)}else if(t in y){var k=y[t];this.consumeSpaces();var z=this.parseExpression(true);if(k.slice(0,4)==="text"){return new c("text",{style:k,body:new c("ordgroup",z,this.mode)},this.mode)}else{return new c("font",{font:k,body:new c("ordgroup",z,this.mode)},this.mode)}}else if(t==="\\color"){var M=this.parseColorGroup(false);if(!M){throw new h("\\color not followed by color")}var S=this.parseExpression(true);return new c("color",{type:"color",color:M.result.value,value:S},this.mode)}else if(t==="$"){if(this.mode==="math"){throw new h("$ within math mode")}this.consume();var A=this.mode;this.switchMode("math");var N=this.parseExpression(false,"$");this.expect("$",true);this.switchMode(A);return new c("styling",{style:"text",value:N},"math")}else{return this.parseFunction(e)}};p.prototype.parseFunction=function(e){if(!e){e=this.parseGroup()}if(e){if(e.isFunction){var t=e.result;var r=a[t];if(this.mode==="text"&&!r.allowedInText){throw new h("Can't use function '"+t+"' in text mode",e.token)}var i=this.parseArguments(t,r);var n=e.token;var o=this.callFunction(t,i,i.pop(),n);return new c(o.type,o,this.mode)}else{return e.result}}else{return null}};p.prototype.callFunction=function(e,t,r,i){var n={funcName:e,parser:this,positions:r,token:i};return a[e].handler(n,t)};p.prototype.parseArguments=function(e,t){var r=t.numArgs+t.numOptionalArgs;if(r===0){return[[this.pos]]}var i=t.greediness;var n=[this.pos];var o=[];for(var s=0;s<r;s++){var l=this.nextToken;var u=t.argTypes&&t.argTypes[s];var p=void 0;if(s<t.numOptionalArgs){if(u){p=this.parseGroupOfType(u,true)}else{p=this.parseGroup(true)}if(!p){o.push(null);n.push(this.pos);continue}}else{if(u){p=this.parseGroupOfType(u)}else{p=this.parseGroup()}if(!p){if(!this.settings.throwOnError&&this.nextToken.text[0]==="\\"){p=new v(this.handleUnsupportedCmd(this.nextToken.text),false)}else{throw new h("Expected group after '"+e+"'",l)}}}var c=void 0;if(p.isFunction){var f=a[p.result].greediness;if(f>i){c=this.parseFunction(p)}else{throw new h("Got function '"+p.result+"' as "+"argument to '"+e+"'",l)}}else{c=p.result}o.push(c);n.push(this.pos)}o.push(n);return o};p.prototype.parseGroupOfType=function(e,t){var r=this.mode;if(e==="original"){e=r}if(e==="color"){return this.parseColorGroup(t)}if(e==="size"){return this.parseSizeGroup(t)}if(e==="string"){var a=this.parseStringGroup("string",t);return new v(a.text,false)}this.switchMode(e);if(e==="text"){this.consumeSpaces()}var i=this.parseGroup(t);this.switchMode(r);return i};p.prototype.consumeSpaces=function(){while(this.nextToken.text===" "){this.consume()}};p.prototype.parseStringGroup=function(e,t){if(t&&this.nextToken.text!=="["){return null}var r=this.mode;this.mode="text";this.expect(t?"[":"{");var a="";var i=this.nextToken;var n=i;while(this.nextToken.text!==(t?"]":"}")){if(this.nextToken.text==="EOF"){throw new h("Unexpected end of input in "+e,i.range(this.nextToken,a))}n=this.nextToken;a+=n.text;this.consume()}this.mode=r;this.expect(t?"]":"}");return i.range(n,a)};p.prototype.parseRegexGroup=function(e,t){var r=this.mode;this.mode="text";var a=this.nextToken;var i=a;var n="";while(this.nextToken.text!=="EOF"&&e.test(n+this.nextToken.text)){i=this.nextToken;n+=i.text;this.consume()}if(n===""){throw new h("Invalid "+t+": '"+a.text+"'",a)}this.mode=r;return a.range(i,n)};p.prototype.parseColorGroup=function(e){var t=this.parseStringGroup("color",e);if(!t){return null}var r=/^(#[a-z0-9]+|[a-z]+)$/i.exec(t.text);if(!r){throw new h("Invalid color: '"+t.text+"'",t)}return new v(new c("color",r[0],this.mode),false)};p.prototype.parseSizeGroup=function(e){var t=void 0;if(!e&&this.nextToken.text!=="{"){t=this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/,"size")}else{t=this.parseStringGroup("size",e)}if(!t){return null}var r=/([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(t.text);if(!r){throw new h("Invalid size: '"+t.text+"'",t)}var a={number:+(r[1]+r[2]),unit:r[3]};if(a.unit!=="em"&&a.unit!=="ex"&&a.unit!=="mu"){throw new h("Invalid unit: '"+a.unit+"'",t)}return new v(new c("color",a,this.mode),false)};p.prototype.parseGroup=function(e){var t=this.nextToken;if(this.nextToken.text===(e?"[":"{")){this.consume();var r=this.parseExpression(false,e?"]":null);var a=this.nextToken;this.expect(e?"]":"}");if(this.mode==="text"){this.formLigatures(r)}return new v(new c("ordgroup",r,this.mode,t,a),false)}else{return e?null:this.parseSymbol()}};p.prototype.formLigatures=function(e){var t=e.length-1;for(var r=0;r<t;++r){var a=e[r];var i=a.value;if(i==="-"&&e[r+1].value==="-"){if(r+1<t&&e[r+2].value==="-"){e.splice(r,3,new c("textord","---","text",a,e[r+2]));t-=2}else{e.splice(r,2,new c("textord","--","text",a,e[r+1]));t-=1}}if((i==="'"||i==="`")&&e[r+1].value===i){e.splice(r,2,new c("textord",i+i,"text",a,e[r+1]));t-=1}}};p.prototype.parseSymbol=function(){var e=this.nextToken;if(a[e.text]){this.consume();return new v(e.text,true,e)}else if(o[this.mode][e.text]){this.consume();return new v(new c(o[this.mode][e.text].group,e.text,this.mode,e),false,e)}else if(this.mode==="text"&&l.test(e.text)){this.consume();return new v(new c("textord",e.text,this.mode,e),false,e)}else if(e.text==="$"){return new v(e.text,false,e)}else{return null}};p.prototype.ParseNode=c;t.exports=p},{"./MacroExpander":8,"./ParseError":10,"./environments":20,"./functions":23,"./parseData":26,"./symbols":29,"./unicodeRegexes":30,"./utils":31}],12:[function(e,t,r){"use strict";var a=e("./utils");function i(e){e=e||{};this.displayMode=a.deflt(e.displayMode,false);this.throwOnError=a.deflt(e.throwOnError,true);this.errorColor=a.deflt(e.errorColor,"#cc0000");this.macros=e.macros||{};this.colorIsTextColor=a.deflt(e.colorIsTextColor,false)}t.exports=i},{"./utils":31}],13:[function(e,t,r){"use strict";function a(e,t,r){this.id=e;this.size=t;this.cramped=r}a.prototype.sup=function(){return c[v[this.id]]};a.prototype.sub=function(){return c[f[this.id]]};a.prototype.fracNum=function(){return c[m[this.id]]};a.prototype.fracDen=function(){return c[d[this.id]]};a.prototype.cramp=function(){return c[g[this.id]]};a.prototype.text=function(){return c[y[this.id]]};a.prototype.isTight=function(){return this.size>=2};var i=0;var n=1;var o=2;var s=3;var l=4;var u=5;var h=6;var p=7;var c=[new a(i,0,false),new a(n,0,true),new a(o,1,false),new a(s,1,true),new a(l,2,false),new a(u,2,true),new a(h,3,false),new a(p,3,true)];var v=[l,u,l,u,h,p,h,p];var f=[u,u,u,u,p,p,p,p];var m=[o,s,l,u,h,p,h,p];var d=[s,s,u,u,p,p,p,p];var g=[n,n,s,s,u,u,p,p];var y=[i,n,o,s,o,s,o,s];t.exports={DISPLAY:c[i],TEXT:c[o],SCRIPT:c[l],SCRIPTSCRIPT:c[h]}},{}],14:[function(e,t,r){"use strict";var a=e("./domTree");var i=e("./fontMetrics");var n=e("./symbols");var o=e("./utils");var s=["\\imath","\\jmath","\\pounds"];var l=function e(t,r,a){if(n[a][t]&&n[a][t].replace){t=n[a][t].replace}return{value:t,metrics:i.getCharacterMetrics(t,r)}};var u=function e(t,r,i,n,o){var s=l(t,r,i);var u=s.metrics;t=s.value;var h=void 0;if(u){var p=u.italic;if(i==="text"){p=0}h=new a.symbolNode(t,u.height,u.depth,p,u.skew,o)}else{typeof console!=="undefined"&&console.warn("No character metrics for '"+t+"' in style '"+r+"'");h=new a.symbolNode(t,0,0,0,0,o)}if(n){h.maxFontSize=n.sizeMultiplier;if(n.style.isTight()){h.classes.push("mtight")}if(n.getColor()){h.style.color=n.getColor()}}return h};var h=function e(t,r,a,i){if(t==="\\"||n[r][t].font==="main"){return u(t,"Main-Regular",r,a,i)}else{return u(t,"AMS-Regular",r,a,i.concat(["amsrm"]))}};var p=function e(t,r,a,i,o){if(o==="mathord"){var s=c(t,r,a,i);return u(t,s.fontName,r,a,i.concat([s.fontClass]))}else if(o==="textord"){var l=n[r][t]&&n[r][t].font;if(l==="ams"){return u(t,"AMS-Regular",r,a,i.concat(["amsrm"]))}else{return u(t,"Main-Regular",r,a,i.concat(["mathrm"]))}}else{throw new Error("unexpected type: "+o+" in mathDefault")}};var c=function e(t,r,a,i){if(/[0-9]/.test(t.charAt(0))||o.contains(s,t)){return{fontName:"Main-Italic",fontClass:"mainit"}}else{return{fontName:"Math-Italic",fontClass:"mathit"}}};var v=function e(t,r,a){var i=t.mode;var n=t.value;var h=["mord"];var v=r.font;if(v){var f=void 0;if(v==="mathit"||o.contains(s,n)){f=c(n,i,r,h)}else{f=w[v]}if(l(n,f.fontName,i).metrics){return u(n,f.fontName,i,r,h.concat([f.fontClass||v]))}else{return p(n,i,r,h,a)}}else{return p(n,i,r,h,a)}};var f=function e(t){var r=0;var a=0;var i=0;if(t.children){for(var n=0;n<t.children.length;n++){if(t.children[n].height>r){r=t.children[n].height}if(t.children[n].depth>a){a=t.children[n].depth}if(t.children[n].maxFontSize>i){i=t.children[n].maxFontSize}}}t.height=r;t.depth=a;t.maxFontSize=i};var m=function e(t,r,i){var n=new a.span(t,r,i);f(n);return n};var d=function e(t,r){t.children=r.concat(t.children);f(t)};var g=function e(t,r){var i=new a.documentFragment(t,r);f(i);return i};var y=function e(t,r){var i=m([],[new a.symbolNode("\u200b")]);i.style.fontSize=r+"em";var n=m(["fontsize-ensurer"].concat(t.baseSizingClasses()),[i]);return n};var x=function e(t,r,i,n){var o=void 0;var s=void 0;var l=void 0;if(r==="individualShift"){var u=t;t=[u[0]];o=-u[0].shift-u[0].elem.depth;s=o;for(l=1;l<u.length;l++){var h=-u[l].shift-s-u[l].elem.depth;var p=h-(u[l-1].elem.height+u[l-1].elem.depth);s=s+h;t.push({type:"kern",size:p});t.push(u[l])}}else if(r==="top"){var c=i;for(l=0;l<t.length;l++){if(t[l].type==="kern"){c-=t[l].size}else{c-=t[l].elem.height+t[l].elem.depth}}o=c}else if(r==="bottom"){o=-i}else if(r==="shift"){o=-t[0].elem.depth-i}else if(r==="firstBaseline"){o=-t[0].elem.depth}else{o=0}var v=0;for(l=0;l<t.length;l++){if(t[l].type==="elem"){v=Math.max(v,t[l].elem.maxFontSize)}}var f=y(n,v);var d=[];s=o;for(l=0;l<t.length;l++){if(t[l].type==="kern"){s+=t[l].size}else{var g=t[l].elem;var x=-g.depth-s;s+=g.height+g.depth;var b=m([],[f,g]);b.height-=x;b.depth+=x;b.style.top=x+"em";d.push(b)}}var w=m(["baseline-fix"],[f,new a.symbolNode("\u200b")]);d.push(w);var k=m(["vlist"],d);k.height=Math.max(s,k.height);k.depth=Math.max(-o,k.depth);return k};var b={"\\qquad":{size:"2em",className:"qquad"},"\\quad":{size:"1em",className:"quad"},"\\enspace":{size:"0.5em",className:"enspace"},"\\;":{size:"0.277778em",className:"thickspace"},"\\:":{size:"0.22222em",className:"mediumspace"},"\\,":{size:"0.16667em",className:"thinspace"},"\\!":{size:"-0.16667em",className:"negativethinspace"}};var w={mathbf:{variant:"bold",fontName:"Main-Bold"},mathrm:{variant:"normal",fontName:"Main-Regular"},textit:{variant:"italic",fontName:"Main-Italic"},mathbb:{variant:"double-struck",fontName:"AMS-Regular"},mathcal:{variant:"script",fontName:"Caligraphic-Regular"},mathfrak:{variant:"fraktur",fontName:"Fraktur-Regular"},mathscr:{variant:"script",fontName:"Script-Regular"},mathsf:{variant:"sans-serif",fontName:"SansSerif-Regular"},mathtt:{variant:"monospace",fontName:"Typewriter-Regular"}};t.exports={fontMap:w,makeSymbol:u,mathsym:h,makeSpan:m,makeFragment:g,makeVList:x,makeOrd:v,prependChildren:d,spacingFunctions:b}},{"./domTree":19,"./fontMetrics":21,"./symbols":29,"./utils":31}],15:[function(e,t,r){"use strict";var a=e("babel-runtime/core-js/json/stringify");var i=n(a);function n(e){return e&&e.__esModule?e:{default:e}}var o=e("./ParseError");var s=e("./Style");var l=e("./buildCommon");var u=e("./delimiter");var h=e("./domTree");var p=e("./utils");var c=e("./stretchy");var v=l.makeSpan;var f=function e(t){return t instanceof h.span&&t.classes[0]==="mspace"};var m=function e(t){return t&&t.classes[0]==="mbin"};var d=function e(t,r){if(t){return p.contains(["mbin","mopen","mrel","mop","mpunct"],t.classes[0])}else{return r}};var g=function e(t,r){if(t){return p.contains(["mrel","mclose","mpunct"],t.classes[0])}else{return r}};var y=function e(t,r){var a=r;while(a<t.length&&f(t[a])){a++}if(a===r){return null}else{return t.splice(r,a-r)}};var x=function e(t,r,a){var i=[];for(var n=0;n<t.length;n++){var o=t[n];var s=q(o,r);if(s instanceof h.documentFragment){Array.prototype.push.apply(i,s.children)}else{i.push(s)}}for(var u=0;u<i.length;u++){var p=y(i,u);if(p){if(u<i.length){if(i[u]instanceof h.symbolNode){i[u]=v([].concat(i[u].classes),[i[u]])}l.prependChildren(i[u],p)}else{Array.prototype.push.apply(i,p);break}}}for(var c=0;c<i.length;c++){var f=1;var x=1;while(i[c-f]&&i[c-f].classes[0]==="cursor"){f++}while(i[c+x]&&i[c+x].classes[0]==="cursor"){x++}if(m(i[c])&&(d(i[c-f],a)||g(i[c+x],a))){i[c].classes[0]="mord"}}return i};var b=function e(t){if(t instanceof h.documentFragment){if(t.children.length){return e(t.children[t.children.length-1])}}else{if(p.contains(["mord","mop","mbin","mrel","mopen","mclose","mpunct","minner"],t.classes[0])){return t.classes[0]}}return null};var w=function e(t,r){if(!t.value.base){return false}else{var a=t.value.base;if(a.type==="op"){return a.value.limits&&(r.style.size===s.DISPLAY.size||a.value.alwaysHandleSupSub)}else if(a.type==="accent"){return z(a.value.base)}else if(a.type==="horizBrace"){var i=t.value.sub?false:true;return i===a.value.isOver}else{return null}}};var k=function e(t){if(!t){return false}else if(t.type==="ordgroup"){if(t.value.length===1){return e(t.value[0])}else{return t}}else if(t.type==="color"){if(t.value.value.length===1){return e(t.value.value[0])}else{return t}}else if(t.type==="font"){return e(t.value.body)}else{return t}};var z=function e(t){var r=k(t);return r.type==="mathord"||r.type==="textord"||r.type==="bin"||r.type==="rel"||r.type==="inner"||r.type==="open"||r.type==="close"||r.type==="punct"};var M=function e(t,r){var a=["nulldelimiter"].concat(t.baseSizingClasses());return v(r.concat(a))};var S={};S.mathord=function(e,t){return l.makeOrd(e,t,"mathord")};S.textord=function(e,t){return l.makeOrd(e,t,"textord")};S.bin=function(e,t){return l.mathsym(e.value,e.mode,t,["mbin"])};S.rel=function(e,t){return l.mathsym(e.value,e.mode,t,["mrel"])};S.open=function(e,t){return l.mathsym(e.value,e.mode,t,["mopen"])};S.close=function(e,t){return l.mathsym(e.value,e.mode,t,["mclose"])};S.inner=function(e,t){return l.mathsym(e.value,e.mode,t,["minner"])};S.punct=function(e,t){return l.mathsym(e.value,e.mode,t,["mpunct"])};S.ordgroup=function(e,t){return v(["mord"],x(e.value,t,true),t)};S.text=function(e,t){var r=t.withFont(e.value.style);var a=x(e.value.body,r,true);for(var i=0;i<a.length-1;i++){if(a[i].tryCombine(a[i+1])){a.splice(i+1,1);i--}}return v(["mord","text"],a,r)};S.xmlClass=function(e,t,r){var a=x(e.value.value,t,r);return new l.makeFragment(a,[e.value.cl])};S.color=function(e,t){var r=x(e.value.value,t.withColor(e.value.color),false);return new l.makeFragment(r)};S.supsub=function(e,t){if(w(e,t)){return S[e.value.base.type](e,t)}var r=q(e.value.base,t);var a=void 0;var i=void 0;var n=t.fontMetrics();var o=void 0;var u=0;var p=0;if(e.value.sup){o=t.havingStyle(t.style.sup());a=q(e.value.sup,o,t);if(!z(e.value.base)){u=r.height-o.fontMetrics().supDrop*o.sizeMultiplier/t.sizeMultiplier}}if(e.value.sub){o=t.havingStyle(t.style.sub());i=q(e.value.sub,o,t);if(!z(e.value.base)){p=r.depth+o.fontMetrics().subDrop*o.sizeMultiplier/t.sizeMultiplier}}var c=void 0;if(t.style===s.DISPLAY){c=n.sup1}else if(t.style.cramped){c=n.sup3}else{c=n.sup2}var f=t.sizeMultiplier;var m=.5/n.ptPerEm/f+"em";var d=void 0;if(!e.value.sup){p=Math.max(p,n.sub1,i.height-.8*n.xHeight);d=l.makeVList([{type:"elem",elem:i}],"shift",p,t);d.children[0].style.marginRight=m;if(r instanceof h.symbolNode){d.children[0].style.marginLeft=-r.italic+"em"}}else if(!e.value.sub){u=Math.max(u,c,a.depth+.25*n.xHeight);d=l.makeVList([{type:"elem",elem:a}],"shift",-u,t);d.children[0].style.marginRight=m}else{u=Math.max(u,c,a.depth+.25*n.xHeight);p=Math.max(p,n.sub2);var g=n.defaultRuleThickness;if(u-a.depth-(i.height-p)<4*g){p=4*g-(u-a.depth)+i.height;var y=.8*n.xHeight-(u-a.depth);if(y>0){u+=y;p-=y}}d=l.makeVList([{type:"elem",elem:i,shift:p},{type:"elem",elem:a,shift:-u}],"individualShift",null,t);if(r instanceof h.symbolNode){d.children[0].style.marginLeft=-r.italic+"em"}d.children[0].style.marginRight=m;d.children[1].style.marginRight=m}var x=b(r)||"mord";return v([x],[r,v(["msupsub"],[d])],t)};S.genfrac=function(e,t){var r=t.style;if(e.value.size==="display"){r=s.DISPLAY}else if(e.value.size==="text"){r=s.TEXT}var a=r.fracNum();var i=r.fracDen();var n=void 0;n=t.havingStyle(a);var o=q(e.value.numer,n,t);n=t.havingStyle(i);var h=q(e.value.denom,n,t);var p=void 0;if(e.value.hasBarLine){p=N("frac-line",t)}else{p=null}var c=p?p.height:0;var f=void 0;var m=void 0;var d=void 0;if(r.size===s.DISPLAY.size){f=t.fontMetrics().num1;if(c>0){m=3*c}else{m=7*t.fontMetrics().defaultRuleThickness}d=t.fontMetrics().denom1}else{if(c>0){f=t.fontMetrics().num2;m=c}else{f=t.fontMetrics().num3;m=3*t.fontMetrics().defaultRuleThickness;
}d=t.fontMetrics().denom2}var g=void 0;if(c===0){var y=f-o.depth-(h.height-d);if(y<m){f+=.5*(m-y);d+=.5*(m-y)}g=l.makeVList([{type:"elem",elem:h,shift:d},{type:"elem",elem:o,shift:-f}],"individualShift",null,t)}else{var x=t.fontMetrics().axisHeight;if(f-o.depth-(x+.5*c)<m){f+=m-(f-o.depth-(x+.5*c))}if(x-.5*c-(h.height-d)<m){d+=m-(x-.5*c-(h.height-d))}var b=-(x-.5*c);g=l.makeVList([{type:"elem",elem:h,shift:d},{type:"elem",elem:p,shift:b},{type:"elem",elem:o,shift:-f}],"individualShift",null,t)}n=t.havingStyle(r);g.height*=n.sizeMultiplier/t.sizeMultiplier;g.depth*=n.sizeMultiplier/t.sizeMultiplier;var w=void 0;if(r.size===s.DISPLAY.size){w=t.fontMetrics().delim1}else{w=t.fontMetrics().delim2}var k=void 0;var z=void 0;if(e.value.leftDelim==null){k=M(t,["mopen"])}else{k=u.customSizedDelim(e.value.leftDelim,w,true,t.havingStyle(r),e.mode,["mopen"])}if(e.value.rightDelim==null){z=M(t,["mclose"])}else{z=u.customSizedDelim(e.value.rightDelim,w,true,t.havingStyle(r),e.mode,["mclose"])}return v(["mord"].concat(n.sizingClasses(t)),[k,v(["mfrac"],[g]),z],t)};var A=function e(t,r){var a=t.number;if(t.unit==="ex"){a*=r.fontMetrics().emPerEx}else if(t.unit==="mu"){a/=18}return a};S.array=function(e,t){var r=void 0;var a=void 0;var i=e.value.body.length;var n=0;var s=new Array(i);var u=1/t.fontMetrics().ptPerEm;var h=5*u;var c=12*u;var f=3*u;var m=p.deflt(e.value.arraystretch,1);var d=m*c;var g=.7*d;var y=.3*d;var x=0;for(r=0;r<e.value.body.length;++r){var b=e.value.body[r];var w=g;var k=y;if(n<b.length){n=b.length}var z=new Array(b.length);for(a=0;a<b.length;++a){var M=q(b[a],t);if(k<M.depth){k=M.depth}if(w<M.height){w=M.height}z[a]=M}var S=0;if(e.value.rowGaps[r]){S=A(e.value.rowGaps[r].value,t);if(S>0){S+=y;if(k<S){k=S}S=0}}if(e.value.addJot){k+=f}z.height=w;z.depth=k;x+=w;z.pos=x;x+=k+S;s[r]=z}var N=x/2+t.fontMetrics().axisHeight;var T=e.value.cols||[];var C=[];var E=void 0;var O=void 0;for(a=0,O=0;a<n||O<T.length;++a,++O){var R=T[O]||{};var L=true;while(R.type==="separator"){if(!L){E=v(["arraycolsep"],[]);E.style.width=t.fontMetrics().doubleRuleSep+"em";C.push(E)}if(R.separator==="|"){var D=v(["vertical-separator"],[]);D.style.height=x+"em";D.style.verticalAlign=-(x-N)+"em";C.push(D)}else{throw new o("Invalid separator type: "+R.separator)}O++;R=T[O]||{};L=false}if(a>=n){continue}var P=void 0;if(a>0||e.value.hskipBeforeAndAfter){P=p.deflt(R.pregap,h);if(P!==0){E=v(["arraycolsep"],[]);E.style.width=P+"em";C.push(E)}}var B=[];for(r=0;r<i;++r){var F=s[r];var I=F[a];if(!I){continue}var V=F.pos-N;I.depth=F.depth;I.height=F.height;B.push({type:"elem",elem:I,shift:V})}B=l.makeVList(B,"individualShift",null,t);B=v(["col-align-"+(R.align||"c")],[B]);C.push(B);if(a<n-1||e.value.hskipBeforeAndAfter){P=p.deflt(R.postgap,h);if(P!==0){E=v(["arraycolsep"],[]);E.style.width=P+"em";C.push(E)}}}s=v(["mtable"],C);return v(["mord"],[s],t)};S.spacing=function(e,t){if(e.value==="\\ "||e.value==="\\space"||e.value===" "||e.value==="~"){if(e.mode==="text"){return l.makeOrd(e,t,"textord")}else{return v(["mspace"],[l.mathsym(e.value,e.mode,t)],t)}}else{return v(["mspace",l.spacingFunctions[e.value].className],[],t)}};S.llap=function(e,t){var r=v(["inner"],[q(e.value.body,t)]);var a=v(["fix"],[]);return v(["mord","llap"],[r,a],t)};S.rlap=function(e,t){var r=v(["inner"],[q(e.value.body,t)]);var a=v(["fix"],[]);return v(["mord","rlap"],[r,a],t)};S.op=function(e,t){var r=void 0;var a=void 0;var i=false;if(e.type==="supsub"){r=e.value.sup;a=e.value.sub;e=e.value.base;i=true}var n=t.style;var o=["\\smallint"];var u=false;if(n.size===s.DISPLAY.size&&e.value.symbol&&!p.contains(o,e.value.body)){u=true}var c=void 0;if(e.value.symbol){var f=u?"Size2-Regular":"Size1-Regular";c=l.makeSymbol(e.value.body,f,"math",t,["mop","op-symbol",u?"large-op":"small-op"])}else if(e.value.value){var m=x(e.value.value,t,true);if(m.length===1&&m[0]instanceof h.symbolNode){c=m[0];c.classes[0]="mop"}else{c=v(["mop"],m,t)}}else{var d=[];for(var g=1;g<e.value.body.length;g++){d.push(l.mathsym(e.value.body[g],e.mode))}c=v(["mop"],d,t)}var y=0;var b=0;if(c instanceof h.symbolNode){y=(c.height-c.depth)/2-t.fontMetrics().axisHeight;b=c.italic}if(i){c=v([],[c]);var w=void 0;var k=void 0;var z=void 0;var M=void 0;var S=void 0;if(r){S=t.havingStyle(n.sup());w=q(r,S,t);k=Math.max(t.fontMetrics().bigOpSpacing1,t.fontMetrics().bigOpSpacing3-w.depth)}if(a){S=t.havingStyle(n.sub());z=q(a,S,t);M=Math.max(t.fontMetrics().bigOpSpacing2,t.fontMetrics().bigOpSpacing4-z.height)}var A=void 0;var N=void 0;var T=void 0;if(!r){N=c.height-y;A=l.makeVList([{type:"kern",size:t.fontMetrics().bigOpSpacing5},{type:"elem",elem:z},{type:"kern",size:M},{type:"elem",elem:c}],"top",N,t);A.children[0].style.marginLeft=-b+"em"}else if(!a){T=c.depth+y;A=l.makeVList([{type:"elem",elem:c},{type:"kern",size:k},{type:"elem",elem:w},{type:"kern",size:t.fontMetrics().bigOpSpacing5}],"bottom",T,t);A.children[1].style.marginLeft=b+"em"}else if(!r&&!a){return c}else{T=t.fontMetrics().bigOpSpacing5+z.height+z.depth+M+c.depth+y;A=l.makeVList([{type:"kern",size:t.fontMetrics().bigOpSpacing5},{type:"elem",elem:z},{type:"kern",size:M},{type:"elem",elem:c},{type:"kern",size:k},{type:"elem",elem:w},{type:"kern",size:t.fontMetrics().bigOpSpacing5}],"bottom",T,t);A.children[0].style.marginLeft=-b+"em";A.children[2].style.marginLeft=b+"em"}return v(["mop","op-limits"],[A],t)}else{if(y){c.style.position="relative";c.style.top=y+"em"}return c}};S.mod=function(e,t){var r=[];if(e.value.modType==="bmod"){if(!t.style.isTight()){r.push(v(["mspace","negativemediumspace"],[],t))}r.push(v(["mspace","thickspace"],[],t))}else if(t.style.size===s.DISPLAY.size){r.push(v(["mspace","quad"],[],t))}else if(e.value.modType==="mod"){r.push(v(["mspace","twelvemuspace"],[],t))}else{r.push(v(["mspace","eightmuspace"],[],t))}if(e.value.modType==="pod"||e.value.modType==="pmod"){r.push(l.mathsym("(",e.mode))}if(e.value.modType!=="pod"){var a=[l.mathsym("m",e.mode),l.mathsym("o",e.mode),l.mathsym("d",e.mode)];if(e.value.modType==="bmod"){r.push(v(["mbin"],a,t));r.push(v(["mspace","thickspace"],[],t));if(!t.style.isTight()){r.push(v(["mspace","negativemediumspace"],[],t))}}else{Array.prototype.push.apply(r,a);r.push(v(["mspace","sixmuspace"],[],t))}}if(e.value.value){Array.prototype.push.apply(r,x(e.value.value,t,false))}if(e.value.modType==="pod"||e.value.modType==="pmod"){r.push(l.mathsym(")",e.mode))}return l.makeFragment(r)};S.katex=function(e,t){var r=v(["k"],[l.mathsym("K",e.mode)],t);var a=v(["a"],[l.mathsym("A",e.mode)],t);a.height=(a.height+.2)*.75;a.depth=(a.height-.2)*.75;var i=v(["t"],[l.mathsym("T",e.mode)],t);var n=v(["e"],[l.mathsym("E",e.mode)],t);n.height=n.height-.2155;n.depth=n.depth+.2155;var o=v(["x"],[l.mathsym("X",e.mode)],t);return v(["mord","katex-logo"],[r,a,i,n,o],t)};var N=function e(t,r){var a=r.havingBaseStyle();var i=v([t].concat(a.sizingClasses(r)),[],r);i.height=r.fontMetrics().defaultRuleThickness/r.sizeMultiplier;i.maxFontSize=1;return i};S.overline=function(e,t){var r=q(e.value.body,t.havingCrampedStyle());var a=N("overline-line",t);var i=l.makeVList([{type:"elem",elem:r},{type:"kern",size:3*a.height},{type:"elem",elem:a},{type:"kern",size:a.height}],"firstBaseline",null,t);return v(["mord","overline"],[i],t)};S.underline=function(e,t){var r=q(e.value.body,t);var a=N("underline-line",t);var i=l.makeVList([{type:"kern",size:a.height},{type:"elem",elem:a},{type:"kern",size:3*a.height},{type:"elem",elem:r}],"top",r.height,t);return v(["mord","underline"],[i],t)};S.sqrt=function(e,t){var r=q(e.value.body,t.havingCrampedStyle());var a=N("sqrt-line",t);var i=a.height;var n=i;if(t.style.id<s.TEXT.id){n=t.fontMetrics().xHeight*t.sizeMultiplier}var o=i+n/4;var h=(r.height+r.depth+o+i)*t.sizeMultiplier;var p=v(["sqrt-sign"],[u.customSizedDelim("\\surd",h,false,t,e.mode)],t);var c=p.height+p.depth-i;if(c>r.height+r.depth+o){o=(o+c-r.height-r.depth)/2}var f=-(r.height+o+i)+p.height;p.style.top=f+"em";p.height-=f;p.depth+=f;var m=void 0;if(r.height===0&&r.depth===0){m=v()}else{m=l.makeVList([{type:"elem",elem:r},{type:"kern",size:o},{type:"elem",elem:a},{type:"kern",size:i}],"firstBaseline",null,t)}if(!e.value.index){return v(["mord","sqrt"],[p,m],t)}else{var d=t.havingStyle(s.SCRIPTSCRIPT);var g=q(e.value.index,d,t);var y=Math.max(p.height,m.height);var x=Math.max(p.depth,m.depth);var b=.6*(y-x);var w=l.makeVList([{type:"elem",elem:g}],"shift",-b,t);var k=v(["root"],[w]);return v(["mord","sqrt"],[k,p,m],t)}};function T(e,t,r){var a=x(e,t,false);var i=t.sizeMultiplier/r.sizeMultiplier;for(var n=0;n<a.length;n++){var o=p.indexOf(a[n].classes,"sizing");if(o<0){Array.prototype.push.apply(a[n].classes,t.sizingClasses(r))}else if(a[n].classes[o+1]==="reset-size"+t.size){a[n].classes[o+1]="reset-size"+r.size}a[n].height*=i;a[n].depth*=i}return l.makeFragment(a)}S.sizing=function(e,t){var r=t.havingSize(e.value.size);return T(e.value.value,r,t)};S.styling=function(e,t){var r={display:s.DISPLAY,text:s.TEXT,script:s.SCRIPT,scriptscript:s.SCRIPTSCRIPT};var a=r[e.value.style];var i=t.havingStyle(a);return T(e.value.value,i,t)};S.font=function(e,t){var r=e.value.font;return q(e.value.body,t.withFont(r))};S.delimsizing=function(e,t){var r=e.value.value;if(r==="."){return v([e.value.mclass])}return u.sizedDelim(r,e.value.size,t,e.mode,[e.value.mclass])};S.leftright=function(e,t){var r=x(e.value.body,t,true);var a=0;var i=0;var n=false;for(var o=0;o<r.length;o++){if(r[o].isMiddle){n=true}else{a=Math.max(r[o].height,a);i=Math.max(r[o].depth,i)}}a*=t.sizeMultiplier;i*=t.sizeMultiplier;var s=void 0;if(e.value.left==="."){s=M(t,["mopen"])}else{s=u.leftRightDelim(e.value.left,a,i,t,e.mode,["mopen"])}r.unshift(s);if(n){for(var h=1;h<r.length;h++){var p=r[h];if(p.isMiddle){r[h]=u.leftRightDelim(p.isMiddle.value,a,i,p.isMiddle.options,e.mode,[]);var c=y(p.children,0);if(c){l.prependChildren(r[h],c)}}}}var f=void 0;if(e.value.right==="."){f=M(t,["mclose"])}else{f=u.leftRightDelim(e.value.right,a,i,t,e.mode,["mclose"])}r.push(f);return v(["minner"],r,t)};S.cursor=function(e,t,r){var a=v(["cursor"],[],t);var i=0;var n=A(e.value.height,t);if(e.value.shift){i=A(e.value.shift,t)}i/=t.sizeMultiplier;n/=t.sizeMultiplier;a.style.marginRight="-1px";a.style.borderRight="1px solid";a.style.marginBottom=i+"em";a.style.height=n+"em";a.width=1;a.height=n+i;a.depth=-i;e.value.previous=r;return a};S.middle=function(e,t){var r=void 0;if(e.value.value==="."){r=M(t,[])}else{r=u.sizedDelim(e.value.value,1,t,e.mode,[]);r.isMiddle={value:e.value.value,options:t}}return r};S.rule=function(e,t,r){var a=v(["mord","rule"],[],t);var i=0;if(e.value.shift){i=A(e.value.shift,t)}var n=A(e.value.width,t);var o=A(e.value.height,t);i/=t.sizeMultiplier;n/=t.sizeMultiplier;o/=t.sizeMultiplier;a.style.borderRightWidth=n+"em";a.style.borderTopWidth=o+"em";a.style.bottom=i+"em";a.width=n;a.height=o+i;a.depth=-i;return a};S.kern=function(e,t){var r=v(["mord","rule"],[],t);var a=0;if(e.value.dimension){a=A(e.value.dimension,t)}a/=t.sizeMultiplier;r.style.marginLeft=a+"em";return r};S.accent=function(e,t){var r=e.value.base;var a=void 0;if(e.type==="supsub"){var i=e;e=i.value.base;r=e.value.base;i.value.base=r;a=q(i,t)}var n=q(r,t.havingCrampedStyle());var o=e.value.isShifty&&z(r);var s=0;if(o){var u=k(r);var h=q(u,t.havingCrampedStyle());s=h.skew}var p=Math.min(n.height,t.fontMetrics().xHeight);var f=void 0;if(!e.value.isStretchy){var m=l.makeSymbol(e.value.label,"Main-Regular","math",t);m.italic=0;var d=e.value.label==="\\vec"?"accent-vec":null;f=v(["accent-body",d],[v([],[m])]);f.style.marginLeft=2*s+"em";f=l.makeVList([{type:"elem",elem:n},{type:"kern",size:-p},{type:"elem",elem:f}],"firstBaseline",null,t)}else{f=c.svgSpan(e,t);if(s>0){var g="calc(100% - "+2*s+"em) 100%";f.style.backgroundSize=g}f=l.makeVList([{type:"elem",elem:n},{type:"elem",elem:f}],"firstBaseline",null,t)}var y=v(["mord","accent"],[f],t);if(a){a.children[0]=y;a.height=Math.max(y.height,a.height);a.classes[0]="mord";return a}else{return y}};S.horizBrace=function(e,t){var r=t.style;var a=e.type==="supsub";var i=void 0;var n=void 0;if(a){if(e.value.sup){n=t.havingStyle(r.sup());i=q(e.value.sup,n,t)}else{n=t.havingStyle(r.sub());i=q(e.value.sub,n,t)}e=e.value.base}var o=q(e.value.base,t.havingStyle(r.cramp()));var s=c.svgSpan(e,t);var u=void 0;if(e.value.isOver){u=l.makeVList([{type:"elem",elem:o},{type:"kern",size:.1},{type:"elem",elem:s}],"firstBaseline",null,t)}else{u=l.makeVList([{type:"elem",elem:s},{type:"kern",size:.1},{type:"elem",elem:o}],"bottom",o.depth+.1+s.height,t)}if(a){var h=v(["mord",e.value.isOver?"mover":"munder"],[u],t);if(e.value.isOver){u=l.makeVList([{type:"elem",elem:h},{type:"kern",size:.2},{type:"elem",elem:i}],"firstBaseline",null,t)}else{u=l.makeVList([{type:"elem",elem:i},{type:"kern",size:.2},{type:"elem",elem:h}],"bottom",h.depth+.2+i.height,t)}}return v(["mord",e.value.isOver?"mover":"munder"],[u],t)};S.accentUnder=function(e,t){var r=q(e.value.body,t);var a=c.svgSpan(e,t);var i=/tilde/.test(e.value.label)?.12:0;var n=l.makeVList([{type:"elem",elem:a},{type:"kern",size:i},{type:"elem",elem:r}],"bottom",a.height+i,t);return v(["mord","accentunder"],[n],t)};S.enclose=function(e,t){var r=q(e.value.body,t);var a=e.value.label.substr(1);var i=t.sizeMultiplier;var n=void 0;var o=0;var s=0;if(a==="sout"){n=v(["stretchy","sout"]);n.height=t.fontMetrics().defaultRuleThickness/i;n.maxFontSize=1;s=-.5*t.fontMetrics().xHeight}else{r.classes.push(a==="fbox"?"boxpad":"cancel-pad");var u=z(e.value.body);o=a==="fbox"?.34:u?.2:0;s=r.depth+o;n=c.encloseSpan(r,u,a,o,t)}var h=l.makeVList([{type:"elem",elem:r,shift:0},{type:"elem",elem:n,shift:s}],"individualShift",null,t);if(n.height>h.maxFontSize){h.children[1].style.top=-(r.height+o-.9/i)+"em"}if(/cancel/.test(a)){return v(["mord","cancel-lap"],[h],t)}else{return v(["mord"],[h],t)}};S.xArrow=function(e,t){var r=t.style;var a=t.havingStyle(r.sup());var i=q(e.value.body,a,t);var n=void 0;if(e.value.below){a=t.havingStyle(r.sub());n=q(e.value.below,a,t)}var o=c.svgSpan(e,t);var s=-t.fontMetrics().axisHeight+o.depth;var u=-t.fontMetrics().axisHeight-o.height-.111;var h=void 0;if(e.value.below){var p=-t.fontMetrics().axisHeight+n.height+o.height+.111;h=l.makeVList([{type:"elem",elem:i,shift:u},{type:"elem",elem:o,shift:s},{type:"elem",elem:n,shift:p}],"individualShift",null,t)}else{h=l.makeVList([{type:"elem",elem:i,shift:u},{type:"elem",elem:o,shift:s}],"individualShift",null,t)}var f=v(["mrel","x-arrow"],[h],t);f.depth=f.depth;f.height=f.height;return f};S.phantom=function(e,t){var r=x(e.value.value,t.withPhantom(),false);return new l.makeFragment(r)};S.mclass=function(e,t){var r=x(e.value.value,t,true);return v([e.value.mclass],r,t)};var q=function e(t,r,a){if(!t){return v()}if(S[t.type]){var i=S[t.type](t,r);if(a&&r.size!==a.size){i=v(r.sizingClasses(a),[i],r);var n=r.sizeMultiplier/a.sizeMultiplier;i.height*=n;i.depth*=n}return i}else{throw new o("Got group of unknown type: '"+t.type+"'")}};var C=function e(t,r){t=JSON.parse((0,i.default)(t));var a=x(t,r,true);var n=v(["base"],a,r);var o=v(["strut"]);var s=v(["strut","bottom"]);o.style.height=n.height+"em";s.style.height=n.height+n.depth+"em";s.style.verticalAlign=-n.depth+"em";var l=v(["katex-html"],[o,s,n]);l.setAttribute("aria-hidden","true");return l};t.exports=C},{"./ParseError":10,"./Style":13,"./buildCommon":14,"./delimiter":18,"./domTree":19,"./stretchy":28,"./utils":31,"babel-runtime/core-js/json/stringify":2}],16:[function(e,t,r){"use strict";var a=e("./buildCommon");var i=e("./fontMetrics");var n=e("./mathMLTree");var o=e("./ParseError");var s=e("./symbols");var l=e("./utils");var u=e("./stretchy");var h=a.makeSpan;var p=a.fontMap;var c=function e(t,r){if(s[r][t]&&s[r][t].replace){t=s[r][t].replace}return new n.TextNode(t)};var v=function e(t,r){var a=r.font;if(!a){return null}var n=t.mode;if(a==="mathit"){return"italic"}var o=t.value;if(l.contains(["\\imath","\\jmath"],o)){return null}if(s[n][o]&&s[n][o].replace){o=s[n][o].replace}var u=p[a].fontName;if(i.getCharacterMetrics(o,u)){return p[r.font].variant}return null};var f={};var m={mi:"italic",mn:"normal",mtext:"normal"};f.mathord=function(e,t){var r=new n.MathNode("mi",[c(e.value,e.mode)]);var a=v(e,t)||"italic";if(a!==m[r.type]){r.setAttribute("mathvariant",a)}return r};f.textord=function(e,t){var r=c(e.value,e.mode);var a=v(e,t)||"normal";var i=void 0;if(e.mode==="text"){i=new n.MathNode("mtext",[r])}else if(/[0-9]/.test(e.value)){i=new n.MathNode("mn",[r])}else{i=new n.MathNode("mi",[r])}if(a!==m[i.type]){i.setAttribute("mathvariant",a)}return i};f.bin=function(e){var t=new n.MathNode("mo",[c(e.value,e.mode)]);return t};f.rel=function(e){var t=new n.MathNode("mo",[c(e.value,e.mode)]);return t};f.open=function(e){var t=new n.MathNode("mo",[c(e.value,e.mode)]);return t};f.close=function(e){var t=new n.MathNode("mo",[c(e.value,e.mode)]);return t};f.inner=function(e){var t=new n.MathNode("mo",[c(e.value,e.mode)]);return t};f.punct=function(e){var t=new n.MathNode("mo",[c(e.value,e.mode)]);t.setAttribute("separator","true");return t};f.ordgroup=function(e,t){var r=d(e.value,t);var a=new n.MathNode("mrow",r);return a};f.text=function(e,t){var r=e.value.body;var a=[];var i=null;for(var o=0;o<r.length;o++){var s=g(r[o],t);if(s.type==="mtext"&&i!=null){Array.prototype.push.apply(i.children,s.children)}else{a.push(s);if(s.type==="mtext"){i=s}}}if(a.length===1){return a[0]}else{return new n.MathNode("mrow",a)}};f.color=function(e,t){var r=d(e.value.value,t);var a=new n.MathNode("mstyle",r);a.setAttribute("mathcolor",e.value.color);return a};f.xmlClass=function(e,t){var r=d(e.value.value,t);var a=new n.MathNode("mstyle",r);a.setAttribute("class",e.value.cl);return a};f.supsub=function(e,t){var r=false;var a=void 0;var i=void 0;if(e.value.base){if(e.value.base.value.type==="horizBrace"){i=e.value.sup?true:false;if(i===e.value.base.value.isOver){r=true;a=e.value.base.value.isOver}}}var o=[g(e.value.base,t)];if(e.value.sub){o.push(g(e.value.sub,t))}if(e.value.sup){o.push(g(e.value.sup,t))}var s=void 0;if(r){s=a?"mover":"munder"}else if(!e.value.sub){s="msup"}else if(!e.value.sup){s="msub"}else{s="msubsup"}var l=new n.MathNode(s,o);return l};f.genfrac=function(e,t){var r=new n.MathNode("mfrac",[g(e.value.numer,t),g(e.value.denom,t)]);if(!e.value.hasBarLine){r.setAttribute("linethickness","0px")}if(e.value.leftDelim!=null||e.value.rightDelim!=null){var a=[];if(e.value.leftDelim!=null){var i=new n.MathNode("mo",[new n.TextNode(e.value.leftDelim)]);i.setAttribute("fence","true");a.push(i)}a.push(r);if(e.value.rightDelim!=null){var o=new n.MathNode("mo",[new n.TextNode(e.value.rightDelim)]);o.setAttribute("fence","true");a.push(o)}var s=new n.MathNode("mrow",a);return s}return r};f.array=function(e,t){return new n.MathNode("mtable",e.value.body.map(function(e){return new n.MathNode("mtr",e.map(function(e){return new n.MathNode("mtd",[g(e,t)])}))}))};f.sqrt=function(e,t){var r=void 0;if(e.value.index){r=new n.MathNode("mroot",[g(e.value.body,t),g(e.value.index,t)])}else{r=new n.MathNode("msqrt",[g(e.value.body,t)])}return r};f.leftright=function(e,t){var r=d(e.value.body,t);if(e.value.left!=="."){var a=new n.MathNode("mo",[c(e.value.left,e.mode)]);a.setAttribute("fence","true");r.unshift(a)}if(e.value.right!=="."){var i=new n.MathNode("mo",[c(e.value.right,e.mode)]);i.setAttribute("fence","true");r.push(i)}var o=new n.MathNode("mrow",r);return o};f.middle=function(e,t){var r=new n.MathNode("mo",[c(e.value.middle,e.mode)]);r.setAttribute("fence","true");return r};f.accent=function(e,t){var r=void 0;if(e.value.isStretchy){r=u.mathMLnode(e.value.label)}else{r=new n.MathNode("mo",[c(e.value.label,e.mode)])}var a=new n.MathNode("mover",[g(e.value.base,t),r]);a.setAttribute("accent","true");return a};f.spacing=function(e){var t=void 0;if(e.value==="\\ "||e.value==="\\space"||e.value===" "||e.value==="~"){t=new n.MathNode("mtext",[new n.TextNode("\xa0")])}else{t=new n.MathNode("mspace");t.setAttribute("width",a.spacingFunctions[e.value].size)}return t};f.op=function(e,t){var r=void 0;if(e.value.symbol){r=new n.MathNode("mo",[c(e.value.body,e.mode)])}else if(e.value.value){r=new n.MathNode("mo",d(e.value.value,t))}else{r=new n.MathNode("mi",[new n.TextNode(e.value.body.slice(1))])}return r};f.cursor=function(e){var t=new n.MathNode("mtext",[new n.TextNode("|")]);return t};f.mod=function(e,t){var r=[];if(e.value.modType==="pod"||e.value.modType==="pmod"){r.push(new n.MathNode("mo",[c("(",e.mode)]))}if(e.value.modType!=="pod"){r.push(new n.MathNode("mo",[c("mod",e.mode)]))}if(e.value.value){var a=new n.MathNode("mspace");a.setAttribute("width","0.333333em");r.push(a);r=r.concat(d(e.value.value,t))}if(e.value.modType==="pod"||e.value.modType==="pmod"){r.push(new n.MathNode("mo",[c(")",e.mode)]))}return new n.MathNode("mo",r)};f.katex=function(e){var t=new n.MathNode("mtext",[new n.TextNode("KaTeX")]);return t};f.font=function(e,t){var r=e.value.font;return g(e.value.body,t.withFont(r))};f.delimsizing=function(e){var t=[];if(e.value.value!=="."){t.push(c(e.value.value,e.mode))}var r=new n.MathNode("mo",t);if(e.value.mclass==="mopen"||e.value.mclass==="mclose"){r.setAttribute("fence","true")}else{r.setAttribute("fence","false")}return r};f.styling=function(e,t){var r=d(e.value.value,t);var a=new n.MathNode("mstyle",r);var i={display:["0","true"],text:["0","false"],script:["1","false"],scriptscript:["2","false"]};var o=i[e.value.style];a.setAttribute("scriptlevel",o[0]);a.setAttribute("displaystyle",o[1]);return a};f.sizing=function(e,t){var r=t.havingSize(e.value.size);var a=d(e.value.value,r);var i=new n.MathNode("mstyle",a);i.setAttribute("mathsize",r.sizeMultiplier+"em");return i};f.overline=function(e,t){var r=new n.MathNode("mo",[new n.TextNode("\u203e")]);r.setAttribute("stretchy","true");var a=new n.MathNode("mover",[g(e.value.body,t),r]);a.setAttribute("accent","true");return a};f.underline=function(e,t){var r=new n.MathNode("mo",[new n.TextNode("\u203e")]);r.setAttribute("stretchy","true");var a=new n.MathNode("munder",[g(e.value.body,t),r]);a.setAttribute("accentunder","true");return a};f.accentUnder=function(e,t){var r=u.mathMLnode(e.value.label);var a=new n.MathNode("munder",[g(e.value.body,t),r]);a.setAttribute("accentunder","true");return a};f.enclose=function(e,t){var r=new n.MathNode("menclose",[g(e.value.body,t)]);var a="";switch(e.value.label){case"\\bcancel":a="downdiagonalstrike";break;case"\\sout":a="horizontalstrike";break;case"\\fbox":a="box";break;default:a="updiagonalstrike"}r.setAttribute("notation",a);return r};f.horizBrace=function(e,t){var r=u.mathMLnode(e.value.label);return new n.MathNode(e.value.isOver?"mover":"munder",[g(e.value.base,t),r])};f.xArrow=function(e,t){var r=u.mathMLnode(e.value.label);var a=void 0;var i=void 0;if(e.value.body){var o=g(e.value.body,t);if(e.value.below){i=g(e.value.below,t);a=new n.MathNode("munderover",[r,i,o])}else{a=new n.MathNode("mover",[r,o])}}else if(e.value.below){i=g(e.value.below,t);a=new n.MathNode("munder",[r,i])}else{a=new n.MathNode("mover",[r])}return a};f.rule=function(e){var t=new n.MathNode("mrow");return t};f.kern=function(e){var t=new n.MathNode("mrow");return t};f.llap=function(e,t){var r=new n.MathNode("mpadded",[g(e.value.body,t)]);r.setAttribute("lspace","-1width");r.setAttribute("width","0px");return r};f.rlap=function(e,t){var r=new n.MathNode("mpadded",[g(e.value.body,t)]);r.setAttribute("width","0px");return r};f.phantom=function(e,t){var r=d(e.value.value,t);return new n.MathNode("mphantom",r)};f.mclass=function(e,t){var r=d(e.value.value,t);return new n.MathNode("mstyle",r)};var d=function e(t,r){var a=[];for(var i=0;i<t.length;i++){var n=t[i];a.push(g(n,r))}return a};var g=function e(t,r){if(!t){return new n.MathNode("mrow")}if(f[t.type]){return f[t.type](t,r)}else{throw new o("Got group of unknown type: '"+t.type+"'")}};var y=function e(t,r,a){var i=d(t,a);var o=new n.MathNode("mrow",i);var s=new n.MathNode("annotation",[new n.TextNode(r)]);s.setAttribute("encoding","application/x-tex");var l=new n.MathNode("semantics",[o,s]);var u=new n.MathNode("math",[l]);return h(["katex-mathml"],[u])};t.exports=y},{"./ParseError":10,"./buildCommon":14,"./fontMetrics":21,"./mathMLTree":25,"./stretchy":28,"./symbols":29,"./utils":31}],17:[function(e,t,r){"use strict";var a=e("./buildHTML");var i=e("./buildMathML");var n=e("./buildCommon");var o=e("./Options");var s=e("./Settings");var l=e("./Style");var u=n.makeSpan;var h=function e(t,r,n){n=n||new s({});var h=l.TEXT;if(n.displayMode){h=l.DISPLAY}var p=new o({style:h});var c=i(t,r,p);var v=a(t,p);var f=u(["katex"],[c,v]);if(n.displayMode){return u(["katex-display"],[f])}else{return f}};t.exports=h},{"./Options":9,"./Settings":12,"./Style":13,"./buildCommon":14,"./buildHTML":15,"./buildMathML":16}],18:[function(e,t,r){"use strict";var a=e("./ParseError");var i=e("./Style");var n=e("./buildCommon");var o=e("./fontMetrics");var s=e("./symbols");var l=e("./utils");var u=n.makeSpan;var h=function e(t,r){if(s.math[t]&&s.math[t].replace){return o.getCharacterMetrics(s.math[t].replace,r)}else{return o.getCharacterMetrics(t,r)}};var p=function e(t,r,a,i){var n=a.havingBaseStyle(r);var o=u((i||[]).concat(n.sizingClasses(a)),[t],a);o.height*=n.sizeMultiplier/a.sizeMultiplier;o.depth*=n.sizeMultiplier/a.sizeMultiplier;o.maxFontSize=n.sizeMultiplier;return o};var c=function e(t,r,a){var i=r.havingBaseStyle(a);var n=(1-r.sizeMultiplier/i.sizeMultiplier)*r.fontMetrics().axisHeight;t.classes.push("delimcenter");t.style.top=n+"em";t.height-=n;t.depth+=n};var v=function e(t,r,a,i,o,s){var l=n.makeSymbol(t,"Main-Regular",o,i);var u=p(l,r,i,s);if(a){c(u,i,r)}return u};var f=function e(t,r,a,i){return n.makeSymbol(t,"Size"+r+"-Regular",a,i)};var m=function e(t,r,a,n,o,s){var l=f(t,r,o,n);var h=p(u(["delimsizing","size"+r],[l],n),i.TEXT,n,s);if(a){c(h,n,i.TEXT)}return h};var d=function e(t,r,a){var i=void 0;if(r==="Size1-Regular"){i="delim-size1"}else if(r==="Size4-Regular"){i="delim-size4"}var o=u(["delimsizinginner",i],[u([],[n.makeSymbol(t,r,a)])]);return{type:"elem",elem:o}};var g=function e(t,r,a,o,s,l){var c=void 0;var v=void 0;var f=void 0;var m=void 0;c=f=m=t;v=null;var g="Size1-Regular";if(t==="\\uparrow"){f=m="\u23d0"}else if(t==="\\Uparrow"){f=m="\u2016"}else if(t==="\\downarrow"){c=f="\u23d0"}else if(t==="\\Downarrow"){c=f="\u2016"}else if(t==="\\updownarrow"){c="\\uparrow";f="\u23d0";m="\\downarrow"}else if(t==="\\Updownarrow"){c="\\Uparrow";f="\u2016";m="\\Downarrow"}else if(t==="["||t==="\\lbrack"){c="\u23a1";f="\u23a2";m="\u23a3";g="Size4-Regular"}else if(t==="]"||t==="\\rbrack"){c="\u23a4";f="\u23a5";m="\u23a6";g="Size4-Regular"}else if(t==="\\lfloor"){f=c="\u23a2";m="\u23a3";g="Size4-Regular"}else if(t==="\\lceil"){c="\u23a1";f=m="\u23a2";g="Size4-Regular"}else if(t==="\\rfloor"){f=c="\u23a5";m="\u23a6";g="Size4-Regular"}else if(t==="\\rceil"){c="\u23a4";f=m="\u23a5";g="Size4-Regular"}else if(t==="("){c="\u239b";f="\u239c";m="\u239d";g="Size4-Regular"}else if(t===")"){c="\u239e";f="\u239f";m="\u23a0";g="Size4-Regular"}else if(t==="\\{"||t==="\\lbrace"){c="\u23a7";v="\u23a8";m="\u23a9";f="\u23aa";g="Size4-Regular"}else if(t==="\\}"||t==="\\rbrace"){c="\u23ab";v="\u23ac";m="\u23ad";f="\u23aa";g="Size4-Regular"}else if(t==="\\lgroup"){c="\u23a7";m="\u23a9";f="\u23aa";g="Size4-Regular"}else if(t==="\\rgroup"){c="\u23ab";m="\u23ad";f="\u23aa";g="Size4-Regular"}else if(t==="\\lmoustache"){c="\u23a7";m="\u23ad";f="\u23aa";g="Size4-Regular"}else if(t==="\\rmoustache"){c="\u23ab";m="\u23a9";f="\u23aa";g="Size4-Regular"}else if(t==="\\surd"){c="\ue001";m="\u23b7";f="\ue000";g="Size4-Regular"}var y=h(c,g);var x=y.height+y.depth;var b=h(f,g);var w=b.height+b.depth;var k=h(m,g);var z=k.height+k.depth;var M=0;var S=1;if(v!==null){var A=h(v,g);M=A.height+A.depth;S=2}var N=x+z+M;var T=Math.ceil((r-N)/(S*w));var q=N+T*S*w;var C=o.fontMetrics().axisHeight;if(a){C*=o.sizeMultiplier}var E=q/2-C;var O=[];O.push(d(m,g,s));if(v===null){for(var R=0;R<T;R++){O.push(d(f,g,s))}}else{for(var L=0;L<T;L++){O.push(d(f,g,s))}O.push(d(v,g,s));for(var D=0;D<T;D++){O.push(d(f,g,s))}}O.push(d(c,g,s));var P=o.havingBaseStyle(i.TEXT);var B=n.makeVList(O,"bottom",E,P);return p(u(["delimsizing","mult"],[B],P),i.TEXT,o,l)};var y=["(",")","[","\\lbrack","]","\\rbrack","\\{","\\lbrace","\\}","\\rbrace","\\lfloor","\\rfloor","\\lceil","\\rceil","\\surd"];var x=["\\uparrow","\\downarrow","\\updownarrow","\\Uparrow","\\Downarrow","\\Updownarrow","|","\\|","\\vert","\\Vert","\\lvert","\\rvert","\\lVert","\\rVert","\\lgroup","\\rgroup","\\lmoustache","\\rmoustache"];var b=["<",">","\\langle","\\rangle","/","\\backslash","\\lt","\\gt"];var w=[0,1.2,1.8,2.4,3];var k=function e(t,r,i,n,o){if(t==="<"||t==="\\lt"){t="\\langle"}else if(t===">"||t==="\\gt"){t="\\rangle"}if(l.contains(y,t)||l.contains(b,t)){return m(t,r,false,i,n,o)}else if(l.contains(x,t)){return g(t,w[r],false,i,n,o)}else{throw new a("Illegal delimiter: '"+t+"'")}};var z=[{type:"small",style:i.SCRIPTSCRIPT},{type:"small",style:i.SCRIPT},{type:"small",style:i.TEXT},{type:"large",size:1},{type:"large",size:2},{type:"large",size:3},{type:"large",size:4}];var M=[{type:"small",style:i.SCRIPTSCRIPT},{type:"small",style:i.SCRIPT},{type:"small",style:i.TEXT},{type:"stack"}];var S=[{type:"small",style:i.SCRIPTSCRIPT},{type:"small",style:i.SCRIPT},{type:"small",style:i.TEXT},{type:"large",size:1},{type:"large",size:2},{type:"large",size:3},{type:"large",size:4},{type:"stack"}];var A=function e(t){if(t.type==="small"){return"Main-Regular"}else if(t.type==="large"){return"Size"+t.size+"-Regular"}else if(t.type==="stack"){return"Size4-Regular"}};var N=function e(t,r,a,i){var n=Math.min(2,3-i.style.size);for(var o=n;o<a.length;o++){if(a[o].type==="stack"){break}var s=h(t,A(a[o]));var l=s.height+s.depth;if(a[o].type==="small"){var u=i.havingBaseStyle(a[o].style);l*=u.sizeMultiplier}if(l>r){return a[o]}}return a[a.length-1]};var T=function e(t,r,a,i,n,o){if(t==="<"||t==="\\lt"){t="\\langle"}else if(t===">"||t==="\\gt"){t="\\rangle"}var s=void 0;if(l.contains(b,t)){s=z}else if(l.contains(y,t)){s=S}else{s=M}var u=N(t,r,s,i);if(u.type==="small"){return v(t,u.style,a,i,n,o)}else if(u.type==="large"){return m(t,u.size,a,i,n,o)}else if(u.type==="stack"){return g(t,r,a,i,n,o)}};var q=function e(t,r,a,i,n,o){var s=i.fontMetrics().axisHeight*i.sizeMultiplier;var l=901;var u=5/i.fontMetrics().ptPerEm;var h=Math.max(r-s,a+s);var p=Math.max(h/500*l,2*h-u);return T(t,p,true,i,n,o)};t.exports={sizedDelim:k,customSizedDelim:T,leftRightDelim:q}},{"./ParseError":10,"./Style":13,"./buildCommon":14,"./fontMetrics":21,"./symbols":29,"./utils":31}],19:[function(e,t,r){"use strict";var a=e("./unicodeRegexes");var i=e("./utils");var n=function e(t){t=t.slice();for(var r=t.length-1;r>=0;r--){if(!t[r]){t.splice(r,1)}}return t.join(" ")};function o(e,t,r){this.classes=e||[];this.children=t||[];this.height=0;this.depth=0;this.maxFontSize=0;this.style={};this.attributes={};if(r){if(r.style.isTight()){this.classes.push("mtight")}if(r.getColor()){this.style.color=r.getColor()}}}o.prototype.setAttribute=function(e,t){this.attributes[e]=t};o.prototype.tryCombine=function(e){return false};o.prototype.toNode=function(){var e=document.createElement("span");e.className=n(this.classes);for(var t in this.style){if(Object.prototype.hasOwnProperty.call(this.style,t)){e.style[t]=this.style[t]}}for(var r in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,r)){e.setAttribute(r,this.attributes[r])}}for(var a=0;a<this.children.length;a++){e.appendChild(this.children[a].toNode())}return e};o.prototype.toMarkup=function(){var e="<span";if(this.classes.length){e+=' class="';e+=i.escape(n(this.classes));e+='"'}var t="";for(var r in this.style){if(this.style.hasOwnProperty(r)){t+=i.hyphenate(r)+":"+this.style[r]+";"}}if(t){e+=' style="'+i.escape(t)+'"'}for(var a in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,a)){e+=" "+a+'="';e+=i.escape(this.attributes[a]);e+='"'}}e+=">";for(var o=0;o<this.children.length;o++){e+=this.children[o].toMarkup();
}e+="</span>";return e};function s(e,t){this.children=e||[];this.height=0;this.depth=0;this.maxFontSize=0;if(t){for(var r=0;r<this.children.length;r++){for(var a=0;a<t.length;a++){this.children[r].classes.push(t[a])}}}this.classes=t||[]}s.prototype.toNode=function(){var e=document.createDocumentFragment();for(var t=0;t<this.children.length;t++){e.appendChild(this.children[t].toNode())}return e};s.prototype.toMarkup=function(){var e="";for(var t=0;t<this.children.length;t++){e+=this.children[t].toMarkup()}return e};var l={"\xee":"\u0131\u0302","\xef":"\u0131\u0308","\xed":"\u0131\u0301","\xec":"\u0131\u0300"};function u(e,t,r,i,n,o,s){this.value=e||"";this.height=t||0;this.depth=r||0;this.italic=i||0;this.skew=n||0;this.classes=o||[];this.style=s||{};this.maxFontSize=0;if(a.cjkRegex.test(e)){if(a.hangulRegex.test(e)){this.classes.push("hangul_fallback")}else{this.classes.push("cjk_fallback")}}if(/[\xee\xef\xed\xec]/.test(this.value)){this.value=l[this.value]}}u.prototype.tryCombine=function(e){if(!e||!(e instanceof u)||this.italic>0||n(this.classes)!==n(e.classes)||this.skew!==e.skew||this.maxFontSize!==e.maxFontSize){return false}for(var t in this.style){if(this.style.hasOwnProperty(t)&&this.style[t]!==e.style[t]){return false}}for(var r in e.style){if(e.style.hasOwnProperty(r)&&this.style[r]!==e.style[r]){return false}}this.value+=e.value;this.height=Math.max(this.height,e.height);this.depth=Math.max(this.depth,e.depth);this.italic=e.italic;return true};u.prototype.toNode=function(){var e=document.createTextNode(this.value);var t=null;if(this.italic>0){t=document.createElement("span");t.style.marginRight=this.italic+"em"}if(this.classes.length>0){t=t||document.createElement("span");t.className=n(this.classes)}for(var r in this.style){if(this.style.hasOwnProperty(r)){t=t||document.createElement("span");t.style[r]=this.style[r]}}if(t){t.appendChild(e);return t}else{return e}};u.prototype.toMarkup=function(){var e=false;var t="<span";if(this.classes.length){e=true;t+=' class="';t+=i.escape(n(this.classes));t+='"'}var r="";if(this.italic>0){r+="margin-right:"+this.italic+"em;"}for(var a in this.style){if(this.style.hasOwnProperty(a)){r+=i.hyphenate(a)+":"+this.style[a]+";"}}if(r){e=true;t+=' style="'+i.escape(r)+'"'}var o=i.escape(this.value);if(e){t+=">";t+=o;t+="</span>";return t}else{return o}};t.exports={span:o,documentFragment:s,symbolNode:u}},{"./unicodeRegexes":30,"./utils":31}],20:[function(e,t,r){"use strict";var a=e("./parseData");var i=e("./ParseError");var n=a.ParseNode;function o(e,t,r){var a=[];var o=[a];var s=[];while(true){var l=e.parseExpression(false,null);l=new n("ordgroup",l,e.mode);if(r){l=new n("styling",{style:r,value:[l]},e.mode)}a.push(l);var u=e.nextToken.text;if(u==="&"){e.consume()}else if(u==="\\end"){break}else if(u==="\\\\"||u==="\\cr"){var h=e.parseFunction();s.push(h.value.size);a=[];o.push(a)}else{throw new i("Expected & or \\\\ or \\end",e.nextToken)}}t.body=o;t.rowGaps=s;return new n(t.type,t,e.mode)}function s(e,r,a){if(typeof e==="string"){e=[e]}if(typeof r==="number"){r={numArgs:r}}var i={numArgs:r.numArgs||0,argTypes:r.argTypes,greediness:1,allowedInText:!!r.allowedInText,numOptionalArgs:r.numOptionalArgs||0,handler:a};for(var n=0;n<e.length;++n){t.exports[e[n]]=i}}function l(e){if(e.substr(0,1)==="d"){return"display"}else{return"text"}}s(["array","darray"],{numArgs:1},function(e,t){var r=t[0];r=r.value.map?r.value:[r];var a=r.map(function(e){var t=e.value;if("lcr".indexOf(t)!==-1){return{type:"align",align:t}}else if(t==="|"){return{type:"separator",separator:"|"}}throw new i("Unknown column alignment: "+e.value,e)});var n={type:"array",cols:a,hskipBeforeAndAfter:true};n=o(e.parser,n,l(e.envName));return n});s(["matrix","pmatrix","bmatrix","Bmatrix","vmatrix","Vmatrix"],{},function(e){var t={matrix:null,pmatrix:["(",")"],bmatrix:["[","]"],Bmatrix:["\\{","\\}"],vmatrix:["|","|"],Vmatrix:["\\Vert","\\Vert"]}[e.envName];var r={type:"array",hskipBeforeAndAfter:false};r=o(e.parser,r,l(e.envName));if(t){r=new n("leftright",{body:[r],left:t[0],right:t[1]},e.mode)}return r});s(["cases","dcases"],{},function(e){var t={type:"array",arraystretch:1.2,cols:[{type:"align",align:"l",pregap:0,postgap:1},{type:"align",align:"l",pregap:0,postgap:0}]};t=o(e.parser,t,l(e.envName));t=new n("leftright",{body:[t],left:"\\{",right:"."},e.mode);return t});s("aligned",{},function(e){var t={type:"array",cols:[],addJot:true};t=o(e.parser,t,"display");var r=new n("ordgroup",[],e.mode);var a=0;t.value.body.forEach(function(e){for(var t=1;t<e.length;t+=2){var i=e[t].value.value[0];i.value.unshift(r)}if(a<e.length){a=e.length}});for(var i=0;i<a;++i){var s="r";var l=0;if(i%2===1){s="l"}else if(i>0){l=2}t.value.cols[i]={type:"align",align:s,pregap:l,postgap:0}}return t});s("gathered",{},function(e){var t={type:"array",cols:[{type:"align",align:"c"}],addJot:true};t=o(e.parser,t,"display");return t})},{"./ParseError":10,"./parseData":26}],21:[function(e,t,r){"use strict";var a=e("./unicodeRegexes").cjkRegex;var i={slant:[.25,.25,.25],space:[0,0,0],stretch:[0,0,0],shrink:[0,0,0],xHeight:[.431,.431,.431],quad:[1,1.171,1.472],extraSpace:[0,0,0],num1:[.677,.732,.925],num2:[.394,.384,.387],num3:[.444,.471,.504],denom1:[.686,.752,1.025],denom2:[.345,.344,.532],sup1:[.413,.503,.504],sup2:[.363,.431,.404],sup3:[.289,.286,.294],sub1:[.15,.143,.2],sub2:[.247,.286,.4],supDrop:[.386,.353,.494],subDrop:[.05,.071,.1],delim1:[2.39,1.7,1.98],delim2:[1.01,1.157,1.42],axisHeight:[.25,.25,.25],defaultRuleThickness:[.04,.04,.04],bigOpSpacing1:[.111,.111,.111],bigOpSpacing2:[.166,.166,.166],bigOpSpacing3:[.2,.2,.2],bigOpSpacing4:[.6,.6,.6],bigOpSpacing5:[.1,.1,.1],ptPerEm:[10,10,10],doubleRuleSep:[.2,.2,.2]};var n=e("./fontMetricsData");var o={"\xc0":"A","\xc1":"A","\xc2":"A","\xc3":"A","\xc4":"A","\xc5":"A","\xc6":"A","\xc7":"C","\xc8":"E","\xc9":"E","\xca":"E","\xcb":"E","\xcc":"I","\xcd":"I","\xce":"I","\xcf":"I","\xd0":"D","\xd1":"N","\xd2":"O","\xd3":"O","\xd4":"O","\xd5":"O","\xd6":"O","\xd8":"O","\xd9":"U","\xda":"U","\xdb":"U","\xdc":"U","\xdd":"Y","\xde":"o","\xdf":"B","\xe0":"a","\xe1":"a","\xe2":"a","\xe3":"a","\xe4":"a","\xe5":"a","\xe6":"a","\xe7":"c","\xe8":"e","\xe9":"e","\xea":"e","\xeb":"e","\xec":"i","\xed":"i","\xee":"i","\xef":"i","\xf0":"d","\xf1":"n","\xf2":"o","\xf3":"o","\xf4":"o","\xf5":"o","\xf6":"o","\xf8":"o","\xf9":"u","\xfa":"u","\xfb":"u","\xfc":"u","\xfd":"y","\xfe":"o","\xff":"y","\u0410":"A","\u0411":"B","\u0412":"B","\u0413":"F","\u0414":"A","\u0415":"E","\u0416":"K","\u0417":"3","\u0418":"N","\u0419":"N","\u041a":"K","\u041b":"N","\u041c":"M","\u041d":"H","\u041e":"O","\u041f":"N","\u0420":"P","\u0421":"C","\u0422":"T","\u0423":"y","\u0424":"O","\u0425":"X","\u0426":"U","\u0427":"h","\u0428":"W","\u0429":"W","\u042a":"B","\u042b":"X","\u042c":"B","\u042d":"3","\u042e":"X","\u042f":"R","\u0430":"a","\u0431":"b","\u0432":"a","\u0433":"r","\u0434":"y","\u0435":"e","\u0436":"m","\u0437":"e","\u0438":"n","\u0439":"n","\u043a":"n","\u043b":"n","\u043c":"m","\u043d":"n","\u043e":"o","\u043f":"n","\u0440":"p","\u0441":"c","\u0442":"o","\u0443":"y","\u0444":"b","\u0445":"x","\u0446":"n","\u0447":"n","\u0448":"w","\u0449":"w","\u044a":"a","\u044b":"m","\u044c":"a","\u044d":"e","\u044e":"m","\u044f":"r"};var s=function e(t,r){var i=t.charCodeAt(0);if(t[0]in o){i=o[t[0]].charCodeAt(0)}else if(a.test(t[0])){i="M".charCodeAt(0)}var s=n[r][i];if(s){return{depth:s[0],height:s[1],italic:s[2],skew:s[3],width:s[4]}}};var l={};var u=function e(t){var r=void 0;if(t>=5){r=0}else if(t>=3){r=1}else{r=2}if(!l[r]){var a=l[r]={};for(var n in i){if(i.hasOwnProperty(n)){a[n]=i[n][r]}}a.emPerEx=a.xHeight/a.quad}return l[r]};t.exports={getFontMetrics:u,getCharacterMetrics:s}},{"./fontMetricsData":22,"./unicodeRegexes":30}],22:[function(e,t,r){"use strict";t.exports={"AMS-Regular":{65:[0,.68889,0,0],66:[0,.68889,0,0],67:[0,.68889,0,0],68:[0,.68889,0,0],69:[0,.68889,0,0],70:[0,.68889,0,0],71:[0,.68889,0,0],72:[0,.68889,0,0],73:[0,.68889,0,0],74:[.16667,.68889,0,0],75:[0,.68889,0,0],76:[0,.68889,0,0],77:[0,.68889,0,0],78:[0,.68889,0,0],79:[.16667,.68889,0,0],80:[0,.68889,0,0],81:[.16667,.68889,0,0],82:[0,.68889,0,0],83:[0,.68889,0,0],84:[0,.68889,0,0],85:[0,.68889,0,0],86:[0,.68889,0,0],87:[0,.68889,0,0],88:[0,.68889,0,0],89:[0,.68889,0,0],90:[0,.68889,0,0],107:[0,.68889,0,0],165:[0,.675,.025,0],174:[.15559,.69224,0,0],240:[0,.68889,0,0],295:[0,.68889,0,0],710:[0,.825,0,0],732:[0,.9,0,0],770:[0,.825,0,0],771:[0,.9,0,0],989:[.08167,.58167,0,0],1008:[0,.43056,.04028,0],8245:[0,.54986,0,0],8463:[0,.68889,0,0],8487:[0,.68889,0,0],8498:[0,.68889,0,0],8502:[0,.68889,0,0],8503:[0,.68889,0,0],8504:[0,.68889,0,0],8513:[0,.68889,0,0],8592:[-.03598,.46402,0,0],8594:[-.03598,.46402,0,0],8602:[-.13313,.36687,0,0],8603:[-.13313,.36687,0,0],8606:[.01354,.52239,0,0],8608:[.01354,.52239,0,0],8610:[.01354,.52239,0,0],8611:[.01354,.52239,0,0],8619:[0,.54986,0,0],8620:[0,.54986,0,0],8621:[-.13313,.37788,0,0],8622:[-.13313,.36687,0,0],8624:[0,.69224,0,0],8625:[0,.69224,0,0],8630:[0,.43056,0,0],8631:[0,.43056,0,0],8634:[.08198,.58198,0,0],8635:[.08198,.58198,0,0],8638:[.19444,.69224,0,0],8639:[.19444,.69224,0,0],8642:[.19444,.69224,0,0],8643:[.19444,.69224,0,0],8644:[.1808,.675,0,0],8646:[.1808,.675,0,0],8647:[.1808,.675,0,0],8648:[.19444,.69224,0,0],8649:[.1808,.675,0,0],8650:[.19444,.69224,0,0],8651:[.01354,.52239,0,0],8652:[.01354,.52239,0,0],8653:[-.13313,.36687,0,0],8654:[-.13313,.36687,0,0],8655:[-.13313,.36687,0,0],8666:[.13667,.63667,0,0],8667:[.13667,.63667,0,0],8669:[-.13313,.37788,0,0],8672:[-.064,.437,0,0],8674:[-.064,.437,0,0],8705:[0,.825,0,0],8708:[0,.68889,0,0],8709:[.08167,.58167,0,0],8717:[0,.43056,0,0],8722:[-.03598,.46402,0,0],8724:[.08198,.69224,0,0],8726:[.08167,.58167,0,0],8733:[0,.69224,0,0],8736:[0,.69224,0,0],8737:[0,.69224,0,0],8738:[.03517,.52239,0,0],8739:[.08167,.58167,0,0],8740:[.25142,.74111,0,0],8741:[.08167,.58167,0,0],8742:[.25142,.74111,0,0],8756:[0,.69224,0,0],8757:[0,.69224,0,0],8764:[-.13313,.36687,0,0],8765:[-.13313,.37788,0,0],8769:[-.13313,.36687,0,0],8770:[-.03625,.46375,0,0],8774:[.30274,.79383,0,0],8776:[-.01688,.48312,0,0],8778:[.08167,.58167,0,0],8782:[.06062,.54986,0,0],8783:[.06062,.54986,0,0],8785:[.08198,.58198,0,0],8786:[.08198,.58198,0,0],8787:[.08198,.58198,0,0],8790:[0,.69224,0,0],8791:[.22958,.72958,0,0],8796:[.08198,.91667,0,0],8806:[.25583,.75583,0,0],8807:[.25583,.75583,0,0],8808:[.25142,.75726,0,0],8809:[.25142,.75726,0,0],8812:[.25583,.75583,0,0],8814:[.20576,.70576,0,0],8815:[.20576,.70576,0,0],8816:[.30274,.79383,0,0],8817:[.30274,.79383,0,0],8818:[.22958,.72958,0,0],8819:[.22958,.72958,0,0],8822:[.1808,.675,0,0],8823:[.1808,.675,0,0],8828:[.13667,.63667,0,0],8829:[.13667,.63667,0,0],8830:[.22958,.72958,0,0],8831:[.22958,.72958,0,0],8832:[.20576,.70576,0,0],8833:[.20576,.70576,0,0],8840:[.30274,.79383,0,0],8841:[.30274,.79383,0,0],8842:[.13597,.63597,0,0],8843:[.13597,.63597,0,0],8847:[.03517,.54986,0,0],8848:[.03517,.54986,0,0],8858:[.08198,.58198,0,0],8859:[.08198,.58198,0,0],8861:[.08198,.58198,0,0],8862:[0,.675,0,0],8863:[0,.675,0,0],8864:[0,.675,0,0],8865:[0,.675,0,0],8872:[0,.69224,0,0],8873:[0,.69224,0,0],8874:[0,.69224,0,0],8876:[0,.68889,0,0],8877:[0,.68889,0,0],8878:[0,.68889,0,0],8879:[0,.68889,0,0],8882:[.03517,.54986,0,0],8883:[.03517,.54986,0,0],8884:[.13667,.63667,0,0],8885:[.13667,.63667,0,0],8888:[0,.54986,0,0],8890:[.19444,.43056,0,0],8891:[.19444,.69224,0,0],8892:[.19444,.69224,0,0],8901:[0,.54986,0,0],8903:[.08167,.58167,0,0],8905:[.08167,.58167,0,0],8906:[.08167,.58167,0,0],8907:[0,.69224,0,0],8908:[0,.69224,0,0],8909:[-.03598,.46402,0,0],8910:[0,.54986,0,0],8911:[0,.54986,0,0],8912:[.03517,.54986,0,0],8913:[.03517,.54986,0,0],8914:[0,.54986,0,0],8915:[0,.54986,0,0],8916:[0,.69224,0,0],8918:[.0391,.5391,0,0],8919:[.0391,.5391,0,0],8920:[.03517,.54986,0,0],8921:[.03517,.54986,0,0],8922:[.38569,.88569,0,0],8923:[.38569,.88569,0,0],8926:[.13667,.63667,0,0],8927:[.13667,.63667,0,0],8928:[.30274,.79383,0,0],8929:[.30274,.79383,0,0],8934:[.23222,.74111,0,0],8935:[.23222,.74111,0,0],8936:[.23222,.74111,0,0],8937:[.23222,.74111,0,0],8938:[.20576,.70576,0,0],8939:[.20576,.70576,0,0],8940:[.30274,.79383,0,0],8941:[.30274,.79383,0,0],8994:[.19444,.69224,0,0],8995:[.19444,.69224,0,0],9416:[.15559,.69224,0,0],9484:[0,.69224,0,0],9488:[0,.69224,0,0],9492:[0,.37788,0,0],9496:[0,.37788,0,0],9585:[.19444,.68889,0,0],9586:[.19444,.74111,0,0],9632:[0,.675,0,0],9633:[0,.675,0,0],9650:[0,.54986,0,0],9651:[0,.54986,0,0],9654:[.03517,.54986,0,0],9660:[0,.54986,0,0],9661:[0,.54986,0,0],9664:[.03517,.54986,0,0],9674:[.11111,.69224,0,0],9733:[.19444,.69224,0,0],10003:[0,.69224,0,0],10016:[0,.69224,0,0],10731:[.11111,.69224,0,0],10846:[.19444,.75583,0,0],10877:[.13667,.63667,0,0],10878:[.13667,.63667,0,0],10885:[.25583,.75583,0,0],10886:[.25583,.75583,0,0],10887:[.13597,.63597,0,0],10888:[.13597,.63597,0,0],10889:[.26167,.75726,0,0],10890:[.26167,.75726,0,0],10891:[.48256,.98256,0,0],10892:[.48256,.98256,0,0],10901:[.13667,.63667,0,0],10902:[.13667,.63667,0,0],10933:[.25142,.75726,0,0],10934:[.25142,.75726,0,0],10935:[.26167,.75726,0,0],10936:[.26167,.75726,0,0],10937:[.26167,.75726,0,0],10938:[.26167,.75726,0,0],10949:[.25583,.75583,0,0],10950:[.25583,.75583,0,0],10955:[.28481,.79383,0,0],10956:[.28481,.79383,0,0],57350:[.08167,.58167,0,0],57351:[.08167,.58167,0,0],57352:[.08167,.58167,0,0],57353:[0,.43056,.04028,0],57356:[.25142,.75726,0,0],57357:[.25142,.75726,0,0],57358:[.41951,.91951,0,0],57359:[.30274,.79383,0,0],57360:[.30274,.79383,0,0],57361:[.41951,.91951,0,0],57366:[.25142,.75726,0,0],57367:[.25142,.75726,0,0],57368:[.25142,.75726,0,0],57369:[.25142,.75726,0,0],57370:[.13597,.63597,0,0],57371:[.13597,.63597,0,0]},"Caligraphic-Regular":{48:[0,.43056,0,0],49:[0,.43056,0,0],50:[0,.43056,0,0],51:[.19444,.43056,0,0],52:[.19444,.43056,0,0],53:[.19444,.43056,0,0],54:[0,.64444,0,0],55:[.19444,.43056,0,0],56:[0,.64444,0,0],57:[.19444,.43056,0,0],65:[0,.68333,0,.19445],66:[0,.68333,.03041,.13889],67:[0,.68333,.05834,.13889],68:[0,.68333,.02778,.08334],69:[0,.68333,.08944,.11111],70:[0,.68333,.09931,.11111],71:[.09722,.68333,.0593,.11111],72:[0,.68333,.00965,.11111],73:[0,.68333,.07382,0],74:[.09722,.68333,.18472,.16667],75:[0,.68333,.01445,.05556],76:[0,.68333,0,.13889],77:[0,.68333,0,.13889],78:[0,.68333,.14736,.08334],79:[0,.68333,.02778,.11111],80:[0,.68333,.08222,.08334],81:[.09722,.68333,0,.11111],82:[0,.68333,0,.08334],83:[0,.68333,.075,.13889],84:[0,.68333,.25417,0],85:[0,.68333,.09931,.08334],86:[0,.68333,.08222,0],87:[0,.68333,.08222,.08334],88:[0,.68333,.14643,.13889],89:[.09722,.68333,.08222,.08334],90:[0,.68333,.07944,.13889]},"Fraktur-Regular":{33:[0,.69141,0,0],34:[0,.69141,0,0],38:[0,.69141,0,0],39:[0,.69141,0,0],40:[.24982,.74947,0,0],41:[.24982,.74947,0,0],42:[0,.62119,0,0],43:[.08319,.58283,0,0],44:[0,.10803,0,0],45:[.08319,.58283,0,0],46:[0,.10803,0,0],47:[.24982,.74947,0,0],48:[0,.47534,0,0],49:[0,.47534,0,0],50:[0,.47534,0,0],51:[.18906,.47534,0,0],52:[.18906,.47534,0,0],53:[.18906,.47534,0,0],54:[0,.69141,0,0],55:[.18906,.47534,0,0],56:[0,.69141,0,0],57:[.18906,.47534,0,0],58:[0,.47534,0,0],59:[.12604,.47534,0,0],61:[-.13099,.36866,0,0],63:[0,.69141,0,0],65:[0,.69141,0,0],66:[0,.69141,0,0],67:[0,.69141,0,0],68:[0,.69141,0,0],69:[0,.69141,0,0],70:[.12604,.69141,0,0],71:[0,.69141,0,0],72:[.06302,.69141,0,0],73:[0,.69141,0,0],74:[.12604,.69141,0,0],75:[0,.69141,0,0],76:[0,.69141,0,0],77:[0,.69141,0,0],78:[0,.69141,0,0],79:[0,.69141,0,0],80:[.18906,.69141,0,0],81:[.03781,.69141,0,0],82:[0,.69141,0,0],83:[0,.69141,0,0],84:[0,.69141,0,0],85:[0,.69141,0,0],86:[0,.69141,0,0],87:[0,.69141,0,0],88:[0,.69141,0,0],89:[.18906,.69141,0,0],90:[.12604,.69141,0,0],91:[.24982,.74947,0,0],93:[.24982,.74947,0,0],94:[0,.69141,0,0],97:[0,.47534,0,0],98:[0,.69141,0,0],99:[0,.47534,0,0],100:[0,.62119,0,0],101:[0,.47534,0,0],102:[.18906,.69141,0,0],103:[.18906,.47534,0,0],104:[.18906,.69141,0,0],105:[0,.69141,0,0],106:[0,.69141,0,0],107:[0,.69141,0,0],108:[0,.69141,0,0],109:[0,.47534,0,0],110:[0,.47534,0,0],111:[0,.47534,0,0],112:[.18906,.52396,0,0],113:[.18906,.47534,0,0],114:[0,.47534,0,0],115:[0,.47534,0,0],116:[0,.62119,0,0],117:[0,.47534,0,0],118:[0,.52396,0,0],119:[0,.52396,0,0],120:[.18906,.47534,0,0],121:[.18906,.47534,0,0],122:[.18906,.47534,0,0],8216:[0,.69141,0,0],8217:[0,.69141,0,0],58112:[0,.62119,0,0],58113:[0,.62119,0,0],58114:[.18906,.69141,0,0],58115:[.18906,.69141,0,0],58116:[.18906,.47534,0,0],58117:[0,.69141,0,0],58118:[0,.62119,0,0],58119:[0,.47534,0,0]},"Main-Bold":{33:[0,.69444,0,0],34:[0,.69444,0,0],35:[.19444,.69444,0,0],36:[.05556,.75,0,0],37:[.05556,.75,0,0],38:[0,.69444,0,0],39:[0,.69444,0,0],40:[.25,.75,0,0],41:[.25,.75,0,0],42:[0,.75,0,0],43:[.13333,.63333,0,0],44:[.19444,.15556,0,0],45:[0,.44444,0,0],46:[0,.15556,0,0],47:[.25,.75,0,0],48:[0,.64444,0,0],49:[0,.64444,0,0],50:[0,.64444,0,0],51:[0,.64444,0,0],52:[0,.64444,0,0],53:[0,.64444,0,0],54:[0,.64444,0,0],55:[0,.64444,0,0],56:[0,.64444,0,0],57:[0,.64444,0,0],58:[0,.44444,0,0],59:[.19444,.44444,0,0],60:[.08556,.58556,0,0],61:[-.10889,.39111,0,0],62:[.08556,.58556,0,0],63:[0,.69444,0,0],64:[0,.69444,0,0],65:[0,.68611,0,0],66:[0,.68611,0,0],67:[0,.68611,0,0],68:[0,.68611,0,0],69:[0,.68611,0,0],70:[0,.68611,0,0],71:[0,.68611,0,0],72:[0,.68611,0,0],73:[0,.68611,0,0],74:[0,.68611,0,0],75:[0,.68611,0,0],76:[0,.68611,0,0],77:[0,.68611,0,0],78:[0,.68611,0,0],79:[0,.68611,0,0],80:[0,.68611,0,0],81:[.19444,.68611,0,0],82:[0,.68611,0,0],83:[0,.68611,0,0],84:[0,.68611,0,0],85:[0,.68611,0,0],86:[0,.68611,.01597,0],87:[0,.68611,.01597,0],88:[0,.68611,0,0],89:[0,.68611,.02875,0],90:[0,.68611,0,0],91:[.25,.75,0,0],92:[.25,.75,0,0],93:[.25,.75,0,0],94:[0,.69444,0,0],95:[.31,.13444,.03194,0],96:[0,.69444,0,0],97:[0,.44444,0,0],98:[0,.69444,0,0],99:[0,.44444,0,0],100:[0,.69444,0,0],101:[0,.44444,0,0],102:[0,.69444,.10903,0],103:[.19444,.44444,.01597,0],104:[0,.69444,0,0],105:[0,.69444,0,0],106:[.19444,.69444,0,0],107:[0,.69444,0,0],108:[0,.69444,0,0],109:[0,.44444,0,0],110:[0,.44444,0,0],111:[0,.44444,0,0],112:[.19444,.44444,0,0],113:[.19444,.44444,0,0],114:[0,.44444,0,0],115:[0,.44444,0,0],116:[0,.63492,0,0],117:[0,.44444,0,0],118:[0,.44444,.01597,0],119:[0,.44444,.01597,0],120:[0,.44444,0,0],121:[.19444,.44444,.01597,0],122:[0,.44444,0,0],123:[.25,.75,0,0],124:[.25,.75,0,0],125:[.25,.75,0,0],126:[.35,.34444,0,0],168:[0,.69444,0,0],172:[0,.44444,0,0],175:[0,.59611,0,0],176:[0,.69444,0,0],177:[.13333,.63333,0,0],180:[0,.69444,0,0],215:[.13333,.63333,0,0],247:[.13333,.63333,0,0],305:[0,.44444,0,0],567:[.19444,.44444,0,0],710:[0,.69444,0,0],711:[0,.63194,0,0],713:[0,.59611,0,0],714:[0,.69444,0,0],715:[0,.69444,0,0],728:[0,.69444,0,0],729:[0,.69444,0,0],730:[0,.69444,0,0],732:[0,.69444,0,0],768:[0,.69444,0,0],769:[0,.69444,0,0],770:[0,.69444,0,0],771:[0,.69444,0,0],772:[0,.59611,0,0],774:[0,.69444,0,0],775:[0,.69444,0,0],776:[0,.69444,0,0],778:[0,.69444,0,0],779:[0,.69444,0,0],780:[0,.63194,0,0],824:[.19444,.69444,0,0],915:[0,.68611,0,0],916:[0,.68611,0,0],920:[0,.68611,0,0],923:[0,.68611,0,0],926:[0,.68611,0,0],928:[0,.68611,0,0],931:[0,.68611,0,0],933:[0,.68611,0,0],934:[0,.68611,0,0],936:[0,.68611,0,0],937:[0,.68611,0,0],8211:[0,.44444,.03194,0],8212:[0,.44444,.03194,0],8216:[0,.69444,0,0],8217:[0,.69444,0,0],8220:[0,.69444,0,0],8221:[0,.69444,0,0],8224:[.19444,.69444,0,0],8225:[.19444,.69444,0,0],8242:[0,.55556,0,0],8407:[0,.72444,.15486,0],8463:[0,.69444,0,0],8465:[0,.69444,0,0],8467:[0,.69444,0,0],8472:[.19444,.44444,0,0],8476:[0,.69444,0,0],8501:[0,.69444,0,0],8592:[-.10889,.39111,0,0],8593:[.19444,.69444,0,0],8594:[-.10889,.39111,0,0],8595:[.19444,.69444,0,0],8596:[-.10889,.39111,0,0],8597:[.25,.75,0,0],8598:[.19444,.69444,0,0],8599:[.19444,.69444,0,0],8600:[.19444,.69444,0,0],8601:[.19444,.69444,0,0],8636:[-.10889,.39111,0,0],8637:[-.10889,.39111,0,0],8640:[-.10889,.39111,0,0],8641:[-.10889,.39111,0,0],8656:[-.10889,.39111,0,0],8657:[.19444,.69444,0,0],8658:[-.10889,.39111,0,0],8659:[.19444,.69444,0,0],8660:[-.10889,.39111,0,0],8661:[.25,.75,0,0],8704:[0,.69444,0,0],8706:[0,.69444,.06389,0],8707:[0,.69444,0,0],8709:[.05556,.75,0,0],8711:[0,.68611,0,0],8712:[.08556,.58556,0,0],8715:[.08556,.58556,0,0],8722:[.13333,.63333,0,0],8723:[.13333,.63333,0,0],8725:[.25,.75,0,0],8726:[.25,.75,0,0],8727:[-.02778,.47222,0,0],8728:[-.02639,.47361,0,0],8729:[-.02639,.47361,0,0],8730:[.18,.82,0,0],8733:[0,.44444,0,0],8734:[0,.44444,0,0],8736:[0,.69224,0,0],8739:[.25,.75,0,0],8741:[.25,.75,0,0],8743:[0,.55556,0,0],8744:[0,.55556,0,0],8745:[0,.55556,0,0],8746:[0,.55556,0,0],8747:[.19444,.69444,.12778,0],8764:[-.10889,.39111,0,0],8768:[.19444,.69444,0,0],8771:[.00222,.50222,0,0],8776:[.02444,.52444,0,0],8781:[.00222,.50222,0,0],8801:[.00222,.50222,0,0],8804:[.19667,.69667,0,0],8805:[.19667,.69667,0,0],8810:[.08556,.58556,0,0],8811:[.08556,.58556,0,0],8826:[.08556,.58556,0,0],8827:[.08556,.58556,0,0],8834:[.08556,.58556,0,0],8835:[.08556,.58556,0,0],8838:[.19667,.69667,0,0],8839:[.19667,.69667,0,0],8846:[0,.55556,0,0],8849:[.19667,.69667,0,0],8850:[.19667,.69667,0,0],8851:[0,.55556,0,0],8852:[0,.55556,0,0],8853:[.13333,.63333,0,0],8854:[.13333,.63333,0,0],8855:[.13333,.63333,0,0],8856:[.13333,.63333,0,0],8857:[.13333,.63333,0,0],8866:[0,.69444,0,0],8867:[0,.69444,0,0],8868:[0,.69444,0,0],8869:[0,.69444,0,0],8900:[-.02639,.47361,0,0],8901:[-.02639,.47361,0,0],8902:[-.02778,.47222,0,0],8968:[.25,.75,0,0],8969:[.25,.75,0,0],8970:[.25,.75,0,0],8971:[.25,.75,0,0],8994:[-.13889,.36111,0,0],8995:[-.13889,.36111,0,0],9651:[.19444,.69444,0,0],9657:[-.02778,.47222,0,0],9661:[.19444,.69444,0,0],9667:[-.02778,.47222,0,0],9711:[.19444,.69444,0,0],9824:[.12963,.69444,0,0],9825:[.12963,.69444,0,0],9826:[.12963,.69444,0,0],9827:[.12963,.69444,0,0],9837:[0,.75,0,0],9838:[.19444,.69444,0,0],9839:[.19444,.69444,0,0],10216:[.25,.75,0,0],10217:[.25,.75,0,0],10815:[0,.68611,0,0],10927:[.19667,.69667,0,0],10928:[.19667,.69667,0,0]},"Main-Italic":{33:[0,.69444,.12417,0],34:[0,.69444,.06961,0],35:[.19444,.69444,.06616,0],37:[.05556,.75,.13639,0],38:[0,.69444,.09694,0],39:[0,.69444,.12417,0],40:[.25,.75,.16194,0],41:[.25,.75,.03694,0],42:[0,.75,.14917,0],43:[.05667,.56167,.03694,0],44:[.19444,.10556,0,0],45:[0,.43056,.02826,0],46:[0,.10556,0,0],47:[.25,.75,.16194,0],48:[0,.64444,.13556,0],49:[0,.64444,.13556,0],50:[0,.64444,.13556,0],51:[0,.64444,.13556,0],52:[.19444,.64444,.13556,0],53:[0,.64444,.13556,0],54:[0,.64444,.13556,0],55:[.19444,.64444,.13556,0],56:[0,.64444,.13556,0],57:[0,.64444,.13556,0],58:[0,.43056,.0582,0],59:[.19444,.43056,.0582,0],61:[-.13313,.36687,.06616,0],63:[0,.69444,.1225,0],64:[0,.69444,.09597,0],65:[0,.68333,0,0],66:[0,.68333,.10257,0],67:[0,.68333,.14528,0],68:[0,.68333,.09403,0],69:[0,.68333,.12028,0],70:[0,.68333,.13305,0],71:[0,.68333,.08722,0],72:[0,.68333,.16389,0],73:[0,.68333,.15806,0],74:[0,.68333,.14028,0],75:[0,.68333,.14528,0],76:[0,.68333,0,0],77:[0,.68333,.16389,0],78:[0,.68333,.16389,0],79:[0,.68333,.09403,0],80:[0,.68333,.10257,0],81:[.19444,.68333,.09403,0],82:[0,.68333,.03868,0],83:[0,.68333,.11972,0],84:[0,.68333,.13305,0],85:[0,.68333,.16389,0],86:[0,.68333,.18361,0],87:[0,.68333,.18361,0],88:[0,.68333,.15806,0],89:[0,.68333,.19383,0],90:[0,.68333,.14528,0],91:[.25,.75,.1875,0],93:[.25,.75,.10528,0],94:[0,.69444,.06646,0],95:[.31,.12056,.09208,0],97:[0,.43056,.07671,0],98:[0,.69444,.06312,0],99:[0,.43056,.05653,0],100:[0,.69444,.10333,0],101:[0,.43056,.07514,0],102:[.19444,.69444,.21194,0],103:[.19444,.43056,.08847,0],104:[0,.69444,.07671,0],105:[0,.65536,.1019,0],106:[.19444,.65536,.14467,0],107:[0,.69444,.10764,0],108:[0,.69444,.10333,0],109:[0,.43056,.07671,0],110:[0,.43056,.07671,0],111:[0,.43056,.06312,0],112:[.19444,.43056,.06312,0],113:[.19444,.43056,.08847,0],114:[0,.43056,.10764,0],115:[0,.43056,.08208,0],116:[0,.61508,.09486,0],117:[0,.43056,.07671,0],118:[0,.43056,.10764,0],119:[0,.43056,.10764,0],120:[0,.43056,.12042,0],121:[.19444,.43056,.08847,0],122:[0,.43056,.12292,0],126:[.35,.31786,.11585,0],163:[0,.69444,0,0],305:[0,.43056,0,.02778],567:[.19444,.43056,0,.08334],768:[0,.69444,0,0],769:[0,.69444,.09694,0],770:[0,.69444,.06646,0],771:[0,.66786,.11585,0],772:[0,.56167,.10333,0],774:[0,.69444,.10806,0],775:[0,.66786,.11752,0],776:[0,.66786,.10474,0],778:[0,.69444,0,0],779:[0,.69444,.1225,0],780:[0,.62847,.08295,0],915:[0,.68333,.13305,0],916:[0,.68333,0,0],920:[0,.68333,.09403,0],923:[0,.68333,0,0],926:[0,.68333,.15294,0],928:[0,.68333,.16389,0],931:[0,.68333,.12028,0],933:[0,.68333,.11111,0],934:[0,.68333,.05986,0],936:[0,.68333,.11111,0],937:[0,.68333,.10257,0],8211:[0,.43056,.09208,0],8212:[0,.43056,.09208,0],8216:[0,.69444,.12417,0],8217:[0,.69444,.12417,0],8220:[0,.69444,.1685,0],8221:[0,.69444,.06961,0],8463:[0,.68889,0,0]},"Main-Regular":{32:[0,0,0,0],33:[0,.69444,0,0],34:[0,.69444,0,0],35:[.19444,.69444,0,0],36:[.05556,.75,0,0],37:[.05556,.75,0,0],38:[0,.69444,0,0],39:[0,.69444,0,0],40:[.25,.75,0,0],41:[.25,.75,0,0],42:[0,.75,0,0],43:[.08333,.58333,0,0],44:[.19444,.10556,0,0],45:[0,.43056,0,0],46:[0,.10556,0,0],47:[.25,.75,0,0],48:[0,.64444,0,0],49:[0,.64444,0,0],50:[0,.64444,0,0],51:[0,.64444,0,0],52:[0,.64444,0,0],53:[0,.64444,0,0],54:[0,.64444,0,0],55:[0,.64444,0,0],56:[0,.64444,0,0],57:[0,.64444,0,0],58:[0,.43056,0,0],59:[.19444,.43056,0,0],60:[.0391,.5391,0,0],61:[-.13313,.36687,0,0],62:[.0391,.5391,0,0],63:[0,.69444,0,0],64:[0,.69444,0,0],65:[0,.68333,0,0],66:[0,.68333,0,0],67:[0,.68333,0,0],68:[0,.68333,0,0],69:[0,.68333,0,0],70:[0,.68333,0,0],71:[0,.68333,0,0],72:[0,.68333,0,0],73:[0,.68333,0,0],74:[0,.68333,0,0],75:[0,.68333,0,0],76:[0,.68333,0,0],77:[0,.68333,0,0],78:[0,.68333,0,0],79:[0,.68333,0,0],80:[0,.68333,0,0],81:[.19444,.68333,0,0],82:[0,.68333,0,0],83:[0,.68333,0,0],84:[0,.68333,0,0],85:[0,.68333,0,0],86:[0,.68333,.01389,0],87:[0,.68333,.01389,0],88:[0,.68333,0,0],89:[0,.68333,.025,0],90:[0,.68333,0,0],91:[.25,.75,0,0],92:[.25,.75,0,0],93:[.25,.75,0,0],94:[0,.69444,0,0],95:[.31,.12056,.02778,0],96:[0,.69444,0,0],97:[0,.43056,0,0],98:[0,.69444,0,0],99:[0,.43056,0,0],100:[0,.69444,0,0],101:[0,.43056,0,0],102:[0,.69444,.07778,0],103:[.19444,.43056,.01389,0],104:[0,.69444,0,0],105:[0,.66786,0,0],106:[.19444,.66786,0,0],107:[0,.69444,0,0],108:[0,.69444,0,0],109:[0,.43056,0,0],110:[0,.43056,0,0],111:[0,.43056,0,0],112:[.19444,.43056,0,0],113:[.19444,.43056,0,0],114:[0,.43056,0,0],115:[0,.43056,0,0],116:[0,.61508,0,0],117:[0,.43056,0,0],118:[0,.43056,.01389,0],119:[0,.43056,.01389,0],120:[0,.43056,0,0],121:[.19444,.43056,.01389,0],122:[0,.43056,0,0],123:[.25,.75,0,0],124:[.25,.75,0,0],125:[.25,.75,0,0],126:[.35,.31786,0,0],160:[0,0,0,0],168:[0,.66786,0,0],172:[0,.43056,0,0],175:[0,.56778,0,0],176:[0,.69444,0,0],177:[.08333,.58333,0,0],180:[0,.69444,0,0],215:[.08333,.58333,0,0],247:[.08333,.58333,0,0],305:[0,.43056,0,0],567:[.19444,.43056,0,0],710:[0,.69444,0,0],711:[0,.62847,0,0],713:[0,.56778,0,0],714:[0,.69444,0,0],715:[0,.69444,0,0],728:[0,.69444,0,0],729:[0,.66786,0,0],730:[0,.69444,0,0],732:[0,.66786,0,0],768:[0,.69444,0,0],769:[0,.69444,0,0],770:[0,.69444,0,0],771:[0,.66786,0,0],772:[0,.56778,0,0],774:[0,.69444,0,0],775:[0,.66786,0,0],776:[0,.66786,0,0],778:[0,.69444,0,0],779:[0,.69444,0,0],780:[0,.62847,0,0],824:[.19444,.69444,0,0],915:[0,.68333,0,0],916:[0,.68333,0,0],920:[0,.68333,0,0],923:[0,.68333,0,0],926:[0,.68333,0,0],928:[0,.68333,0,0],931:[0,.68333,0,0],933:[0,.68333,0,0],934:[0,.68333,0,0],936:[0,.68333,0,0],937:[0,.68333,0,0],8211:[0,.43056,.02778,0],8212:[0,.43056,.02778,0],8216:[0,.69444,0,0],8217:[0,.69444,0,0],8220:[0,.69444,0,0],8221:[0,.69444,0,0],8224:[.19444,.69444,0,0],8225:[.19444,.69444,0,0],8230:[0,.12,0,0],8242:[0,.55556,0,0],8407:[0,.71444,.15382,0],8463:[0,.68889,0,0],8465:[0,.69444,0,0],8467:[0,.69444,0,.11111],8472:[.19444,.43056,0,.11111],8476:[0,.69444,0,0],8501:[0,.69444,0,0],8592:[-.13313,.36687,0,0],8593:[.19444,.69444,0,0],8594:[-.13313,.36687,0,0],8595:[.19444,.69444,0,0],8596:[-.13313,.36687,0,0],8597:[.25,.75,0,0],8598:[.19444,.69444,0,0],8599:[.19444,.69444,0,0],8600:[.19444,.69444,0,0],8601:[.19444,.69444,0,0],8614:[.011,.511,0,0],8617:[.011,.511,0,0],8618:[.011,.511,0,0],8636:[-.13313,.36687,0,0],8637:[-.13313,.36687,0,0],8640:[-.13313,.36687,0,0],8641:[-.13313,.36687,0,0],8652:[.011,.671,0,0],8656:[-.13313,.36687,0,0],8657:[.19444,.69444,0,0],8658:[-.13313,.36687,0,0],8659:[.19444,.69444,0,0],8660:[-.13313,.36687,0,0],8661:[.25,.75,0,0],8704:[0,.69444,0,0],8706:[0,.69444,.05556,.08334],8707:[0,.69444,0,0],8709:[.05556,.75,0,0],8711:[0,.68333,0,0],8712:[.0391,.5391,0,0],8715:[.0391,.5391,0,0],8722:[.08333,.58333,0,0],8723:[.08333,.58333,0,0],8725:[.25,.75,0,0],8726:[.25,.75,0,0],8727:[-.03472,.46528,0,0],8728:[-.05555,.44445,0,0],8729:[-.05555,.44445,0,0],8730:[.2,.8,0,0],8733:[0,.43056,0,0],8734:[0,.43056,0,0],8736:[0,.69224,0,0],8739:[.25,.75,0,0],8741:[.25,.75,0,0],8743:[0,.55556,0,0],8744:[0,.55556,0,0],8745:[0,.55556,0,0],8746:[0,.55556,0,0],8747:[.19444,.69444,.11111,0],8764:[-.13313,.36687,0,0],8768:[.19444,.69444,0,0],8771:[-.03625,.46375,0,0],8773:[-.022,.589,0,0],8776:[-.01688,.48312,0,0],8781:[-.03625,.46375,0,0],8784:[-.133,.67,0,0],8800:[.215,.716,0,0],8801:[-.03625,.46375,0,0],8804:[.13597,.63597,0,0],8805:[.13597,.63597,0,0],8810:[.0391,.5391,0,0],8811:[.0391,.5391,0,0],8826:[.0391,.5391,0,0],8827:[.0391,.5391,0,0],8834:[.0391,.5391,0,0],8835:[.0391,.5391,0,0],8838:[.13597,.63597,0,0],8839:[.13597,.63597,0,0],8846:[0,.55556,0,0],8849:[.13597,.63597,0,0],8850:[.13597,.63597,0,0],8851:[0,.55556,0,0],8852:[0,.55556,0,0],8853:[.08333,.58333,0,0],8854:[.08333,.58333,0,0],8855:[.08333,.58333,0,0],8856:[.08333,.58333,0,0],8857:[.08333,.58333,0,0],8866:[0,.69444,0,0],8867:[0,.69444,0,0],8868:[0,.69444,0,0],8869:[0,.69444,0,0],8872:[.249,.75,0,0],8900:[-.05555,.44445,0,0],8901:[-.05555,.44445,0,0],8902:[-.03472,.46528,0,0],8904:[.005,.505,0,0],8942:[.03,.9,0,0],8943:[-.19,.31,0,0],8945:[-.1,.82,0,0],8968:[.25,.75,0,0],8969:[.25,.75,0,0],8970:[.25,.75,0,0],8971:[.25,.75,0,0],8994:[-.14236,.35764,0,0],8995:[-.14236,.35764,0,0],9136:[.244,.744,0,0],9137:[.244,.744,0,0],9651:[.19444,.69444,0,0],9657:[-.03472,.46528,0,0],9661:[.19444,.69444,0,0],9667:[-.03472,.46528,0,0],9711:[.19444,.69444,0,0],9824:[.12963,.69444,0,0],9825:[.12963,.69444,0,0],9826:[.12963,.69444,0,0],9827:[.12963,.69444,0,0],9837:[0,.75,0,0],9838:[.19444,.69444,0,0],9839:[.19444,.69444,0,0],10216:[.25,.75,0,0],10217:[.25,.75,0,0],10222:[.244,.744,0,0],10223:[.244,.744,0,0],10229:[.011,.511,0,0],10230:[.011,.511,0,0],10231:[.011,.511,0,0],10232:[.024,.525,0,0],10233:[.024,.525,0,0],10234:[.024,.525,0,0],10236:[.011,.511,0,0],10815:[0,.68333,0,0],10927:[.13597,.63597,0,0],10928:[.13597,.63597,0,0]},"Math-BoldItalic":{47:[.19444,.69444,0,0],65:[0,.68611,0,0],66:[0,.68611,.04835,0],67:[0,.68611,.06979,0],68:[0,.68611,.03194,0],69:[0,.68611,.05451,0],70:[0,.68611,.15972,0],71:[0,.68611,0,0],72:[0,.68611,.08229,0],73:[0,.68611,.07778,0],74:[0,.68611,.10069,0],75:[0,.68611,.06979,0],76:[0,.68611,0,0],77:[0,.68611,.11424,0],78:[0,.68611,.11424,0],79:[0,.68611,.03194,0],80:[0,.68611,.15972,0],81:[.19444,.68611,0,0],82:[0,.68611,.00421,0],83:[0,.68611,.05382,0],84:[0,.68611,.15972,0],85:[0,.68611,.11424,0],86:[0,.68611,.25555,0],87:[0,.68611,.15972,0],88:[0,.68611,.07778,0],89:[0,.68611,.25555,0],90:[0,.68611,.06979,0],97:[0,.44444,0,0],98:[0,.69444,0,0],99:[0,.44444,0,0],100:[0,.69444,0,0],101:[0,.44444,0,0],102:[.19444,.69444,.11042,0],103:[.19444,.44444,.03704,0],104:[0,.69444,0,0],105:[0,.69326,0,0],106:[.19444,.69326,.0622,0],107:[0,.69444,.01852,0],108:[0,.69444,.0088,0],109:[0,.44444,0,0],110:[0,.44444,0,0],111:[0,.44444,0,0],112:[.19444,.44444,0,0],113:[.19444,.44444,.03704,0],114:[0,.44444,.03194,0],115:[0,.44444,0,0],116:[0,.63492,0,0],117:[0,.44444,0,0],118:[0,.44444,.03704,0],119:[0,.44444,.02778,0],120:[0,.44444,0,0],121:[.19444,.44444,.03704,0],122:[0,.44444,.04213,0],915:[0,.68611,.15972,0],916:[0,.68611,0,0],920:[0,.68611,.03194,0],923:[0,.68611,0,0],926:[0,.68611,.07458,0],928:[0,.68611,.08229,0],931:[0,.68611,.05451,0],933:[0,.68611,.15972,0],
934:[0,.68611,0,0],936:[0,.68611,.11653,0],937:[0,.68611,.04835,0],945:[0,.44444,0,0],946:[.19444,.69444,.03403,0],947:[.19444,.44444,.06389,0],948:[0,.69444,.03819,0],949:[0,.44444,0,0],950:[.19444,.69444,.06215,0],951:[.19444,.44444,.03704,0],952:[0,.69444,.03194,0],953:[0,.44444,0,0],954:[0,.44444,0,0],955:[0,.69444,0,0],956:[.19444,.44444,0,0],957:[0,.44444,.06898,0],958:[.19444,.69444,.03021,0],959:[0,.44444,0,0],960:[0,.44444,.03704,0],961:[.19444,.44444,0,0],962:[.09722,.44444,.07917,0],963:[0,.44444,.03704,0],964:[0,.44444,.13472,0],965:[0,.44444,.03704,0],966:[.19444,.44444,0,0],967:[.19444,.44444,0,0],968:[.19444,.69444,.03704,0],969:[0,.44444,.03704,0],977:[0,.69444,0,0],981:[.19444,.69444,0,0],982:[0,.44444,.03194,0],1009:[.19444,.44444,0,0],1013:[0,.44444,0,0]},"Math-Italic":{47:[.19444,.69444,0,0],65:[0,.68333,0,.13889],66:[0,.68333,.05017,.08334],67:[0,.68333,.07153,.08334],68:[0,.68333,.02778,.05556],69:[0,.68333,.05764,.08334],70:[0,.68333,.13889,.08334],71:[0,.68333,0,.08334],72:[0,.68333,.08125,.05556],73:[0,.68333,.07847,.11111],74:[0,.68333,.09618,.16667],75:[0,.68333,.07153,.05556],76:[0,.68333,0,.02778],77:[0,.68333,.10903,.08334],78:[0,.68333,.10903,.08334],79:[0,.68333,.02778,.08334],80:[0,.68333,.13889,.08334],81:[.19444,.68333,0,.08334],82:[0,.68333,.00773,.08334],83:[0,.68333,.05764,.08334],84:[0,.68333,.13889,.08334],85:[0,.68333,.10903,.02778],86:[0,.68333,.22222,0],87:[0,.68333,.13889,0],88:[0,.68333,.07847,.08334],89:[0,.68333,.22222,0],90:[0,.68333,.07153,.08334],97:[0,.43056,0,0],98:[0,.69444,0,0],99:[0,.43056,0,.05556],100:[0,.69444,0,.16667],101:[0,.43056,0,.05556],102:[.19444,.69444,.10764,.16667],103:[.19444,.43056,.03588,.02778],104:[0,.69444,0,0],105:[0,.65952,0,0],106:[.19444,.65952,.05724,0],107:[0,.69444,.03148,0],108:[0,.69444,.01968,.08334],109:[0,.43056,0,0],110:[0,.43056,0,0],111:[0,.43056,0,.05556],112:[.19444,.43056,0,.08334],113:[.19444,.43056,.03588,.08334],114:[0,.43056,.02778,.05556],115:[0,.43056,0,.05556],116:[0,.61508,0,.08334],117:[0,.43056,0,.02778],118:[0,.43056,.03588,.02778],119:[0,.43056,.02691,.08334],120:[0,.43056,0,.02778],121:[.19444,.43056,.03588,.05556],122:[0,.43056,.04398,.05556],915:[0,.68333,.13889,.08334],916:[0,.68333,0,.16667],920:[0,.68333,.02778,.08334],923:[0,.68333,0,.16667],926:[0,.68333,.07569,.08334],928:[0,.68333,.08125,.05556],931:[0,.68333,.05764,.08334],933:[0,.68333,.13889,.05556],934:[0,.68333,0,.08334],936:[0,.68333,.11,.05556],937:[0,.68333,.05017,.08334],945:[0,.43056,.0037,.02778],946:[.19444,.69444,.05278,.08334],947:[.19444,.43056,.05556,0],948:[0,.69444,.03785,.05556],949:[0,.43056,0,.08334],950:[.19444,.69444,.07378,.08334],951:[.19444,.43056,.03588,.05556],952:[0,.69444,.02778,.08334],953:[0,.43056,0,.05556],954:[0,.43056,0,0],955:[0,.69444,0,0],956:[.19444,.43056,0,.02778],957:[0,.43056,.06366,.02778],958:[.19444,.69444,.04601,.11111],959:[0,.43056,0,.05556],960:[0,.43056,.03588,0],961:[.19444,.43056,0,.08334],962:[.09722,.43056,.07986,.08334],963:[0,.43056,.03588,0],964:[0,.43056,.1132,.02778],965:[0,.43056,.03588,.02778],966:[.19444,.43056,0,.08334],967:[.19444,.43056,0,.05556],968:[.19444,.69444,.03588,.11111],969:[0,.43056,.03588,0],977:[0,.69444,0,.08334],981:[.19444,.69444,0,.08334],982:[0,.43056,.02778,0],1009:[.19444,.43056,0,.08334],1013:[0,.43056,0,.05556]},"Math-Regular":{65:[0,.68333,0,.13889],66:[0,.68333,.05017,.08334],67:[0,.68333,.07153,.08334],68:[0,.68333,.02778,.05556],69:[0,.68333,.05764,.08334],70:[0,.68333,.13889,.08334],71:[0,.68333,0,.08334],72:[0,.68333,.08125,.05556],73:[0,.68333,.07847,.11111],74:[0,.68333,.09618,.16667],75:[0,.68333,.07153,.05556],76:[0,.68333,0,.02778],77:[0,.68333,.10903,.08334],78:[0,.68333,.10903,.08334],79:[0,.68333,.02778,.08334],80:[0,.68333,.13889,.08334],81:[.19444,.68333,0,.08334],82:[0,.68333,.00773,.08334],83:[0,.68333,.05764,.08334],84:[0,.68333,.13889,.08334],85:[0,.68333,.10903,.02778],86:[0,.68333,.22222,0],87:[0,.68333,.13889,0],88:[0,.68333,.07847,.08334],89:[0,.68333,.22222,0],90:[0,.68333,.07153,.08334],97:[0,.43056,0,0],98:[0,.69444,0,0],99:[0,.43056,0,.05556],100:[0,.69444,0,.16667],101:[0,.43056,0,.05556],102:[.19444,.69444,.10764,.16667],103:[.19444,.43056,.03588,.02778],104:[0,.69444,0,0],105:[0,.65952,0,0],106:[.19444,.65952,.05724,0],107:[0,.69444,.03148,0],108:[0,.69444,.01968,.08334],109:[0,.43056,0,0],110:[0,.43056,0,0],111:[0,.43056,0,.05556],112:[.19444,.43056,0,.08334],113:[.19444,.43056,.03588,.08334],114:[0,.43056,.02778,.05556],115:[0,.43056,0,.05556],116:[0,.61508,0,.08334],117:[0,.43056,0,.02778],118:[0,.43056,.03588,.02778],119:[0,.43056,.02691,.08334],120:[0,.43056,0,.02778],121:[.19444,.43056,.03588,.05556],122:[0,.43056,.04398,.05556],915:[0,.68333,.13889,.08334],916:[0,.68333,0,.16667],920:[0,.68333,.02778,.08334],923:[0,.68333,0,.16667],926:[0,.68333,.07569,.08334],928:[0,.68333,.08125,.05556],931:[0,.68333,.05764,.08334],933:[0,.68333,.13889,.05556],934:[0,.68333,0,.08334],936:[0,.68333,.11,.05556],937:[0,.68333,.05017,.08334],945:[0,.43056,.0037,.02778],946:[.19444,.69444,.05278,.08334],947:[.19444,.43056,.05556,0],948:[0,.69444,.03785,.05556],949:[0,.43056,0,.08334],950:[.19444,.69444,.07378,.08334],951:[.19444,.43056,.03588,.05556],952:[0,.69444,.02778,.08334],953:[0,.43056,0,.05556],954:[0,.43056,0,0],955:[0,.69444,0,0],956:[.19444,.43056,0,.02778],957:[0,.43056,.06366,.02778],958:[.19444,.69444,.04601,.11111],959:[0,.43056,0,.05556],960:[0,.43056,.03588,0],961:[.19444,.43056,0,.08334],962:[.09722,.43056,.07986,.08334],963:[0,.43056,.03588,0],964:[0,.43056,.1132,.02778],965:[0,.43056,.03588,.02778],966:[.19444,.43056,0,.08334],967:[.19444,.43056,0,.05556],968:[.19444,.69444,.03588,.11111],969:[0,.43056,.03588,0],977:[0,.69444,0,.08334],981:[.19444,.69444,0,.08334],982:[0,.43056,.02778,0],1009:[.19444,.43056,0,.08334],1013:[0,.43056,0,.05556]},"SansSerif-Regular":{33:[0,.69444,0,0],34:[0,.69444,0,0],35:[.19444,.69444,0,0],36:[.05556,.75,0,0],37:[.05556,.75,0,0],38:[0,.69444,0,0],39:[0,.69444,0,0],40:[.25,.75,0,0],41:[.25,.75,0,0],42:[0,.75,0,0],43:[.08333,.58333,0,0],44:[.125,.08333,0,0],45:[0,.44444,0,0],46:[0,.08333,0,0],47:[.25,.75,0,0],48:[0,.65556,0,0],49:[0,.65556,0,0],50:[0,.65556,0,0],51:[0,.65556,0,0],52:[0,.65556,0,0],53:[0,.65556,0,0],54:[0,.65556,0,0],55:[0,.65556,0,0],56:[0,.65556,0,0],57:[0,.65556,0,0],58:[0,.44444,0,0],59:[.125,.44444,0,0],61:[-.13,.37,0,0],63:[0,.69444,0,0],64:[0,.69444,0,0],65:[0,.69444,0,0],66:[0,.69444,0,0],67:[0,.69444,0,0],68:[0,.69444,0,0],69:[0,.69444,0,0],70:[0,.69444,0,0],71:[0,.69444,0,0],72:[0,.69444,0,0],73:[0,.69444,0,0],74:[0,.69444,0,0],75:[0,.69444,0,0],76:[0,.69444,0,0],77:[0,.69444,0,0],78:[0,.69444,0,0],79:[0,.69444,0,0],80:[0,.69444,0,0],81:[.125,.69444,0,0],82:[0,.69444,0,0],83:[0,.69444,0,0],84:[0,.69444,0,0],85:[0,.69444,0,0],86:[0,.69444,.01389,0],87:[0,.69444,.01389,0],88:[0,.69444,0,0],89:[0,.69444,.025,0],90:[0,.69444,0,0],91:[.25,.75,0,0],93:[.25,.75,0,0],94:[0,.69444,0,0],95:[.35,.09444,.02778,0],97:[0,.44444,0,0],98:[0,.69444,0,0],99:[0,.44444,0,0],100:[0,.69444,0,0],101:[0,.44444,0,0],102:[0,.69444,.06944,0],103:[.19444,.44444,.01389,0],104:[0,.69444,0,0],105:[0,.67937,0,0],106:[.19444,.67937,0,0],107:[0,.69444,0,0],108:[0,.69444,0,0],109:[0,.44444,0,0],110:[0,.44444,0,0],111:[0,.44444,0,0],112:[.19444,.44444,0,0],113:[.19444,.44444,0,0],114:[0,.44444,.01389,0],115:[0,.44444,0,0],116:[0,.57143,0,0],117:[0,.44444,0,0],118:[0,.44444,.01389,0],119:[0,.44444,.01389,0],120:[0,.44444,0,0],121:[.19444,.44444,.01389,0],122:[0,.44444,0,0],126:[.35,.32659,0,0],305:[0,.44444,0,0],567:[.19444,.44444,0,0],768:[0,.69444,0,0],769:[0,.69444,0,0],770:[0,.69444,0,0],771:[0,.67659,0,0],772:[0,.60889,0,0],774:[0,.69444,0,0],775:[0,.67937,0,0],776:[0,.67937,0,0],778:[0,.69444,0,0],779:[0,.69444,0,0],780:[0,.63194,0,0],915:[0,.69444,0,0],916:[0,.69444,0,0],920:[0,.69444,0,0],923:[0,.69444,0,0],926:[0,.69444,0,0],928:[0,.69444,0,0],931:[0,.69444,0,0],933:[0,.69444,0,0],934:[0,.69444,0,0],936:[0,.69444,0,0],937:[0,.69444,0,0],8211:[0,.44444,.02778,0],8212:[0,.44444,.02778,0],8216:[0,.69444,0,0],8217:[0,.69444,0,0],8220:[0,.69444,0,0],8221:[0,.69444,0,0]},"Script-Regular":{65:[0,.7,.22925,0],66:[0,.7,.04087,0],67:[0,.7,.1689,0],68:[0,.7,.09371,0],69:[0,.7,.18583,0],70:[0,.7,.13634,0],71:[0,.7,.17322,0],72:[0,.7,.29694,0],73:[0,.7,.19189,0],74:[.27778,.7,.19189,0],75:[0,.7,.31259,0],76:[0,.7,.19189,0],77:[0,.7,.15981,0],78:[0,.7,.3525,0],79:[0,.7,.08078,0],80:[0,.7,.08078,0],81:[0,.7,.03305,0],82:[0,.7,.06259,0],83:[0,.7,.19189,0],84:[0,.7,.29087,0],85:[0,.7,.25815,0],86:[0,.7,.27523,0],87:[0,.7,.27523,0],88:[0,.7,.26006,0],89:[0,.7,.2939,0],90:[0,.7,.24037,0]},"Size1-Regular":{40:[.35001,.85,0,0],41:[.35001,.85,0,0],47:[.35001,.85,0,0],91:[.35001,.85,0,0],92:[.35001,.85,0,0],93:[.35001,.85,0,0],123:[.35001,.85,0,0],125:[.35001,.85,0,0],710:[0,.72222,0,0],732:[0,.72222,0,0],770:[0,.72222,0,0],771:[0,.72222,0,0],8214:[-99e-5,.601,0,0],8593:[1e-5,.6,0,0],8595:[1e-5,.6,0,0],8657:[1e-5,.6,0,0],8659:[1e-5,.6,0,0],8719:[.25001,.75,0,0],8720:[.25001,.75,0,0],8721:[.25001,.75,0,0],8730:[.35001,.85,0,0],8739:[-.00599,.606,0,0],8741:[-.00599,.606,0,0],8747:[.30612,.805,.19445,0],8748:[.306,.805,.19445,0],8749:[.306,.805,.19445,0],8750:[.30612,.805,.19445,0],8896:[.25001,.75,0,0],8897:[.25001,.75,0,0],8898:[.25001,.75,0,0],8899:[.25001,.75,0,0],8968:[.35001,.85,0,0],8969:[.35001,.85,0,0],8970:[.35001,.85,0,0],8971:[.35001,.85,0,0],9168:[-99e-5,.601,0,0],10216:[.35001,.85,0,0],10217:[.35001,.85,0,0],10752:[.25001,.75,0,0],10753:[.25001,.75,0,0],10754:[.25001,.75,0,0],10756:[.25001,.75,0,0],10758:[.25001,.75,0,0]},"Size2-Regular":{40:[.65002,1.15,0,0],41:[.65002,1.15,0,0],47:[.65002,1.15,0,0],91:[.65002,1.15,0,0],92:[.65002,1.15,0,0],93:[.65002,1.15,0,0],123:[.65002,1.15,0,0],125:[.65002,1.15,0,0],710:[0,.75,0,0],732:[0,.75,0,0],770:[0,.75,0,0],771:[0,.75,0,0],8719:[.55001,1.05,0,0],8720:[.55001,1.05,0,0],8721:[.55001,1.05,0,0],8730:[.65002,1.15,0,0],8747:[.86225,1.36,.44445,0],8748:[.862,1.36,.44445,0],8749:[.862,1.36,.44445,0],8750:[.86225,1.36,.44445,0],8896:[.55001,1.05,0,0],8897:[.55001,1.05,0,0],8898:[.55001,1.05,0,0],8899:[.55001,1.05,0,0],8968:[.65002,1.15,0,0],8969:[.65002,1.15,0,0],8970:[.65002,1.15,0,0],8971:[.65002,1.15,0,0],10216:[.65002,1.15,0,0],10217:[.65002,1.15,0,0],10752:[.55001,1.05,0,0],10753:[.55001,1.05,0,0],10754:[.55001,1.05,0,0],10756:[.55001,1.05,0,0],10758:[.55001,1.05,0,0]},"Size3-Regular":{40:[.95003,1.45,0,0],41:[.95003,1.45,0,0],47:[.95003,1.45,0,0],91:[.95003,1.45,0,0],92:[.95003,1.45,0,0],93:[.95003,1.45,0,0],123:[.95003,1.45,0,0],125:[.95003,1.45,0,0],710:[0,.75,0,0],732:[0,.75,0,0],770:[0,.75,0,0],771:[0,.75,0,0],8730:[.95003,1.45,0,0],8968:[.95003,1.45,0,0],8969:[.95003,1.45,0,0],8970:[.95003,1.45,0,0],8971:[.95003,1.45,0,0],10216:[.95003,1.45,0,0],10217:[.95003,1.45,0,0]},"Size4-Regular":{40:[1.25003,1.75,0,0],41:[1.25003,1.75,0,0],47:[1.25003,1.75,0,0],91:[1.25003,1.75,0,0],92:[1.25003,1.75,0,0],93:[1.25003,1.75,0,0],123:[1.25003,1.75,0,0],125:[1.25003,1.75,0,0],710:[0,.825,0,0],732:[0,.825,0,0],770:[0,.825,0,0],771:[0,.825,0,0],8730:[1.25003,1.75,0,0],8968:[1.25003,1.75,0,0],8969:[1.25003,1.75,0,0],8970:[1.25003,1.75,0,0],8971:[1.25003,1.75,0,0],9115:[.64502,1.155,0,0],9116:[1e-5,.6,0,0],9117:[.64502,1.155,0,0],9118:[.64502,1.155,0,0],9119:[1e-5,.6,0,0],9120:[.64502,1.155,0,0],9121:[.64502,1.155,0,0],9122:[-99e-5,.601,0,0],9123:[.64502,1.155,0,0],9124:[.64502,1.155,0,0],9125:[-99e-5,.601,0,0],9126:[.64502,1.155,0,0],9127:[1e-5,.9,0,0],9128:[.65002,1.15,0,0],9129:[.90001,0,0,0],9130:[0,.3,0,0],9131:[1e-5,.9,0,0],9132:[.65002,1.15,0,0],9133:[.90001,0,0,0],9143:[.88502,.915,0,0],10216:[1.25003,1.75,0,0],10217:[1.25003,1.75,0,0],57344:[-.00499,.605,0,0],57345:[-.00499,.605,0,0],57680:[0,.12,0,0],57681:[0,.12,0,0],57682:[0,.12,0,0],57683:[0,.12,0,0]},"Typewriter-Regular":{33:[0,.61111,0,0],34:[0,.61111,0,0],35:[0,.61111,0,0],36:[.08333,.69444,0,0],37:[.08333,.69444,0,0],38:[0,.61111,0,0],39:[0,.61111,0,0],40:[.08333,.69444,0,0],41:[.08333,.69444,0,0],42:[0,.52083,0,0],43:[-.08056,.53055,0,0],44:[.13889,.125,0,0],45:[-.08056,.53055,0,0],46:[0,.125,0,0],47:[.08333,.69444,0,0],48:[0,.61111,0,0],49:[0,.61111,0,0],50:[0,.61111,0,0],51:[0,.61111,0,0],52:[0,.61111,0,0],53:[0,.61111,0,0],54:[0,.61111,0,0],55:[0,.61111,0,0],56:[0,.61111,0,0],57:[0,.61111,0,0],58:[0,.43056,0,0],59:[.13889,.43056,0,0],60:[-.05556,.55556,0,0],61:[-.19549,.41562,0,0],62:[-.05556,.55556,0,0],63:[0,.61111,0,0],64:[0,.61111,0,0],65:[0,.61111,0,0],66:[0,.61111,0,0],67:[0,.61111,0,0],68:[0,.61111,0,0],69:[0,.61111,0,0],70:[0,.61111,0,0],71:[0,.61111,0,0],72:[0,.61111,0,0],73:[0,.61111,0,0],74:[0,.61111,0,0],75:[0,.61111,0,0],76:[0,.61111,0,0],77:[0,.61111,0,0],78:[0,.61111,0,0],79:[0,.61111,0,0],80:[0,.61111,0,0],81:[.13889,.61111,0,0],82:[0,.61111,0,0],83:[0,.61111,0,0],84:[0,.61111,0,0],85:[0,.61111,0,0],86:[0,.61111,0,0],87:[0,.61111,0,0],88:[0,.61111,0,0],89:[0,.61111,0,0],90:[0,.61111,0,0],91:[.08333,.69444,0,0],92:[.08333,.69444,0,0],93:[.08333,.69444,0,0],94:[0,.61111,0,0],95:[.09514,0,0,0],96:[0,.61111,0,0],97:[0,.43056,0,0],98:[0,.61111,0,0],99:[0,.43056,0,0],100:[0,.61111,0,0],101:[0,.43056,0,0],102:[0,.61111,0,0],103:[.22222,.43056,0,0],104:[0,.61111,0,0],105:[0,.61111,0,0],106:[.22222,.61111,0,0],107:[0,.61111,0,0],108:[0,.61111,0,0],109:[0,.43056,0,0],110:[0,.43056,0,0],111:[0,.43056,0,0],112:[.22222,.43056,0,0],113:[.22222,.43056,0,0],114:[0,.43056,0,0],115:[0,.43056,0,0],116:[0,.55358,0,0],117:[0,.43056,0,0],118:[0,.43056,0,0],119:[0,.43056,0,0],120:[0,.43056,0,0],121:[.22222,.43056,0,0],122:[0,.43056,0,0],123:[.08333,.69444,0,0],124:[.08333,.69444,0,0],125:[.08333,.69444,0,0],126:[0,.61111,0,0],127:[0,.61111,0,0],305:[0,.43056,0,0],567:[.22222,.43056,0,0],768:[0,.61111,0,0],769:[0,.61111,0,0],770:[0,.61111,0,0],771:[0,.61111,0,0],772:[0,.56555,0,0],774:[0,.61111,0,0],776:[0,.61111,0,0],778:[0,.61111,0,0],780:[0,.56597,0,0],915:[0,.61111,0,0],916:[0,.61111,0,0],920:[0,.61111,0,0],923:[0,.61111,0,0],926:[0,.61111,0,0],928:[0,.61111,0,0],931:[0,.61111,0,0],933:[0,.61111,0,0],934:[0,.61111,0,0],936:[0,.61111,0,0],937:[0,.61111,0,0],2018:[0,.61111,0,0],2019:[0,.61111,0,0],8242:[0,.61111,0,0]}}},{}],23:[function(e,t,r){"use strict";var a=e("./utils");var i=e("./ParseError");var n=e("./parseData");var o=n.ParseNode;function s(e,r,a){if(typeof e==="string"){e=[e]}if(typeof r==="number"){r={numArgs:r}}var i={numArgs:r.numArgs,argTypes:r.argTypes,greediness:r.greediness===undefined?1:r.greediness,allowedInText:!!r.allowedInText,numOptionalArgs:r.numOptionalArgs||0,infix:!!r.infix,handler:a};for(var n=0;n<e.length;++n){t.exports[e[n]]=i}}var l=function e(t){if(t.type==="ordgroup"){return t.value}else{return[t]}};s("\\sqrt",{numArgs:1,numOptionalArgs:1},function(e,t){var r=t[0];var a=t[1];return{type:"sqrt",body:a,index:r}});var u={"\\text":undefined,"\\textrm":"mathrm","\\textsf":"mathsf","\\texttt":"mathtt","\\textnormal":"mathrm","\\textbf":"mathbf","\\textit":"textit"};s(["\\text","\\textrm","\\textsf","\\texttt","\\textnormal","\\textbf","\\textit"],{numArgs:1,argTypes:["text"],greediness:2,allowedInText:true},function(e,t){var r=t[0];return{type:"text",body:l(r),style:u[e.funcName]}});s("\\xmlClass",{numArgs:2,allowedInText:true,greediness:3,argTypes:["string","original"]},function(e,t){var r=t[0];var a=t[1];var i=void 0;if(a.type==="ordgroup"){i=a.value}else{i=[a]}return{type:"xmlClass",cl:r,value:i}});s("\\textcolor",{numArgs:2,allowedInText:true,greediness:3,argTypes:["color","original"]},function(e,t){var r=t[0];var a=t[1];return{type:"color",color:r.value,value:l(a)}});s("\\color",{numArgs:1,allowedInText:true,greediness:3,argTypes:["color"]},null);s("\\overline",{numArgs:1},function(e,t){var r=t[0];return{type:"overline",body:r}});s("\\underline",{numArgs:1},function(e,t){var r=t[0];return{type:"underline",body:r}});s("\\rule",{numArgs:2,numOptionalArgs:1,argTypes:["size","size","size"]},function(e,t){var r=t[0];var a=t[1];var i=t[2];return{type:"rule",shift:r&&r.value,width:a.value,height:i.value}});s("\\cursor",{numArgs:1,numOptionalArgs:1,argTypes:["size","size"]},function(e,t){var r=t[0];var a=t[1];return{type:"cursor",shift:r&&r.value,height:a.value}});s(["\\kern","\\mkern"],{numArgs:1,argTypes:["size"]},function(e,t){return{type:"kern",dimension:t[0].value}});s("\\KaTeX",{numArgs:0},function(e){return{type:"katex"}});s("\\phantom",{numArgs:1},function(e,t){var r=t[0];return{type:"phantom",value:l(r)}});s(["\\mathord","\\mathbin","\\mathrel","\\mathopen","\\mathclose","\\mathpunct","\\mathinner"],{numArgs:1},function(e,t){var r=t[0];return{type:"mclass",mclass:"m"+e.funcName.substr(5),value:l(r)}});s("\\stackrel",{numArgs:2},function(e,t){var r=t[0];var a=t[1];var i=new o("op",{type:"op",limits:true,alwaysHandleSupSub:true,symbol:false,value:l(a)},a.mode);var n=new o("supsub",{base:i,sup:r,sub:null},r.mode);return{type:"mclass",mclass:"mrel",value:[n]}});s("\\bmod",{numArgs:0},function(e,t){return{type:"mod",modType:"bmod",value:null}});s(["\\pod","\\pmod","\\mod"],{numArgs:1},function(e,t){var r=t[0];return{type:"mod",modType:e.funcName.substr(1),value:l(r)}});var h={"\\bigl":{mclass:"mopen",size:1},"\\Bigl":{mclass:"mopen",size:2},"\\biggl":{mclass:"mopen",size:3},"\\Biggl":{mclass:"mopen",size:4},"\\bigr":{mclass:"mclose",size:1},"\\Bigr":{mclass:"mclose",size:2},"\\biggr":{mclass:"mclose",size:3},"\\Biggr":{mclass:"mclose",size:4},"\\bigm":{mclass:"mrel",size:1},"\\Bigm":{mclass:"mrel",size:2},"\\biggm":{mclass:"mrel",size:3},"\\Biggm":{mclass:"mrel",size:4},"\\big":{mclass:"mord",size:1},"\\Big":{mclass:"mord",size:2},"\\bigg":{mclass:"mord",size:3},"\\Bigg":{mclass:"mord",size:4}};var p=["(",")","[","\\lbrack","]","\\rbrack","\\{","\\lbrace","\\}","\\rbrace","\\lfloor","\\rfloor","\\lceil","\\rceil","<",">","\\langle","\\rangle","\\lt","\\gt","\\lvert","\\rvert","\\lVert","\\rVert","\\lgroup","\\rgroup","\\lmoustache","\\rmoustache","/","\\backslash","|","\\vert","\\|","\\Vert","\\uparrow","\\Uparrow","\\downarrow","\\Downarrow","\\updownarrow","\\Updownarrow","."];var c={"\\Bbb":"\\mathbb","\\bold":"\\mathbf","\\frak":"\\mathfrak"};s(["\\blue","\\orange","\\pink","\\red","\\green","\\gray","\\purple","\\blueA","\\blueB","\\blueC","\\blueD","\\blueE","\\tealA","\\tealB","\\tealC","\\tealD","\\tealE","\\greenA","\\greenB","\\greenC","\\greenD","\\greenE","\\goldA","\\goldB","\\goldC","\\goldD","\\goldE","\\redA","\\redB","\\redC","\\redD","\\redE","\\maroonA","\\maroonB","\\maroonC","\\maroonD","\\maroonE","\\purpleA","\\purpleB","\\purpleC","\\purpleD","\\purpleE","\\mintA","\\mintB","\\mintC","\\grayA","\\grayB","\\grayC","\\grayD","\\grayE","\\grayF","\\grayG","\\grayH","\\grayI","\\kaBlue","\\kaGreen"],{numArgs:1,allowedInText:true,greediness:3},function(e,t){var r=t[0];return{type:"color",color:"katex-"+e.funcName.slice(1),value:l(r)}});s(["\\arcsin","\\arccos","\\arctan","\\arctg","\\arcctg","\\arg","\\ch","\\cos","\\cosec","\\cosh","\\cot","\\cotg","\\coth","\\csc","\\ctg","\\cth","\\deg","\\dim","\\exp","\\hom","\\ker","\\lg","\\ln","\\log","\\sec","\\sin","\\sinh","\\sh","\\tan","\\tanh","\\tg","\\th"],{numArgs:0},function(e){return{type:"op",limits:false,symbol:false,body:e.funcName}});s(["\\det","\\gcd","\\inf","\\lim","\\liminf","\\limsup","\\max","\\min","\\Pr","\\sup"],{numArgs:0},function(e){return{type:"op",limits:true,symbol:false,body:e.funcName}});s(["\\int","\\iint","\\iiint","\\oint"],{numArgs:0},function(e){return{type:"op",limits:false,symbol:true,body:e.funcName}});s(["\\coprod","\\bigvee","\\bigwedge","\\biguplus","\\bigcap","\\bigcup","\\intop","\\prod","\\sum","\\bigotimes","\\bigoplus","\\bigodot","\\bigsqcup","\\smallint"],{numArgs:0},function(e){return{type:"op",limits:true,symbol:true,body:e.funcName}});s("\\mathop",{numArgs:1},function(e,t){var r=t[0];return{type:"op",limits:false,symbol:false,value:l(r)}});s(["\\dfrac","\\frac","\\tfrac","\\dbinom","\\binom","\\tbinom","\\\\atopfrac"],{numArgs:2,greediness:2},function(e,t){var r=t[0];var a=t[1];var i=void 0;var n=null;var o=null;var s="auto";switch(e.funcName){case"\\dfrac":case"\\frac":case"\\tfrac":i=true;break;case"\\\\atopfrac":i=false;break;case"\\dbinom":case"\\binom":case"\\tbinom":i=false;n="(";o=")";break;default:throw new Error("Unrecognized genfrac command")}switch(e.funcName){case"\\dfrac":case"\\dbinom":s="display";break;case"\\tfrac":case"\\tbinom":s="text";break}return{type:"genfrac",numer:r,denom:a,hasBarLine:i,leftDelim:n,rightDelim:o,size:s}});s(["\\llap","\\rlap"],{numArgs:1,allowedInText:true},function(e,t){var r=t[0];return{type:e.funcName.slice(1),body:r}});var v=function e(t,r){if(a.contains(p,t.value)){return t}else{throw new i("Invalid delimiter: '"+t.value+"' after '"+r.funcName+"'",t)}};s(["\\bigl","\\Bigl","\\biggl","\\Biggl","\\bigr","\\Bigr","\\biggr","\\Biggr","\\bigm","\\Bigm","\\biggm","\\Biggm","\\big","\\Big","\\bigg","\\Bigg"],{numArgs:1},function(e,t){var r=v(t[0],e);return{type:"delimsizing",size:h[e.funcName].size,mclass:h[e.funcName].mclass,value:r.value}});s(["\\left","\\right"],{numArgs:1},function(e,t){var r=v(t[0],e);return{type:"leftright",value:r.value}});s("\\middle",{numArgs:1},function(e,t){var r=v(t[0],e);if(!e.parser.leftrightDepth){throw new i("\\middle without preceding \\left",r)}return{type:"middle",value:r.value}});s(["\\tiny","\\scriptsize","\\footnotesize","\\small","\\normalsize","\\large","\\Large","\\LARGE","\\huge","\\Huge"],0,null);s(["\\displaystyle","\\textstyle","\\scriptstyle","\\scriptscriptstyle"],0,null);s(["\\rm","\\sf","\\tt","\\bf","\\it"],0,null);s(["\\mathrm","\\mathit","\\mathbf","\\mathbb","\\mathcal","\\mathfrak","\\mathscr","\\mathsf","\\mathtt","\\Bbb","\\bold","\\frak"],{numArgs:1,greediness:2},function(e,t){var r=t[0];var a=e.funcName;if(a in c){a=c[a]}return{type:"font",font:a.slice(1),body:r}});s(["\\acute","\\grave","\\ddot","\\tilde","\\bar","\\breve","\\check","\\hat","\\vec","\\dot","\\widehat","\\widetilde","\\overrightarrow","\\overleftarrow","\\Overrightarrow","\\overleftrightarrow","\\overgroup","\\overlinesegment","\\overleftharpoon","\\overrightharpoon"],{numArgs:1},function(e,t){var r=t[0];var i=!a.contains(["\\acute","\\grave","\\ddot","\\tilde","\\bar","\\breve","\\check","\\hat","\\vec","\\dot"],e.funcName);var n=!i||a.contains(["\\widehat","\\widetilde"],e.funcName);return{type:"accent",label:e.funcName,isStretchy:i,isShifty:n,value:l(r),base:r}});s(["\\overbrace","\\underbrace"],{numArgs:1},function(e,t){var r=t[0];return{type:"horizBrace",label:e.funcName,isOver:/^\\over/.test(e.funcName),base:r}});s(["\\underleftarrow","\\underrightarrow","\\underleftrightarrow","\\undergroup","\\underlinesegment","\\undertilde"],{numArgs:1},function(e,t){var r=t[0];return{type:"accentUnder",label:e.funcName,value:l(r),body:r}});s(["\\xleftarrow","\\xrightarrow","\\xLeftarrow","\\xRightarrow","\\xleftrightarrow","\\xLeftrightarrow","\\xhookleftarrow","\\xhookrightarrow","\\xmapsto","\\xrightharpoondown","\\xrightharpoonup","\\xleftharpoondown","\\xleftharpoonup","\\xrightleftharpoons","\\xleftrightharpoons","\\xLongequal","\\xtwoheadrightarrow","\\xtwoheadleftarrow","\\xLongequal","\\xtofrom"],{numArgs:1,numOptionalArgs:1},function(e,t){var r=t[0];var a=t[1];return{type:"xArrow",label:e.funcName,body:a,below:r}});s(["\\cancel","\\bcancel","\\xcancel","\\sout","\\fbox"],{numArgs:1},function(e,t){var r=t[0];return{type:"enclose",label:e.funcName,body:r}});s(["\\over","\\choose","\\atop"],{numArgs:0,infix:true},function(e){var t=void 0;switch(e.funcName){case"\\over":t="\\frac";break;case"\\choose":t="\\binom";break;case"\\atop":t="\\\\atopfrac";break;default:throw new Error("Unrecognized infix genfrac command")}return{type:"infix",replaceWith:t,token:e.token}});s(["\\\\","\\cr"],{numArgs:0,numOptionalArgs:1,argTypes:["size"]},function(e,t){var r=t[0];return{type:"cr",size:r}});s(["\\begin","\\end"],{numArgs:1,argTypes:["text"]},function(e,t){var r=t[0];if(r.type!=="ordgroup"){throw new i("Invalid environment name",r)}var a="";for(var n=0;n<r.value.length;++n){a+=r.value[n].value}return{type:"environment",name:a,nameGroup:r}})},{"./ParseError":10,"./parseData":26,"./utils":31}],24:[function(e,t,r){"use strict";function a(e,r){t.exports[e]=r}a("\\bgroup","{");a("\\egroup","}");a("\\begingroup","{");a("\\endgroup","}");a("\\overset","\\mathop{#2}\\limits^{#1}");a("\\underset","\\mathop{#2}\\limits_{#1}");a("\\boxed","\\fbox{\\displaystyle{#1}}");a("\\iff","\\;\\Longleftrightarrow\\;");a("\\implies","\\;\\Longrightarrow\\;");a("\\impliedby","\\;\\Longleftarrow\\;");a("\\ordinarycolon",":");a("\\vcentcolon","\\mathrel{\\mathop\\ordinarycolon}");a("\\dblcolon","\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon");a("\\coloneqq","\\vcentcolon\\mathrel{\\mkern-1.2mu}=");a("\\Coloneqq","\\dblcolon\\mathrel{\\mkern-1.2mu}=");a("\\coloneq","\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}");a("\\Coloneq","\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}");a("\\eqqcolon","=\\mathrel{\\mkern-1.2mu}\\vcentcolon");a("\\Eqqcolon","=\\mathrel{\\mkern-1.2mu}\\dblcolon");a("\\eqcolon","\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon");a("\\Eqcolon","\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon");a("\\colonapprox","\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx");a("\\Colonapprox","\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx");a("\\colonsim","\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim");a("\\Colonsim","\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim");a("\\ratio","\\vcentcolon");a("\\coloncolon","\\dblcolon");a("\\colonequals","\\coloneqq");a("\\coloncolonequals","\\Coloneqq");a("\\equalscolon","\\eqqcolon");a("\\equalscoloncolon","\\Eqqcolon");a("\\colonminus","\\coloneq");a("\\coloncolonminus","\\Coloneq");a("\\minuscolon","\\eqcolon");a("\\minuscoloncolon","\\Eqcolon");a("\\coloncolonapprox","\\Colonapprox");a("\\coloncolonsim","\\Colonsim");a("\\simcolon","\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon");a("\\simcoloncolon","\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon");a("\\approxcolon","\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon");a("\\approxcoloncolon","\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon")},{}],25:[function(e,t,r){"use strict";var a=e("./utils");function i(e,t){this.type=e;this.attributes={};this.children=t||[]}i.prototype.setAttribute=function(e,t){this.attributes[e]=t};i.prototype.toNode=function(){var e=document.createElementNS("http://www.w3.org/1998/Math/MathML",this.type);for(var t in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,t)){e.setAttribute(t,this.attributes[t])}}for(var r=0;r<this.children.length;r++){e.appendChild(this.children[r].toNode())}return e};i.prototype.toMarkup=function(){var e="<"+this.type;for(var t in this.attributes){if(Object.prototype.hasOwnProperty.call(this.attributes,t)){e+=" "+t+'="';e+=a.escape(this.attributes[t]);e+='"'}}e+=">";for(var r=0;r<this.children.length;r++){e+=this.children[r].toMarkup()}e+="</"+this.type+">";return e};function n(e){this.text=e}n.prototype.toNode=function(){return document.createTextNode(this.text)};n.prototype.toMarkup=function(){return a.escape(this.text)};t.exports={MathNode:i,TextNode:n}},{"./utils":31}],26:[function(e,t,r){"use strict";function a(e,t,r,a,i){this.type=e;this.value=t;this.mode=r;if(a&&(!i||i.lexer===a.lexer)){this.lexer=a.lexer;this.start=a.start;this.end=(i||a).end}}t.exports={ParseNode:a}},{}],27:[function(e,t,r){"use strict";var a=e("./Parser");var i=function e(t,r){if(!(typeof t==="string"||t instanceof String)){throw new TypeError("KaTeX can only parse string typed expression")}var i=new a(t,r);return i.parse()};t.exports=i},{"./Parser":11}],28:[function(e,t,r){"use strict";var a=e("./buildCommon");var i=e("./mathMLTree");var n=e("./utils");var o={widehat:"^",widetilde:"~",undertilde:"~",overleftarrow:"\u2190",underleftarrow:"\u2190",xleftarrow:"\u2190",overrightarrow:"\u2192",underrightarrow:"\u2192",xrightarrow:"\u2192",underbrace:"\u23b5",overbrace:"\u23de",overleftrightarrow:"\u2194",underleftrightarrow:"\u2194",xleftrightarrow:"\u2194",Overrightarrow:"\u21d2",xRightarrow:"\u21d2",overleftharpoon:"\u21bc",xleftharpoonup:"\u21bc",overrightharpoon:"\u21c0",xrightharpoonup:"\u21c0",xLeftarrow:"\u21d0",xLeftrightarrow:"\u21d4",xhookleftarrow:"\u21a9",xhookrightarrow:"\u21aa",xmapsto:"\u21a6",xrightharpoondown:"\u21c1",xleftharpoondown:"\u21bd",xrightleftharpoons:"\u21cc",xleftrightharpoons:"\u21cb",xtwoheadleftarrow:"\u219e",xtwoheadrightarrow:"\u21a0",xLongequal:"=",xtofrom:"\u21c4"};var s=function e(t){var r=new i.MathNode("mo",[new i.TextNode(o[t.substr(1)])]);r.setAttribute("stretchy","true");return r};var l={overleftarrow:[.522,0,"leftarrow"],underleftarrow:[.522,0,"leftarrow"],xleftarrow:[.261,.261,"leftarrow"],overrightarrow:[.522,0,"rightarrow"],underrightarrow:[.522,0,"rightarrow"],xrightarrow:[.261,.261,"rightarrow"],overbrace:[.548,0,"overbrace"],underbrace:[.548,0,"underbrace"],overleftrightarrow:[.522,0,"leftrightarrow"],underleftrightarrow:[.522,0,"leftrightarrow"],xleftrightarrow:[.261,.261,"leftrightarrow"],Overrightarrow:[.56,0,"doublerightarrow"],xLeftarrow:[.28,.28,"doubleleftarrow"],xRightarrow:[.28,.28,"doublerightarrow"],xLeftrightarrow:[.28,.28,"doubleleftrightarrow"],overleftharpoon:[.522,0,"leftharpoon"],overrightharpoon:[.522,0,"rightharpoon"],xleftharpoonup:[.261,.261,"leftharpoon"],xrightharpoonup:[.261,.261,"rightharpoon"],xhookleftarrow:[.261,.261,"hookleftarrow"],xhookrightarrow:[.261,.261,"hookrightarrow"],overlinesegment:[.414,0,"linesegment"],underlinesegment:[.414,0,"linesegment"],xmapsto:[.261,.261,"mapsto"],xrightharpoondown:[.261,.261,"rightharpoondown"],xleftharpoondown:[.261,.261,"leftharpoondown"],xrightleftharpoons:[.358,.358,"rightleftharpoons"],xleftrightharpoons:[.358,.358,"leftrightharpoons"],overgroup:[.342,0,"overgroup"],undergroup:[.342,0,"undergroup"],xtwoheadleftarrow:[.167,.167,"twoheadleftarrow"],xtwoheadrightarrow:[.167,.167,"twoheadrightarrow"],xLongequal:[.167,.167,"longequal"],xtofrom:[.264,.264,"tofrom"]};var u=function e(t,r){var i=t.value.label.substr(1);var o=0;var s=0;var u=["stretchy"];var h="";if(n.contains(["widehat","widetilde","undertilde"],i)){var p=t.value.value.length;if(p>5){o=.312;h=(i==="widehat"?"widehat":"tilde")+"4"}else{var c=[1,1,2,2,3,3][p];if(i==="widehat"){o=[0,.24,.3,.3,.36,.36][p];h="widehat"+c}else{o=[0,.26,.3,.3,.34,.34][p];h="tilde"+c}}}else{var v=l[i];o=v[0];s=v[1];h=v[2];if(i.substr(0,1)==="x"){u.push("x-arrow")}}var f=void 0;if(r.color){u.push(h);u.push("mask");u.push(h+"-mask");f=a.makeSpan(u,[],r);f.style.backgroundColor=r.color}else{u.push(h);f=a.makeSpan(u,[],r)}f.height=o;f.depth=s;f.maxFontSize=1;return f};var h=function e(t,r,i,n,o){var s=a.makeSpan(["stretchy",i],[],o);if(o.color){if(i==="fbox"){s.style.borderColor=o.color}else{s.classes[2]=i+"-mask";s.style.backgroundColor=o.color}}s.height=t.height+t.depth+2*n;s.style.height=s.height+"em";if(/cancel/.test(i)&&r){s.maxFontSize=1.2}else{s.maxFontSize=1}return s};t.exports={encloseSpan:h,mathMLnode:s,svgSpan:u}},{"./buildCommon":14,"./mathMLTree":25,"./utils":31}],29:[function(e,t,r){"use strict";t.exports={math:{},text:{}};function a(e,r,a,i,n){t.exports[e][n]={font:r,group:a,replace:i}}var i="math";var n="text";var o="main";var s="ams";var l="accent";var u="bin";var h="close";var p="inner";var c="mathord";var v="op";var f="open";var m="punct";var d="rel";var g="spacing";var y="textord";a(i,o,d,"\u2261","\\equiv");a(i,o,d,"\u227a","\\prec");a(i,o,d,"\u227b","\\succ");a(i,o,d,"\u223c","\\sim");a(i,o,d,"\u22a5","\\perp");a(i,o,d,"\u2aaf","\\preceq");a(i,o,d,"\u2ab0","\\succeq");a(i,o,d,"\u2243","\\simeq");a(i,o,d,"\u2223","\\mid");a(i,o,d,"\u226a","\\ll");a(i,o,d,"\u226b","\\gg");a(i,o,d,"\u224d","\\asymp");a(i,o,d,"\u2225","\\parallel");a(i,o,d,"\u22c8","\\bowtie");a(i,o,d,"\u2323","\\smile");a(i,o,d,"\u2291","\\sqsubseteq");a(i,o,d,"\u2292","\\sqsupseteq");a(i,o,d,"\u2250","\\doteq");a(i,o,d,"\u2322","\\frown");a(i,o,d,"\u220b","\\ni");a(i,o,d,"\u221d","\\propto");a(i,o,d,"\u22a2","\\vdash");a(i,o,d,"\u22a3","\\dashv");a(i,o,d,"\u220b","\\owns");
a(i,o,m,".","\\ldotp");a(i,o,m,"\u22c5","\\cdotp");a(i,o,y,"#","\\#");a(n,o,y,"#","\\#");a(i,o,y,"&","\\&");a(n,o,y,"&","\\&");a(i,o,y,"\u2135","\\aleph");a(i,o,y,"\u2200","\\forall");a(i,o,y,"\u210f","\\hbar");a(i,o,y,"\u2203","\\exists");a(i,o,y,"\u2207","\\nabla");a(i,o,y,"\u266d","\\flat");a(i,o,y,"\u2113","\\ell");a(i,o,y,"\u266e","\\natural");a(i,o,y,"\u2663","\\clubsuit");a(i,o,y,"\u2118","\\wp");a(i,o,y,"\u266f","\\sharp");a(i,o,y,"\u2662","\\diamondsuit");a(i,o,y,"\u211c","\\Re");a(i,o,y,"\u2661","\\heartsuit");a(i,o,y,"\u2111","\\Im");a(i,o,y,"\u2660","\\spadesuit");a(i,o,y,"\u2020","\\dag");a(n,o,y,"\u2020","\\dag");a(n,o,y,"\u2020","\\textdagger");a(i,o,y,"\u2021","\\ddag");a(n,o,y,"\u2021","\\ddag");a(n,o,y,"\u2020","\\textdaggerdbl");a(i,o,h,"\u23b1","\\rmoustache");a(i,o,f,"\u23b0","\\lmoustache");a(i,o,h,"\u27ef","\\rgroup");a(i,o,f,"\u27ee","\\lgroup");a(i,o,u,"\u2213","\\mp");a(i,o,u,"\u2296","\\ominus");a(i,o,u,"\u228e","\\uplus");a(i,o,u,"\u2293","\\sqcap");a(i,o,u,"\u2217","\\ast");a(i,o,u,"\u2294","\\sqcup");a(i,o,u,"\u25ef","\\bigcirc");a(i,o,u,"\u2219","\\bullet");a(i,o,u,"\u2021","\\ddagger");a(i,o,u,"\u2240","\\wr");a(i,o,u,"\u2a3f","\\amalg");a(i,o,d,"\u27f5","\\longleftarrow");a(i,o,d,"\u21d0","\\Leftarrow");a(i,o,d,"\u27f8","\\Longleftarrow");a(i,o,d,"\u27f6","\\longrightarrow");a(i,o,d,"\u21d2","\\Rightarrow");a(i,o,d,"\u27f9","\\Longrightarrow");a(i,o,d,"\u2194","\\leftrightarrow");a(i,o,d,"\u27f7","\\longleftrightarrow");a(i,o,d,"\u21d4","\\Leftrightarrow");a(i,o,d,"\u27fa","\\Longleftrightarrow");a(i,o,d,"\u21a6","\\mapsto");a(i,o,d,"\u27fc","\\longmapsto");a(i,o,d,"\u2197","\\nearrow");a(i,o,d,"\u21a9","\\hookleftarrow");a(i,o,d,"\u21aa","\\hookrightarrow");a(i,o,d,"\u2198","\\searrow");a(i,o,d,"\u21bc","\\leftharpoonup");a(i,o,d,"\u21c0","\\rightharpoonup");a(i,o,d,"\u2199","\\swarrow");a(i,o,d,"\u21bd","\\leftharpoondown");a(i,o,d,"\u21c1","\\rightharpoondown");a(i,o,d,"\u2196","\\nwarrow");a(i,o,d,"\u21cc","\\rightleftharpoons");a(i,s,d,"\u226e","\\nless");a(i,s,d,"\ue010","\\nleqslant");a(i,s,d,"\ue011","\\nleqq");a(i,s,d,"\u2a87","\\lneq");a(i,s,d,"\u2268","\\lneqq");a(i,s,d,"\ue00c","\\lvertneqq");a(i,s,d,"\u22e6","\\lnsim");a(i,s,d,"\u2a89","\\lnapprox");a(i,s,d,"\u2280","\\nprec");a(i,s,d,"\u22e0","\\npreceq");a(i,s,d,"\u22e8","\\precnsim");a(i,s,d,"\u2ab9","\\precnapprox");a(i,s,d,"\u2241","\\nsim");a(i,s,d,"\ue006","\\nshortmid");a(i,s,d,"\u2224","\\nmid");a(i,s,d,"\u22ac","\\nvdash");a(i,s,d,"\u22ad","\\nvDash");a(i,s,d,"\u22ea","\\ntriangleleft");a(i,s,d,"\u22ec","\\ntrianglelefteq");a(i,s,d,"\u228a","\\subsetneq");a(i,s,d,"\ue01a","\\varsubsetneq");a(i,s,d,"\u2acb","\\subsetneqq");a(i,s,d,"\ue017","\\varsubsetneqq");a(i,s,d,"\u226f","\\ngtr");a(i,s,d,"\ue00f","\\ngeqslant");a(i,s,d,"\ue00e","\\ngeqq");a(i,s,d,"\u2a88","\\gneq");a(i,s,d,"\u2269","\\gneqq");a(i,s,d,"\ue00d","\\gvertneqq");a(i,s,d,"\u22e7","\\gnsim");a(i,s,d,"\u2a8a","\\gnapprox");a(i,s,d,"\u2281","\\nsucc");a(i,s,d,"\u22e1","\\nsucceq");a(i,s,d,"\u22e9","\\succnsim");a(i,s,d,"\u2aba","\\succnapprox");a(i,s,d,"\u2246","\\ncong");a(i,s,d,"\ue007","\\nshortparallel");a(i,s,d,"\u2226","\\nparallel");a(i,s,d,"\u22af","\\nVDash");a(i,s,d,"\u22eb","\\ntriangleright");a(i,s,d,"\u22ed","\\ntrianglerighteq");a(i,s,d,"\ue018","\\nsupseteqq");a(i,s,d,"\u228b","\\supsetneq");a(i,s,d,"\ue01b","\\varsupsetneq");a(i,s,d,"\u2acc","\\supsetneqq");a(i,s,d,"\ue019","\\varsupsetneqq");a(i,s,d,"\u22ae","\\nVdash");a(i,s,d,"\u2ab5","\\precneqq");a(i,s,d,"\u2ab6","\\succneqq");a(i,s,d,"\ue016","\\nsubseteqq");a(i,s,u,"\u22b4","\\unlhd");a(i,s,u,"\u22b5","\\unrhd");a(i,s,d,"\u219a","\\nleftarrow");a(i,s,d,"\u219b","\\nrightarrow");a(i,s,d,"\u21cd","\\nLeftarrow");a(i,s,d,"\u21cf","\\nRightarrow");a(i,s,d,"\u21ae","\\nleftrightarrow");a(i,s,d,"\u21ce","\\nLeftrightarrow");a(i,s,d,"\u25b3","\\vartriangle");a(i,s,y,"\u210f","\\hslash");a(i,s,y,"\u25bd","\\triangledown");a(i,s,y,"\u25ca","\\lozenge");a(i,s,y,"\u24c8","\\circledS");a(i,s,y,"\xae","\\circledR");a(n,s,y,"\xae","\\circledR");a(i,s,y,"\u2221","\\measuredangle");a(i,s,y,"\u2204","\\nexists");a(i,s,y,"\u2127","\\mho");a(i,s,y,"\u2132","\\Finv");a(i,s,y,"\u2141","\\Game");a(i,s,y,"k","\\Bbbk");a(i,s,y,"\u2035","\\backprime");a(i,s,y,"\u25b2","\\blacktriangle");a(i,s,y,"\u25bc","\\blacktriangledown");a(i,s,y,"\u25a0","\\blacksquare");a(i,s,y,"\u29eb","\\blacklozenge");a(i,s,y,"\u2605","\\bigstar");a(i,s,y,"\u2222","\\sphericalangle");a(i,s,y,"\u2201","\\complement");a(i,s,y,"\xf0","\\eth");a(i,s,y,"\u2571","\\diagup");a(i,s,y,"\u2572","\\diagdown");a(i,s,y,"\u25a1","\\square");a(i,s,y,"\u25a1","\\Box");a(i,s,y,"\u25ca","\\Diamond");a(i,s,y,"\xa5","\\yen");a(i,s,y,"\u2713","\\checkmark");a(n,s,y,"\u2713","\\checkmark");a(i,s,y,"\u2136","\\beth");a(i,s,y,"\u2138","\\daleth");a(i,s,y,"\u2137","\\gimel");a(i,s,y,"\u03dd","\\digamma");a(i,s,y,"\u03f0","\\varkappa");a(i,s,f,"\u250c","\\ulcorner");a(i,s,h,"\u2510","\\urcorner");a(i,s,f,"\u2514","\\llcorner");a(i,s,h,"\u2518","\\lrcorner");a(i,s,d,"\u2266","\\leqq");a(i,s,d,"\u2a7d","\\leqslant");a(i,s,d,"\u2a95","\\eqslantless");a(i,s,d,"\u2272","\\lesssim");a(i,s,d,"\u2a85","\\lessapprox");a(i,s,d,"\u224a","\\approxeq");a(i,s,u,"\u22d6","\\lessdot");a(i,s,d,"\u22d8","\\lll");a(i,s,d,"\u2276","\\lessgtr");a(i,s,d,"\u22da","\\lesseqgtr");a(i,s,d,"\u2a8b","\\lesseqqgtr");a(i,s,d,"\u2251","\\doteqdot");a(i,s,d,"\u2253","\\risingdotseq");a(i,s,d,"\u2252","\\fallingdotseq");a(i,s,d,"\u223d","\\backsim");a(i,s,d,"\u22cd","\\backsimeq");a(i,s,d,"\u2ac5","\\subseteqq");a(i,s,d,"\u22d0","\\Subset");a(i,s,d,"\u228f","\\sqsubset");a(i,s,d,"\u227c","\\preccurlyeq");a(i,s,d,"\u22de","\\curlyeqprec");a(i,s,d,"\u227e","\\precsim");a(i,s,d,"\u2ab7","\\precapprox");a(i,s,d,"\u22b2","\\vartriangleleft");a(i,s,d,"\u22b4","\\trianglelefteq");a(i,s,d,"\u22a8","\\vDash");a(i,s,d,"\u22aa","\\Vvdash");a(i,s,d,"\u2323","\\smallsmile");a(i,s,d,"\u2322","\\smallfrown");a(i,s,d,"\u224f","\\bumpeq");a(i,s,d,"\u224e","\\Bumpeq");a(i,s,d,"\u2267","\\geqq");a(i,s,d,"\u2a7e","\\geqslant");a(i,s,d,"\u2a96","\\eqslantgtr");a(i,s,d,"\u2273","\\gtrsim");a(i,s,d,"\u2a86","\\gtrapprox");a(i,s,u,"\u22d7","\\gtrdot");a(i,s,d,"\u22d9","\\ggg");a(i,s,d,"\u2277","\\gtrless");a(i,s,d,"\u22db","\\gtreqless");a(i,s,d,"\u2a8c","\\gtreqqless");a(i,s,d,"\u2256","\\eqcirc");a(i,s,d,"\u2257","\\circeq");a(i,s,d,"\u225c","\\triangleq");a(i,s,d,"\u223c","\\thicksim");a(i,s,d,"\u2248","\\thickapprox");a(i,s,d,"\u2ac6","\\supseteqq");a(i,s,d,"\u22d1","\\Supset");a(i,s,d,"\u2290","\\sqsupset");a(i,s,d,"\u227d","\\succcurlyeq");a(i,s,d,"\u22df","\\curlyeqsucc");a(i,s,d,"\u227f","\\succsim");a(i,s,d,"\u2ab8","\\succapprox");a(i,s,d,"\u22b3","\\vartriangleright");a(i,s,d,"\u22b5","\\trianglerighteq");a(i,s,d,"\u22a9","\\Vdash");a(i,s,d,"\u2223","\\shortmid");a(i,s,d,"\u2225","\\shortparallel");a(i,s,d,"\u226c","\\between");a(i,s,d,"\u22d4","\\pitchfork");a(i,s,d,"\u221d","\\varpropto");a(i,s,d,"\u25c0","\\blacktriangleleft");a(i,s,d,"\u2234","\\therefore");a(i,s,d,"\u220d","\\backepsilon");a(i,s,d,"\u25b6","\\blacktriangleright");a(i,s,d,"\u2235","\\because");a(i,s,d,"\u22d8","\\llless");a(i,s,d,"\u22d9","\\gggtr");a(i,s,u,"\u22b2","\\lhd");a(i,s,u,"\u22b3","\\rhd");a(i,s,d,"\u2242","\\eqsim");a(i,o,d,"\u22c8","\\Join");a(i,s,d,"\u2251","\\Doteq");a(i,s,u,"\u2214","\\dotplus");a(i,s,u,"\u2216","\\smallsetminus");a(i,s,u,"\u22d2","\\Cap");a(i,s,u,"\u22d3","\\Cup");a(i,s,u,"\u2a5e","\\doublebarwedge");a(i,s,u,"\u229f","\\boxminus");a(i,s,u,"\u229e","\\boxplus");a(i,s,u,"\u22c7","\\divideontimes");a(i,s,u,"\u22c9","\\ltimes");a(i,s,u,"\u22ca","\\rtimes");a(i,s,u,"\u22cb","\\leftthreetimes");a(i,s,u,"\u22cc","\\rightthreetimes");a(i,s,u,"\u22cf","\\curlywedge");a(i,s,u,"\u22ce","\\curlyvee");a(i,s,u,"\u229d","\\circleddash");a(i,s,u,"\u229b","\\circledast");a(i,s,u,"\u22c5","\\centerdot");a(i,s,u,"\u22ba","\\intercal");a(i,s,u,"\u22d2","\\doublecap");a(i,s,u,"\u22d3","\\doublecup");a(i,s,u,"\u22a0","\\boxtimes");a(i,s,d,"\u21e2","\\dashrightarrow");a(i,s,d,"\u21e0","\\dashleftarrow");a(i,s,d,"\u21c7","\\leftleftarrows");a(i,s,d,"\u21c6","\\leftrightarrows");a(i,s,d,"\u21da","\\Lleftarrow");a(i,s,d,"\u219e","\\twoheadleftarrow");a(i,s,d,"\u21a2","\\leftarrowtail");a(i,s,d,"\u21ab","\\looparrowleft");a(i,s,d,"\u21cb","\\leftrightharpoons");a(i,s,d,"\u21b6","\\curvearrowleft");a(i,s,d,"\u21ba","\\circlearrowleft");a(i,s,d,"\u21b0","\\Lsh");a(i,s,d,"\u21c8","\\upuparrows");a(i,s,d,"\u21bf","\\upharpoonleft");a(i,s,d,"\u21c3","\\downharpoonleft");a(i,s,d,"\u22b8","\\multimap");a(i,s,d,"\u21ad","\\leftrightsquigarrow");a(i,s,d,"\u21c9","\\rightrightarrows");a(i,s,d,"\u21c4","\\rightleftarrows");a(i,s,d,"\u21a0","\\twoheadrightarrow");a(i,s,d,"\u21a3","\\rightarrowtail");a(i,s,d,"\u21ac","\\looparrowright");a(i,s,d,"\u21b7","\\curvearrowright");a(i,s,d,"\u21bb","\\circlearrowright");a(i,s,d,"\u21b1","\\Rsh");a(i,s,d,"\u21ca","\\downdownarrows");a(i,s,d,"\u21be","\\upharpoonright");a(i,s,d,"\u21c2","\\downharpoonright");a(i,s,d,"\u21dd","\\rightsquigarrow");a(i,s,d,"\u21dd","\\leadsto");a(i,s,d,"\u21db","\\Rrightarrow");a(i,s,d,"\u21be","\\restriction");a(i,o,y,"\u2018","`");a(i,o,y,"$","\\$");a(n,o,y,"$","\\$");a(n,o,y,"$","\\textdollar");a(i,o,y,"%","\\%");a(n,o,y,"%","\\%");a(i,o,y,"_","\\_");a(n,o,y,"_","\\_");a(n,o,y,"_","\\textunderscore");a(i,o,y,"\u2220","\\angle");a(i,o,y,"\u221e","\\infty");a(i,o,y,"\u2032","\\prime");a(i,o,y,"\u25b3","\\triangle");a(i,o,y,"\u0393","\\Gamma");a(i,o,y,"\u0394","\\Delta");a(i,o,y,"\u0398","\\Theta");a(i,o,y,"\u039b","\\Lambda");a(i,o,y,"\u039e","\\Xi");a(i,o,y,"\u03a0","\\Pi");a(i,o,y,"\u03a3","\\Sigma");a(i,o,y,"\u03a5","\\Upsilon");a(i,o,y,"\u03a6","\\Phi");a(i,o,y,"\u03a8","\\Psi");a(i,o,y,"\u03a9","\\Omega");a(i,o,y,"\xac","\\neg");a(i,o,y,"\xac","\\lnot");a(i,o,y,"\u22a4","\\top");a(i,o,y,"\u22a5","\\bot");a(i,o,y,"\u2205","\\emptyset");a(i,s,y,"\u2205","\\varnothing");a(i,o,c,"\u03b1","\\alpha");a(i,o,c,"\u03b2","\\beta");a(i,o,c,"\u03b3","\\gamma");a(i,o,c,"\u03b4","\\delta");a(i,o,c,"\u03f5","\\epsilon");a(i,o,c,"\u03b6","\\zeta");a(i,o,c,"\u03b7","\\eta");a(i,o,c,"\u03b8","\\theta");a(i,o,c,"\u03b9","\\iota");a(i,o,c,"\u03ba","\\kappa");a(i,o,c,"\u03bb","\\lambda");a(i,o,c,"\u03bc","\\mu");a(i,o,c,"\u03bd","\\nu");a(i,o,c,"\u03be","\\xi");a(i,o,c,"o","\\omicron");a(i,o,c,"\u03c0","\\pi");a(i,o,c,"\u03c1","\\rho");a(i,o,c,"\u03c3","\\sigma");a(i,o,c,"\u03c4","\\tau");a(i,o,c,"\u03c5","\\upsilon");a(i,o,c,"\u03d5","\\phi");a(i,o,c,"\u03c7","\\chi");a(i,o,c,"\u03c8","\\psi");a(i,o,c,"\u03c9","\\omega");a(i,o,c,"\u03b5","\\varepsilon");a(i,o,c,"\u03d1","\\vartheta");a(i,o,c,"\u03d6","\\varpi");a(i,o,c,"\u03f1","\\varrho");a(i,o,c,"\u03c2","\\varsigma");a(i,o,c,"\u03c6","\\varphi");a(i,o,u,"\u2217","*");a(i,o,u,"+","+");a(i,o,u,"\u2212","-");a(i,o,u,"\u22c5","\\cdot");a(i,o,u,"\u2218","\\circ");a(i,o,u,"\xf7","\\div");a(i,o,u,"\xb1","\\pm");a(i,o,u,"\xd7","\\times");a(i,o,u,"\u2229","\\cap");a(i,o,u,"\u222a","\\cup");a(i,o,u,"\u2216","\\setminus");a(i,o,u,"\u2227","\\land");a(i,o,u,"\u2228","\\lor");a(i,o,u,"\u2227","\\wedge");a(i,o,u,"\u2228","\\vee");a(i,o,y,"\u221a","\\surd");a(i,o,f,"(","(");a(i,o,f,"[","[");a(i,o,f,"\u27e8","\\langle");a(i,o,f,"\u2223","\\lvert");a(i,o,f,"\u2225","\\lVert");a(i,o,h,")",")");a(i,o,h,"]","]");a(i,o,h,"?","?");a(i,o,h,"!","!");a(i,o,h,"\u27e9","\\rangle");a(i,o,h,"\u2223","\\rvert");a(i,o,h,"\u2225","\\rVert");a(i,o,d,"=","=");a(i,o,d,"<","<");a(i,o,d,">",">");a(i,o,d,":",":");a(i,o,d,"\u2248","\\approx");a(i,o,d,"\u2245","\\cong");a(i,o,d,"\u2265","\\ge");a(i,o,d,"\u2265","\\geq");a(i,o,d,"\u2190","\\gets");a(i,o,d,">","\\gt");a(i,o,d,"\u2208","\\in");a(i,o,d,"\u2209","\\notin");a(i,o,d,"\u2282","\\subset");a(i,o,d,"\u2283","\\supset");a(i,o,d,"\u2286","\\subseteq");a(i,o,d,"\u2287","\\supseteq");a(i,s,d,"\u2288","\\nsubseteq");a(i,s,d,"\u2289","\\nsupseteq");a(i,o,d,"\u22a8","\\models");a(i,o,d,"\u2190","\\leftarrow");a(i,o,d,"\u2264","\\le");a(i,o,d,"\u2264","\\leq");a(i,o,d,"<","\\lt");a(i,o,d,"\u2260","\\ne");a(i,o,d,"\u2260","\\neq");a(i,o,d,"\u2192","\\rightarrow");a(i,o,d,"\u2192","\\to");a(i,s,d,"\u2271","\\ngeq");a(i,s,d,"\u2270","\\nleq");a(i,o,g,null,"\\!");a(i,o,g,"\xa0","\\ ");a(i,o,g,"\xa0","~");a(i,o,g,null,"\\,");a(i,o,g,null,"\\:");a(i,o,g,null,"\\;");a(i,o,g,null,"\\enspace");a(i,o,g,null,"\\qquad");a(i,o,g,null,"\\quad");a(i,o,g,"\xa0","\\space");a(i,o,m,",",",");a(i,o,m,";",";");a(i,o,m,":","\\colon");a(i,s,u,"\u22bc","\\barwedge");a(i,s,u,"\u22bb","\\veebar");a(i,o,u,"\u2299","\\odot");a(i,o,u,"\u2295","\\oplus");a(i,o,u,"\u2297","\\otimes");a(i,o,y,"\u2202","\\partial");a(i,o,u,"\u2298","\\oslash");a(i,s,u,"\u229a","\\circledcirc");a(i,s,u,"\u22a1","\\boxdot");a(i,o,u,"\u25b3","\\bigtriangleup");a(i,o,u,"\u25bd","\\bigtriangledown");a(i,o,u,"\u2020","\\dagger");a(i,o,u,"\u22c4","\\diamond");a(i,o,u,"\u22c6","\\star");a(i,o,u,"\u25c3","\\triangleleft");a(i,o,u,"\u25b9","\\triangleright");a(i,o,f,"{","\\{");a(n,o,y,"{","\\{");a(n,o,y,"{","\\textbraceleft");a(i,o,h,"}","\\}");a(n,o,y,"}","\\}");a(n,o,y,"}","\\textbraceright");a(i,o,f,"{","\\lbrace");a(i,o,h,"}","\\rbrace");a(i,o,f,"[","\\lbrack");a(i,o,h,"]","\\rbrack");a(n,o,y,"<","\\textless");a(n,o,y,">","\\textgreater");a(i,o,f,"\u230a","\\lfloor");a(i,o,h,"\u230b","\\rfloor");a(i,o,f,"\u2308","\\lceil");a(i,o,h,"\u2309","\\rceil");a(i,o,y,"\\","\\backslash");a(i,o,y,"\u2223","|");a(i,o,y,"\u2223","\\vert");a(n,o,y,"|","\\textbar");a(i,o,y,"\u2225","\\|");a(i,o,y,"\u2225","\\Vert");a(n,o,y,"\u2225","\\textbardbl");a(i,o,d,"\u2191","\\uparrow");a(i,o,d,"\u21d1","\\Uparrow");a(i,o,d,"\u2193","\\downarrow");a(i,o,d,"\u21d3","\\Downarrow");a(i,o,d,"\u2195","\\updownarrow");a(i,o,d,"\u21d5","\\Updownarrow");a(i,o,v,"\u2210","\\coprod");a(i,o,v,"\u22c1","\\bigvee");a(i,o,v,"\u22c0","\\bigwedge");a(i,o,v,"\u2a04","\\biguplus");a(i,o,v,"\u22c2","\\bigcap");a(i,o,v,"\u22c3","\\bigcup");a(i,o,v,"\u222b","\\int");a(i,o,v,"\u222b","\\intop");a(i,o,v,"\u222c","\\iint");a(i,o,v,"\u222d","\\iiint");a(i,o,v,"\u220f","\\prod");a(i,o,v,"\u2211","\\sum");a(i,o,v,"\u2a02","\\bigotimes");a(i,o,v,"\u2a01","\\bigoplus");a(i,o,v,"\u2a00","\\bigodot");a(i,o,v,"\u222e","\\oint");a(i,o,v,"\u2a06","\\bigsqcup");a(i,o,v,"\u222b","\\smallint");a(n,o,p,"\u2026","\\textellipsis");a(i,o,p,"\u2026","\\mathellipsis");a(n,o,p,"\u2026","\\ldots");a(i,o,p,"\u2026","\\ldots");a(i,o,p,"\u22ef","\\cdots");a(i,o,p,"\u22f1","\\ddots");a(i,o,y,"\u22ee","\\vdots");a(i,o,l,"\xb4","\\acute");a(i,o,l,"`","\\grave");a(i,o,l,"\xa8","\\ddot");a(i,o,l,"~","\\tilde");a(i,o,l,"\xaf","\\bar");a(i,o,l,"\u02d8","\\breve");a(i,o,l,"\u02c7","\\check");a(i,o,l,"^","\\hat");a(i,o,l,"\u20d7","\\vec");a(i,o,l,"\u02d9","\\dot");a(i,o,c,"\u0131","\\imath");a(i,o,c,"\u0237","\\jmath");a(n,o,y,"\u2013","--");a(n,o,y,"\u2013","\\textendash");a(n,o,y,"\u2014","---");a(n,o,y,"\u2014","\\textemdash");a(n,o,y,"\u2018","`");a(n,o,y,"\u2018","\\textquoteleft");a(n,o,y,"\u2019","'");a(n,o,y,"\u2019","\\textquoteright");a(n,o,y,"\u201c","``");a(n,o,y,"\u201c","\\textquotedblleft");a(n,o,y,"\u201d","''");a(n,o,y,"\u201d","\\textquotedblright");a(i,o,y,"\xb0","\\degree");a(n,o,y,"\xb0","\\degree");a(i,o,c,"\xa3","\\pounds");a(i,o,c,"\xa3","\\mathsterling");a(n,o,c,"\xa3","\\pounds");a(n,o,c,"\xa3","\\textsterling");a(i,s,y,"\u2720","\\maltese");a(n,s,y,"\u2720","\\maltese");a(n,o,g,"\xa0","\\ ");a(n,o,g,"\xa0"," ");a(n,o,g,"\xa0","~");var x='0123456789/@."';for(var b=0;b<x.length;b++){var w=x.charAt(b);a(i,o,y,w,w)}var k='0123456789!@*()-=+[]<>|";:?/.,';for(var z=0;z<k.length;z++){var M=k.charAt(z);a(n,o,y,M,M)}var S="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";for(var A=0;A<S.length;A++){var N=S.charAt(A);a(i,o,c,N,N);a(n,o,y,N,N)}for(var T=192;T<=214;T++){var q=String.fromCharCode(T);a(n,o,y,q,q)}for(var C=216;C<=246;C++){var E=String.fromCharCode(C);a(n,o,y,E,E)}for(var O=248;O<=255;O++){var R=String.fromCharCode(O);a(n,o,y,R,R)}for(var L=1040;L<=1103;L++){var D=String.fromCharCode(L);a(n,o,y,D,D)}a(n,o,y,"\u2013","\u2013");a(n,o,y,"\u2014","\u2014");a(n,o,y,"\u2018","\u2018");a(n,o,y,"\u2019","\u2019");a(n,o,y,"\u201c","\u201c");a(n,o,y,"\u201d","\u201d")},{}],30:[function(e,t,r){"use strict";var a=/[\uAC00-\uD7AF]/;var i=/[\u3040-\u309F]|[\u30A0-\u30FF]|[\u4E00-\u9FAF]|[\uAC00-\uD7AF]/;t.exports={cjkRegex:i,hangulRegex:a}},{}],31:[function(e,t,r){"use strict";var a=Array.prototype.indexOf;var i=function e(t,r){if(t==null){return-1}if(a&&t.indexOf===a){return t.indexOf(r)}var i=t.length;for(var n=0;n<i;n++){if(t[n]===r){return n}}return-1};var n=function e(t,r){return i(t,r)!==-1};var o=function e(t,r){return t===undefined?r:t};var s=/([A-Z])/g;var l=function e(t){return t.replace(s,"-$1").toLowerCase()};var u={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"};var h=/[&><"']/g;function p(e){return u[e]}function c(e){return(""+e).replace(h,p)}var v=void 0;if(typeof document!=="undefined"){var f=document.createElement("span");if("textContent"in f){v=function e(t,r){t.textContent=r}}else{v=function e(t,r){t.innerText=r}}}function m(e){v(e,"")}t.exports={contains:n,deflt:o,escape:c,hyphenate:l,indexOf:i,setTextContent:v,clearNode:m}},{}]},{},[1])(1)});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(require,module,exports){
/*global define:false */
/**
 * Copyright 2016 Craig Campbell
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Mousetrap is a simple keyboard shortcut library for Javascript with
 * no external dependencies
 *
 * @version 1.6.0
 * @url craig.is/killing/mice
 */
(function(window, document, undefined) {

    // Check if mousetrap is used inside browser, if not, return
    if (!window) {
        return;
    }

    /**
     * mapping of special keycodes to their corresponding keys
     *
     * everything in this dictionary cannot use keypress events
     * so it has to be here to map to the correct keycodes for
     * keyup/keydown events
     *
     * @type {Object}
     */
    var _MAP = {
        8: 'backspace',
        9: 'tab',
        13: 'enter',
        16: 'shift',
        17: 'ctrl',
        18: 'alt',
        20: 'capslock',
        27: 'esc',
        32: 'space',
        33: 'pageup',
        34: 'pagedown',
        35: 'end',
        36: 'home',
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down',
        45: 'ins',
        46: 'del',
        91: 'meta',
        93: 'meta',
        224: 'meta'
    };

    /**
     * mapping for special characters so they can support
     *
     * this dictionary is only used incase you want to bind a
     * keyup or keydown event to one of these keys
     *
     * @type {Object}
     */
    var _KEYCODE_MAP = {
        106: '*',
        107: '+',
        109: '-',
        110: '.',
        111 : '/',
        186: ';',
        187: '=',
        188: ',',
        189: '-',
        190: '.',
        191: '/',
        192: '`',
        219: '[',
        220: '\\',
        221: ']',
        222: '\''
    };

    /**
     * this is a mapping of keys that require shift on a US keypad
     * back to the non shift equivelents
     *
     * this is so you can use keyup events with these keys
     *
     * note that this will only work reliably on US keyboards
     *
     * @type {Object}
     */
    var _SHIFT_MAP = {
        '~': '`',
        '!': '1',
        '@': '2',
        '#': '3',
        '$': '4',
        '%': '5',
        '^': '6',
        '&': '7',
        '*': '8',
        '(': '9',
        ')': '0',
        '_': '-',
        '+': '=',
        ':': ';',
        '\"': '\'',
        '<': ',',
        '>': '.',
        '?': '/',
        '|': '\\'
    };

    /**
     * this is a list of special strings you can use to map
     * to modifier keys when you specify your keyboard shortcuts
     *
     * @type {Object}
     */
    var _SPECIAL_ALIASES = {
        'option': 'alt',
        'command': 'meta',
        'return': 'enter',
        'escape': 'esc',
        'plus': '+',
        'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'
    };

    /**
     * variable to store the flipped version of _MAP from above
     * needed to check if we should use keypress or not when no action
     * is specified
     *
     * @type {Object|undefined}
     */
    var _REVERSE_MAP;

    /**
     * loop through the f keys, f1 to f19 and add them to the map
     * programatically
     */
    for (var i = 1; i < 20; ++i) {
        _MAP[111 + i] = 'f' + i;
    }

    /**
     * loop through to map numbers on the numeric keypad
     */
    for (i = 0; i <= 9; ++i) {
        _MAP[i + 96] = i;
    }

    /**
     * cross browser add event method
     *
     * @param {Element|HTMLDocument} object
     * @param {string} type
     * @param {Function} callback
     * @returns void
     */
    function _addEvent(object, type, callback) {
        if (object.addEventListener) {
            object.addEventListener(type, callback, false);
            return;
        }

        object.attachEvent('on' + type, callback);
    }

    /**
     * takes the event and returns the key character
     *
     * @param {Event} e
     * @return {string}
     */
    function _characterFromEvent(e) {

        // for keypress events we should return the character as is
        if (e.type == 'keypress') {
            var character = String.fromCharCode(e.which);

            // if the shift key is not pressed then it is safe to assume
            // that we want the character to be lowercase.  this means if
            // you accidentally have caps lock on then your key bindings
            // will continue to work
            //
            // the only side effect that might not be desired is if you
            // bind something like 'A' cause you want to trigger an
            // event when capital A is pressed caps lock will no longer
            // trigger the event.  shift+a will though.
            if (!e.shiftKey) {
                character = character.toLowerCase();
            }

            return character;
        }

        // for non keypress events the special maps are needed
        if (_MAP[e.which]) {
            return _MAP[e.which];
        }

        if (_KEYCODE_MAP[e.which]) {
            return _KEYCODE_MAP[e.which];
        }

        // if it is not in the special map

        // with keydown and keyup events the character seems to always
        // come in as an uppercase character whether you are pressing shift
        // or not.  we should make sure it is always lowercase for comparisons
        return String.fromCharCode(e.which).toLowerCase();
    }

    /**
     * checks if two arrays are equal
     *
     * @param {Array} modifiers1
     * @param {Array} modifiers2
     * @returns {boolean}
     */
    function _modifiersMatch(modifiers1, modifiers2) {
        return modifiers1.sort().join(',') === modifiers2.sort().join(',');
    }

    /**
     * takes a key event and figures out what the modifiers are
     *
     * @param {Event} e
     * @returns {Array}
     */
    function _eventModifiers(e) {
        var modifiers = [];

        if (e.shiftKey) {
            modifiers.push('shift');
        }

        if (e.altKey) {
            modifiers.push('alt');
        }

        if (e.ctrlKey) {
            modifiers.push('ctrl');
        }

        if (e.metaKey) {
            modifiers.push('meta');
        }

        return modifiers;
    }

    /**
     * prevents default for this event
     *
     * @param {Event} e
     * @returns void
     */
    function _preventDefault(e) {
        if (e.preventDefault) {
            e.preventDefault();
            return;
        }

        e.returnValue = false;
    }

    /**
     * stops propogation for this event
     *
     * @param {Event} e
     * @returns void
     */
    function _stopPropagation(e) {
        if (e.stopPropagation) {
            e.stopPropagation();
            return;
        }

        e.cancelBubble = true;
    }

    /**
     * determines if the keycode specified is a modifier key or not
     *
     * @param {string} key
     * @returns {boolean}
     */
    function _isModifier(key) {
        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';
    }

    /**
     * reverses the map lookup so that we can look for specific keys
     * to see what can and can't use keypress
     *
     * @return {Object}
     */
    function _getReverseMap() {
        if (!_REVERSE_MAP) {
            _REVERSE_MAP = {};
            for (var key in _MAP) {

                // pull out the numeric keypad from here cause keypress should
                // be able to detect the keys from the character
                if (key > 95 && key < 112) {
                    continue;
                }

                if (_MAP.hasOwnProperty(key)) {
                    _REVERSE_MAP[_MAP[key]] = key;
                }
            }
        }
        return _REVERSE_MAP;
    }

    /**
     * picks the best action based on the key combination
     *
     * @param {string} key - character for key
     * @param {Array} modifiers
     * @param {string=} action passed in
     */
    function _pickBestAction(key, modifiers, action) {

        // if no action was picked in we should try to pick the one
        // that we think would work best for this key
        if (!action) {
            action = _getReverseMap()[key] ? 'keydown' : 'keypress';
        }

        // modifier keys don't work as expected with keypress,
        // switch to keydown
        if (action == 'keypress' && modifiers.length) {
            action = 'keydown';
        }

        return action;
    }

    /**
     * Converts from a string key combination to an array
     *
     * @param  {string} combination like "command+shift+l"
     * @return {Array}
     */
    function _keysFromString(combination) {
        if (combination === '+') {
            return ['+'];
        }

        combination = combination.replace(/\+{2}/g, '+plus');
        return combination.split('+');
    }

    /**
     * Gets info for a specific key combination
     *
     * @param  {string} combination key combination ("command+s" or "a" or "*")
     * @param  {string=} action
     * @returns {Object}
     */
    function _getKeyInfo(combination, action) {
        var keys;
        var key;
        var i;
        var modifiers = [];

        // take the keys from this pattern and figure out what the actual
        // pattern is all about
        keys = _keysFromString(combination);

        for (i = 0; i < keys.length; ++i) {
            key = keys[i];

            // normalize key names
            if (_SPECIAL_ALIASES[key]) {
                key = _SPECIAL_ALIASES[key];
            }

            // if this is not a keypress event then we should
            // be smart about using shift keys
            // this will only work for US keyboards however
            if (action && action != 'keypress' && _SHIFT_MAP[key]) {
                key = _SHIFT_MAP[key];
                modifiers.push('shift');
            }

            // if this key is a modifier then add it to the list of modifiers
            if (_isModifier(key)) {
                modifiers.push(key);
            }
        }

        // depending on what the key combination is
        // we will try to pick the best event for it
        action = _pickBestAction(key, modifiers, action);

        return {
            key: key,
            modifiers: modifiers,
            action: action
        };
    }

    function _belongsTo(element, ancestor) {
        if (element === null || element === document) {
            return false;
        }

        if (element === ancestor) {
            return true;
        }

        return _belongsTo(element.parentNode, ancestor);
    }

    function Mousetrap(targetElement) {
        var self = this;

        targetElement = targetElement || document;

        if (!(self instanceof Mousetrap)) {
            return new Mousetrap(targetElement);
        }

        /**
         * element to attach key events to
         *
         * @type {Element}
         */
        self.target = targetElement;

        /**
         * a list of all the callbacks setup via Mousetrap.bind()
         *
         * @type {Object}
         */
        self._callbacks = {};

        /**
         * direct map of string combinations to callbacks used for trigger()
         *
         * @type {Object}
         */
        self._directMap = {};

        /**
         * keeps track of what level each sequence is at since multiple
         * sequences can start out with the same sequence
         *
         * @type {Object}
         */
        var _sequenceLevels = {};

        /**
         * variable to store the setTimeout call
         *
         * @type {null|number}
         */
        var _resetTimer;

        /**
         * temporary state where we will ignore the next keyup
         *
         * @type {boolean|string}
         */
        var _ignoreNextKeyup = false;

        /**
         * temporary state where we will ignore the next keypress
         *
         * @type {boolean}
         */
        var _ignoreNextKeypress = false;

        /**
         * are we currently inside of a sequence?
         * type of action ("keyup" or "keydown" or "keypress") or false
         *
         * @type {boolean|string}
         */
        var _nextExpectedAction = false;

        /**
         * resets all sequence counters except for the ones passed in
         *
         * @param {Object} doNotReset
         * @returns void
         */
        function _resetSequences(doNotReset) {
            doNotReset = doNotReset || {};

            var activeSequences = false,
                key;

            for (key in _sequenceLevels) {
                if (doNotReset[key]) {
                    activeSequences = true;
                    continue;
                }
                _sequenceLevels[key] = 0;
            }

            if (!activeSequences) {
                _nextExpectedAction = false;
            }
        }

        /**
         * finds all callbacks that match based on the keycode, modifiers,
         * and action
         *
         * @param {string} character
         * @param {Array} modifiers
         * @param {Event|Object} e
         * @param {string=} sequenceName - name of the sequence we are looking for
         * @param {string=} combination
         * @param {number=} level
         * @returns {Array}
         */
        function _getMatches(character, modifiers, e, sequenceName, combination, level) {
            var i;
            var callback;
            var matches = [];
            var action = e.type;

            // if there are no events related to this keycode
            if (!self._callbacks[character]) {
                return [];
            }

            // if a modifier key is coming up on its own we should allow it
            if (action == 'keyup' && _isModifier(character)) {
                modifiers = [character];
            }

            // loop through all callbacks for the key that was pressed
            // and see if any of them match
            for (i = 0; i < self._callbacks[character].length; ++i) {
                callback = self._callbacks[character][i];

                // if a sequence name is not specified, but this is a sequence at
                // the wrong level then move onto the next match
                if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {
                    continue;
                }

                // if the action we are looking for doesn't match the action we got
                // then we should keep going
                if (action != callback.action) {
                    continue;
                }

                // if this is a keypress event and the meta key and control key
                // are not pressed that means that we need to only look at the
                // character, otherwise check the modifiers as well
                //
                // chrome will not fire a keypress if meta or control is down
                // safari will fire a keypress if meta or meta+shift is down
                // firefox will fire a keypress if meta or control is down
                if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {

                    // when you bind a combination or sequence a second time it
                    // should overwrite the first one.  if a sequenceName or
                    // combination is specified in this call it does just that
                    //
                    // @todo make deleting its own method?
                    var deleteCombo = !sequenceName && callback.combo == combination;
                    var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;
                    if (deleteCombo || deleteSequence) {
                        self._callbacks[character].splice(i, 1);
                    }

                    matches.push(callback);
                }
            }

            return matches;
        }

        /**
         * actually calls the callback function
         *
         * if your callback function returns false this will use the jquery
         * convention - prevent default and stop propogation on the event
         *
         * @param {Function} callback
         * @param {Event} e
         * @returns void
         */
        function _fireCallback(callback, e, combo, sequence) {

            // if this event should not happen stop here
            if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {
                return;
            }

            if (callback(e, combo) === false) {
                _preventDefault(e);
                _stopPropagation(e);
            }
        }

        /**
         * handles a character key event
         *
         * @param {string} character
         * @param {Array} modifiers
         * @param {Event} e
         * @returns void
         */
        self._handleKey = function(character, modifiers, e) {
            var callbacks = _getMatches(character, modifiers, e);
            var i;
            var doNotReset = {};
            var maxLevel = 0;
            var processedSequenceCallback = false;

            // Calculate the maxLevel for sequences so we can only execute the longest callback sequence
            for (i = 0; i < callbacks.length; ++i) {
                if (callbacks[i].seq) {
                    maxLevel = Math.max(maxLevel, callbacks[i].level);
                }
            }

            // loop through matching callbacks for this key event
            for (i = 0; i < callbacks.length; ++i) {

                // fire for all sequence callbacks
                // this is because if for example you have multiple sequences
                // bound such as "g i" and "g t" they both need to fire the
                // callback for matching g cause otherwise you can only ever
                // match the first one
                if (callbacks[i].seq) {

                    // only fire callbacks for the maxLevel to prevent
                    // subsequences from also firing
                    //
                    // for example 'a option b' should not cause 'option b' to fire
                    // even though 'option b' is part of the other sequence
                    //
                    // any sequences that do not match here will be discarded
                    // below by the _resetSequences call
                    if (callbacks[i].level != maxLevel) {
                        continue;
                    }

                    processedSequenceCallback = true;

                    // keep a list of which sequences were matches for later
                    doNotReset[callbacks[i].seq] = 1;
                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);
                    continue;
                }

                // if there were no sequence matches but we are still here
                // that means this is a regular match so we should fire that
                if (!processedSequenceCallback) {
                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo);
                }
            }

            // if the key you pressed matches the type of sequence without
            // being a modifier (ie "keyup" or "keypress") then we should
            // reset all sequences that were not matched by this event
            //
            // this is so, for example, if you have the sequence "h a t" and you
            // type "h e a r t" it does not match.  in this case the "e" will
            // cause the sequence to reset
            //
            // modifier keys are ignored because you can have a sequence
            // that contains modifiers such as "enter ctrl+space" and in most
            // cases the modifier key will be pressed before the next key
            //
            // also if you have a sequence such as "ctrl+b a" then pressing the
            // "b" key will trigger a "keypress" and a "keydown"
            //
            // the "keydown" is expected when there is a modifier, but the
            // "keypress" ends up matching the _nextExpectedAction since it occurs
            // after and that causes the sequence to reset
            //
            // we ignore keypresses in a sequence that directly follow a keydown
            // for the same character
            var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;
            if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {
                _resetSequences(doNotReset);
            }

            _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';
        };

        /**
         * handles a keydown event
         *
         * @param {Event} e
         * @returns void
         */
        function _handleKeyEvent(e) {

            // normalize e.which for key events
            // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion
            if (typeof e.which !== 'number') {
                e.which = e.keyCode;
            }

            var character = _characterFromEvent(e);

            // no character found then stop
            if (!character) {
                return;
            }

            // need to use === for the character check because the character can be 0
            if (e.type == 'keyup' && _ignoreNextKeyup === character) {
                _ignoreNextKeyup = false;
                return;
            }

            self.handleKey(character, _eventModifiers(e), e);
        }

        /**
         * called to set a 1 second timeout on the specified sequence
         *
         * this is so after each key press in the sequence you have 1 second
         * to press the next key before you have to start over
         *
         * @returns void
         */
        function _resetSequenceTimer() {
            clearTimeout(_resetTimer);
            _resetTimer = setTimeout(_resetSequences, 1000);
        }

        /**
         * binds a key sequence to an event
         *
         * @param {string} combo - combo specified in bind call
         * @param {Array} keys
         * @param {Function} callback
         * @param {string=} action
         * @returns void
         */
        function _bindSequence(combo, keys, callback, action) {

            // start off by adding a sequence level record for this combination
            // and setting the level to 0
            _sequenceLevels[combo] = 0;

            /**
             * callback to increase the sequence level for this sequence and reset
             * all other sequences that were active
             *
             * @param {string} nextAction
             * @returns {Function}
             */
            function _increaseSequence(nextAction) {
                return function() {
                    _nextExpectedAction = nextAction;
                    ++_sequenceLevels[combo];
                    _resetSequenceTimer();
                };
            }

            /**
             * wraps the specified callback inside of another function in order
             * to reset all sequence counters as soon as this sequence is done
             *
             * @param {Event} e
             * @returns void
             */
            function _callbackAndReset(e) {
                _fireCallback(callback, e, combo);

                // we should ignore the next key up if the action is key down
                // or keypress.  this is so if you finish a sequence and
                // release the key the final key will not trigger a keyup
                if (action !== 'keyup') {
                    _ignoreNextKeyup = _characterFromEvent(e);
                }

                // weird race condition if a sequence ends with the key
                // another sequence begins with
                setTimeout(_resetSequences, 10);
            }

            // loop through keys one at a time and bind the appropriate callback
            // function.  for any key leading up to the final one it should
            // increase the sequence. after the final, it should reset all sequences
            //
            // if an action is specified in the original bind call then that will
            // be used throughout.  otherwise we will pass the action that the
            // next key in the sequence should match.  this allows a sequence
            // to mix and match keypress and keydown events depending on which
            // ones are better suited to the key provided
            for (var i = 0; i < keys.length; ++i) {
                var isFinal = i + 1 === keys.length;
                var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);
                _bindSingle(keys[i], wrappedCallback, action, combo, i);
            }
        }

        /**
         * binds a single keyboard combination
         *
         * @param {string} combination
         * @param {Function} callback
         * @param {string=} action
         * @param {string=} sequenceName - name of sequence if part of sequence
         * @param {number=} level - what part of the sequence the command is
         * @returns void
         */
        function _bindSingle(combination, callback, action, sequenceName, level) {

            // store a direct mapped reference for use with Mousetrap.trigger
            self._directMap[combination + ':' + action] = callback;

            // make sure multiple spaces in a row become a single space
            combination = combination.replace(/\s+/g, ' ');

            var sequence = combination.split(' ');
            var info;

            // if this pattern is a sequence of keys then run through this method
            // to reprocess each pattern one key at a time
            if (sequence.length > 1) {
                _bindSequence(combination, sequence, callback, action);
                return;
            }

            info = _getKeyInfo(combination, action);

            // make sure to initialize array if this is the first time
            // a callback is added for this key
            self._callbacks[info.key] = self._callbacks[info.key] || [];

            // remove an existing match if there is one
            _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);

            // add this call back to the array
            // if it is a sequence put it at the beginning
            // if not put it at the end
            //
            // this is important because the way these are processed expects
            // the sequence ones to come first
            self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({
                callback: callback,
                modifiers: info.modifiers,
                action: info.action,
                seq: sequenceName,
                level: level,
                combo: combination
            });
        }

        /**
         * binds multiple combinations to the same callback
         *
         * @param {Array} combinations
         * @param {Function} callback
         * @param {string|undefined} action
         * @returns void
         */
        self._bindMultiple = function(combinations, callback, action) {
            for (var i = 0; i < combinations.length; ++i) {
                _bindSingle(combinations[i], callback, action);
            }
        };

        // start!
        _addEvent(targetElement, 'keypress', _handleKeyEvent);
        _addEvent(targetElement, 'keydown', _handleKeyEvent);
        _addEvent(targetElement, 'keyup', _handleKeyEvent);
    }

    /**
     * binds an event to mousetrap
     *
     * can be a single key, a combination of keys separated with +,
     * an array of keys, or a sequence of keys separated by spaces
     *
     * be sure to list the modifier keys first to make sure that the
     * correct key ends up getting bound (the last key in the pattern)
     *
     * @param {string|Array} keys
     * @param {Function} callback
     * @param {string=} action - 'keypress', 'keydown', or 'keyup'
     * @returns void
     */
    Mousetrap.prototype.bind = function(keys, callback, action) {
        var self = this;
        keys = keys instanceof Array ? keys : [keys];
        self._bindMultiple.call(self, keys, callback, action);
        return self;
    };

    /**
     * unbinds an event to mousetrap
     *
     * the unbinding sets the callback function of the specified key combo
     * to an empty function and deletes the corresponding key in the
     * _directMap dict.
     *
     * TODO: actually remove this from the _callbacks dictionary instead
     * of binding an empty function
     *
     * the keycombo+action has to be exactly the same as
     * it was defined in the bind method
     *
     * @param {string|Array} keys
     * @param {string} action
     * @returns void
     */
    Mousetrap.prototype.unbind = function(keys, action) {
        var self = this;
        return self.bind.call(self, keys, function() {}, action);
    };

    /**
     * triggers an event that has already been bound
     *
     * @param {string} keys
     * @param {string=} action
     * @returns void
     */
    Mousetrap.prototype.trigger = function(keys, action) {
        var self = this;
        if (self._directMap[keys + ':' + action]) {
            self._directMap[keys + ':' + action]({}, keys);
        }
        return self;
    };

    /**
     * resets the library back to its initial state.  this is useful
     * if you want to clear out the current keyboard shortcuts and bind
     * new ones - for example if you switch to another page
     *
     * @returns void
     */
    Mousetrap.prototype.reset = function() {
        var self = this;
        self._callbacks = {};
        self._directMap = {};
        return self;
    };

    /**
     * should we stop this event before firing off callbacks
     *
     * @param {Event} e
     * @param {Element} element
     * @return {boolean}
     */
    Mousetrap.prototype.stopCallback = function(e, element) {
        var self = this;

        // if the element has the class "mousetrap" then no need to stop
        if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {
            return false;
        }

        if (_belongsTo(element, self.target)) {
            return false;
        }

        // stop for input, select, and textarea
        return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;
    };

    /**
     * exposes _handleKey publicly so it can be overwritten by extensions
     */
    Mousetrap.prototype.handleKey = function() {
        var self = this;
        return self._handleKey.apply(self, arguments);
    };

    /**
     * allow custom key mappings
     */
    Mousetrap.addKeycodes = function(object) {
        for (var key in object) {
            if (object.hasOwnProperty(key)) {
                _MAP[key] = object[key];
            }
        }
        _REVERSE_MAP = null;
    };

    /**
     * Init the global mousetrap functions
     *
     * This method is needed to allow the global mousetrap functions to work
     * now that mousetrap is a constructor function.
     */
    Mousetrap.init = function() {
        var documentMousetrap = Mousetrap(document);
        for (var method in documentMousetrap) {
            if (method.charAt(0) !== '_') {
                Mousetrap[method] = (function(method) {
                    return function() {
                        return documentMousetrap[method].apply(documentMousetrap, arguments);
                    };
                } (method));
            }
        }
    };

    Mousetrap.init();

    // expose mousetrap to the global object
    window.Mousetrap = Mousetrap;

    // expose as a common js module
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = Mousetrap;
    }

    // expose mousetrap as an AMD module
    if (typeof define === 'function' && define.amd) {
        define(function() {
            return Mousetrap;
        });
    }
}) (typeof window !== 'undefined' ? window : null, typeof  window !== 'undefined' ? document : null);

},{}],3:[function(require,module,exports){
Mousetrap = require('mousetrap');
katex = require('../lib/katex/katex-modified.min.js');
GuppyBackend = require('./guppy_backend.js');
GuppyUtils = require('./guppy_utils.js');
GuppySymbols = require('./guppy_symbols.js');

var Guppy = function(guppy_div, config){
    var self = this;
    var config = config || {};
    var events = config['events'] || {}
    var options = config['options'] || {};

    if(typeof guppy_div === 'string' || guppy_div instanceof String){
	guppy_div = document.getElementById(guppy_div);
    }
    
    // Set the id on the div if it is not currently set.
    if(!(guppy_div.id)){
	var i = Guppy.max_uid || 0;
	while(document.getElementById("guppy_uid_"+i)) i++;
	Guppy.max_uid = i;
	guppy_div.id = "guppy_uid_"+i;
    }
    var i = Guppy.max_tabIndex || 0;
    guppy_div.tabIndex = i;
    Guppy.max_tabIndex = i+1;
    
    this.editor_active = true;
    this.empty_content = options['empty_content'] || "\\red{[?]}"
    this.editor = guppy_div;
    this.blacklist = [];
    this.autoreplace = true;
    this.ready = false;

    this.events = {};
    
    Guppy.instances[guppy_div.id] = this;

    this.backend = new GuppyBackend(config);
    this.temp_cursor = {"node":null,"caret":0}
    this.editor.addEventListener("keydown",Guppy.key_down, false);
    this.editor.addEventListener("keyup",Guppy.key_up, false);
    this.editor.addEventListener("focus", function(e) { Guppy.kb.alt_down = false; if(self.activate) self.activate();}, false);
    if(Guppy.ready && !this.ready){
    	this.ready = true;
    	this.backend.fire_event("ready");
	this.render(true);
    }
    this.deactivate();
    this.recompute_locations_paths();
}

Guppy.instances = {};
Guppy.ready = false;

Guppy.active_guppy = null;

Guppy.add_symbols = function(symbols){
    for(var s in symbols){
	var new_syms = GuppySymbols.add_symbols(s,symbols[s], GuppySymbols.symbols);
	for(var s in new_syms)
	    GuppySymbols.symbols[s] = new_syms[s];
    }
    for(var i in Guppy.instances){
	for(var s in symbols){
	    Guppy.instances[i].backend.symbols[s] = JSON.parse(JSON.stringify(symbols[s]));
	}
    }
}

Guppy.set_global_symbols = function(symbols){
    GuppySymbols.symbols = {};
    Guppy.add_symbols(symbols);
}

Guppy.reset_global_symbols = function(){
    for(var i in Guppy.instances){
	Guppy.instances[i].backend.symbols = JSON.parse(JSON.stringify(GuppySymbols.symbols));
    }
}

Guppy.init_symbols = function(symbols){
    var all_ready = function(){
	Guppy.register_keyboard_handlers();
	for(var i in Guppy.instances){
	    Guppy.instances[i].ready = true;
	    Guppy.instances[i].render(true);
	    Guppy.instances[i].backend.symbols = JSON.parse(JSON.stringify(GuppySymbols.symbols));
	    Guppy.instances[i].backend.fire_event("ready");
	    Guppy.instances[i].events["ready"] = null;
	}
	GuppyBackend.ready = true;
    }
    if(!(Array.isArray(symbols))){
	symbols = [symbols];
    }
    var calls = [];
    for(var i = 0; i < symbols.length; i++){
	var x = function outer(j){
	    return function(callback){
		var req = new XMLHttpRequest();
		req.onload = function(){
		    var syms = JSON.parse(this.responseText);
		    for(var s in syms){
			var new_syms = GuppySymbols.add_symbols(s,syms[s], GuppySymbols.symbols);
			for(var s in new_syms)
			    GuppySymbols.symbols[s] = new_syms[s];
		    }
		    callback();
		};
		req.open("get", symbols[j], true);
		req.send();
	    }
	}(i);
	calls.push(x);
    }
    calls.push(all_ready);
    var j = 0;
    var cb = function(){
	j += 1;
	if(j < calls.length) calls[j](cb);
    }
    if(calls.length > 0) calls[0](cb);
}

Guppy.prototype.is_changed = function(){
    var bb = this.editor.getElementsByClassName("katex")[0];
    if(!bb) return;
    var rect = bb.getBoundingClientRect();
    if(this.bounding_box)
	ans = this.bounding_box.top != rect.top || this.bounding_box.bottom != rect.bottom || this.bounding_box.right != rect.right || this.bounding_box.left != rect.left;
    else
	ans = true;
    this.bounding_box = rect;
    return ans;
}

Guppy.prototype.recompute_locations_paths = function(){
    ans = [];
    var bb = this.editor.getElementsByClassName("katex")[0];
    if(!bb) return;
    var rect = bb.getBoundingClientRect();
    ans.push({'path':'all',
	      'top':rect.top,
	      'bottom':rect.bottom,
	      'left':rect.left,
	      'right':rect.right});
    var elts = this.editor.getElementsByClassName("guppy_elt");
    for(var i = 0; i < elts.length; i++){
	var elt = elts[i];
	if(elt.nodeName == "mstyle") continue;
	var rect = elt.getBoundingClientRect();
	if(rect.top == 0 && rect.bottom == 0 && rect.left == 0 && rect.right == 0) continue;
	var cl = elt.classList;
	for(var j = 0; j < cl.length; j++){
	    if(cl[j].indexOf("guppy_loc") == 0){
		ans.push({'path':cl[j],
			  'top':rect.top,
			  'bottom':rect.bottom,
			  'left':rect.left,
			  'right':rect.right,
			  'mid_x':(rect.left+rect.right)/2,
			  'mid_y':(rect.bottom+rect.top)/2,
			  'blank':(' '+elt.className+' ').indexOf(' guppy_blank ') >= 0});
		break;
	    }
	}
    }
    this.boxes = ans;
}

Guppy.get_loc = function(x,y,current_node,current_caret){
    var g = Guppy.active_guppy;
    var min_dist = -1;
    var mid_dist = 0;
    var pos = "";
    var opt = null;
    var cur = null;
    var car = null;
    // check if we go to first or last element
    var bb = g.editor.getElementsByClassName("katex")[0];
    if(!bb) return;
    var rect = bb.getBoundingClientRect();
    if(current_node){
	var current_path = GuppyUtils.path_to(current_node);
	var current_pos = parseInt(current_path.substring(current_path.lastIndexOf("e")+1));
    }

    var boxes = g.boxes;
    if(!boxes) return;
    if(current_node){
	current_path = current_path.replace(/e[0-9]+$/,"e");
	var boxes2 = [];
	for(var i = 0; i < boxes.length; i++){
	    if(boxes[i].path == "all") continue;
	    var loc = boxes[i].path.substring(0,boxes[i].path.lastIndexOf("_"));
	    loc = loc.replace(/e[0-9]+$/,"e");
	    if(loc == current_path){
		boxes2.push(boxes[i]);
	    }
	}
	boxes = boxes2;
    }
    if(!boxes) return;
    for(var i = 0; i < boxes.length; i++){
	var box = boxes[i];
	if(box.path == "all"){
	    if(!opt) opt = {'path':'guppy_loc_m_e1_0'};
	    continue;
	}
	var xdist = Math.max(box.left - x, x - box.right, 0)
	var ydist = Math.max(box.top - y, y - box.bottom, 0)
	var dist = Math.sqrt(xdist*xdist + ydist*ydist);
	if(min_dist == -1 || dist < min_dist){
	    min_dist = dist;
	    mid_dist = x - box.mid_x;
	    opt = box;
	}
    }
    var loc = opt.path.substring("guppy_loc".length);
    loc = loc.replace(/_/g,"/");
    loc = loc.replace(/([0-9]+)(?=.*?\/)/g,"[$1]");
    cur = g.backend.doc.xpath_node(loc.substring(0,loc.lastIndexOf("/")), g.backend.doc.root());
    car = parseInt(loc.substring(loc.lastIndexOf("/")+1));
    // Check if we want the cursor before or after the element
    if(mid_dist > 0 && !(opt.blank)){
	car++;
    }
    ans = {"current":cur,"caret":car,"pos":pos};
    if(current_node && opt){
	var opt_pos = parseInt(opt.path.substring(opt.path.lastIndexOf("e")+1,opt.path.lastIndexOf("_")));
	if(opt_pos < current_pos) pos = "left";
	else if(opt_pos > current_pos) pos = "right";
	else if(car < current_caret) pos = "left";
	else if(car > current_caret) pos = "right";
	if(pos) ans['pos'] = pos;
	else ans['pos'] = "none";
    }
    return ans;
}

Guppy.mouse_up = function(e){
    Guppy.kb.is_mouse_down = false;
    var g = Guppy.active_guppy;
    if(g) g.render(true);
}

Guppy.mouse_down = function(e){
    var n = e.target;
    Guppy.kb.is_mouse_down = true;
    if(e.target == document.getElementById("toggle_ref")) toggle_div("help_card");
    else while(n != null){
	if(n.id in Guppy.instances){
	    e.preventDefault();
	    var prev_active = Guppy.active_guppy;
	    for(var i in Guppy.instances){
		if(i != n.id) Guppy.instances[i].deactivate();
		Guppy.active_guppy = Guppy.instances[n.id];
		Guppy.active_guppy.activate();
	    }
	    var g = Guppy.active_guppy;
	    var b = Guppy.active_guppy.backend;
	    g.space_caret = 0;
	    if(prev_active == g){
		if(e.shiftKey){
		    g.select_to(e.clientX, e.clientY, true);
		}
		else {
		    var loc = Guppy.get_loc(e.clientX,e.clientY);
		    if(!loc) return;
		    b.current = loc.current;
		    b.caret = loc.caret;
		    b.sel_status = GuppyBackend.SEL_NONE;
		}
		g.render(true);
	    }
	    return;
	}
	if(n.classList && n.classList.contains("guppy_osk")){
	    return;
	}
	n = n.parentNode;
    }
    Guppy.active_guppy = null;
    for(var i in Guppy.instances){
	Guppy.instances[i].deactivate();
    }
}

Guppy.mouse_move = function(e){
    var g = Guppy.active_guppy;
    if(!g) return;
    if(!Guppy.kb.is_mouse_down){
	var bb = g.editor;
	var rect = bb.getBoundingClientRect();
	if((e.clientX < rect.left || e.clientX > rect.right) || (e.clientY > rect.bottom || e.clientY < rect.top)){
	    g.temp_cursor = {"node":null,"caret":0};
	}
	else{
	    var loc = Guppy.get_loc(e.clientX,e.clientY);
	    if(!loc) return;
	    g.temp_cursor = {"node":loc.current,"caret":loc.caret};
	}
	g.render(g.is_changed());
    }
    else{
	g.select_to(e.clientX,e.clientY, true);
	g.render(g.is_changed());
    }
}

Guppy.prototype.select_to = function(x, y, mouse){
    var sel_caret = this.backend.caret;
    var sel_cursor = this.backend.current;
    if(this.backend.sel_status == GuppyBackend.SEL_CURSOR_AT_START){
	sel_cursor = this.backend.sel_end.node;
	sel_caret = this.backend.sel_end.caret;
    }
    else if(this.backend.sel_status == GuppyBackend.SEL_CURSOR_AT_END){
	sel_cursor = this.backend.sel_start.node;
	sel_caret = this.backend.sel_start.caret;
    }
    var loc = Guppy.get_loc(x,y,sel_cursor,sel_caret);
    if(!loc) return;
    this.backend.select_to(loc, sel_cursor, sel_caret, mouse);
}


window.addEventListener("mousedown",Guppy.mouse_down, false);
window.addEventListener("mouseup",Guppy.mouse_up, false);
window.addEventListener("mousemove",Guppy.mouse_move, false);

Guppy.prototype.render_node = function(t){
    // All the interesting work is done by transform.  This function just adds in the cursor and selection-start cursor
    var output = "";
    if(t == "render"){
	var root = this.backend.doc.root();
	this.backend.add_paths(root,"m");
	this.backend.temp_cursor = this.temp_cursor;
	this.backend.add_classes_cursors(root);
	this.backend.current.setAttribute("current","yes");
	if(this.temp_cursor.node) this.temp_cursor.node.setAttribute("temp","yes");
	output = this.backend.get_content("latex",true);
	this.backend.remove_cursors_classes(root);
	output = output.replace(new RegExp('&amp;','g'), '&');
	return output;
    }
    else{
	output = this.backend.get_content(t);
    }
    return output
}

Guppy.prototype.render = function(updated){
    if(!this.editor_active && GuppyUtils.is_blank(this.backend.doc.root().firstChild)){
	katex.render(this.empty_content,this.editor);
	return;
    }
    var tex = this.render_node("render");
    katex.render(tex,this.editor);
    if(updated){
	this.recompute_locations_paths();
    }
}

Guppy.prototype.activate = function(){
    Guppy.active_guppy = this;
    this.editor_active = true;
    this.editor.className = this.editor.className.replace(new RegExp('(\\s|^)guppy_inactive(\\s|$)'),' guppy_active ');
    this.editor.focus();
    if(this.ready){
	this.render(true);
	this.backend.fire_event("focus",{"focused":true});
    }
}

Guppy.prototype.deactivate = function(){
    this.editor_active = false;
    var r1 = new RegExp('(?:\\s|^)guppy_active(?:\\s|$)');
    var r2 = new RegExp('(?:\\s|^)guppy_inactive(?:\\s|$)');
    if(this.editor.className.match(r1)){
	this.editor.className = this.editor.className.replace(r1,' guppy_inactive ');
    }
    else if(!this.editor.className.match(r2)){
	this.editor.className += ' guppy_inactive ';
    }
    Guppy.kb.shift_down = false;
    Guppy.kb.ctrl_down = false;
    Guppy.kb.alt_down = false;
    if(this.ready){
	this.render();
	this.backend.fire_event("focus",{"focused":false});
    }
}


// Keyboard stuff

Guppy.kb = {};

Guppy.kb.is_mouse_down = false;

/* keyboard behaviour definitions */

// keys aside from 0-9,a-z,A-Z
Guppy.kb.k_chars = {
    "=":"=",
    "+":"+",
    "-":"-",
    "*":"*",
    ".":".",
    ",":",",
    "shift+/":"/",
    "shift+=":"+",
    "!":"!"
};
Guppy.kb.k_syms = {
    "/":"slash",
    "^":"exp",
    "*":"*",
    "(":"paren",
    "<":"less",
    ">":"greater",
    "_":"sub",
    "|":"abs",
    "shift+up":"exp",
    "shift+down":"sub"
};
Guppy.kb.k_controls = {
    "up":"up",
    "down":"down",
    "right":"right",
    "left":"left",
    "alt+k":"up",
    "alt+j":"down",
    "alt+l":"right",
    "alt+h":"left",
    "space":"spacebar",
    "home":"home",
    "end":"end",
    "backspace":"backspace",
    "del":"delete_key",
    "mod+a":"sel_all",
    "mod+c":"sel_copy",
    "mod+x":"sel_cut",
    "mod+v":"sel_paste",
    "mod+z":"undo",
    "mod+y":"redo",
    "enter":"done",
    "mod+shift+right":"list_extend_copy_right",
    "mod+shift+left":"list_extend_copy_left",
    "mod+right":"list_extend_right",
    "mod+left":"list_extend_left",
    "mod+up":"list_extend_up",
    "mod+down":"list_extend_down",
    "mod+shift+up":"list_extend_copy_up",
    "mod+shift+down":"list_extend_copy_down",
    "mod+backspace":"list_remove",
    "mod+shift+backspace":"list_remove_row",
    "shift+left":"sel_left",
    "shift+right":"sel_right",
    ")":"right_paren",
    "\\":"backslash",
    "tab":"tab"
};

// letters

for(var i = 65; i <= 90; i++){
    Guppy.kb.k_chars[String.fromCharCode(i).toLowerCase()] = String.fromCharCode(i).toLowerCase();
    Guppy.kb.k_chars['shift+'+String.fromCharCode(i).toLowerCase()] = String.fromCharCode(i).toUpperCase();
}

// numbers

for(var i = 48; i <= 57; i++)
    Guppy.kb.k_chars[String.fromCharCode(i)] = String.fromCharCode(i);

Guppy.register_keyboard_handlers = function(){
    Mousetrap.addKeycodes({173: '-'}); // Firefox's special minus (needed for _ = sub binding)
    var self = this;
    for(var i in Guppy.kb.k_chars)
    	Mousetrap.bind(i,function(i){ return function(){
	    if(!Guppy.active_guppy) return true;
	    Guppy.active_guppy.temp_cursor.node = null;
	    Guppy.active_guppy.backend.insert_string(Guppy.kb.k_chars[i]);
	    Guppy.active_guppy.render(true);
	    return false;
	}}(i));  
    for(var i in Guppy.kb.k_syms)
    	Mousetrap.bind(i,function(i){ return function(){
	    if(!Guppy.active_guppy) return true;
	    Guppy.active_guppy.temp_cursor.node = null;
	    Guppy.active_guppy.backend.space_caret = 0;
	    Guppy.active_guppy.backend.insert_symbol(Guppy.kb.k_syms[i]);
	    Guppy.active_guppy.render(true);
	    return false;
	}}(i));
    for(var i in Guppy.kb.k_controls)
    	Mousetrap.bind(i,function(i){ return function(){
	    if(!Guppy.active_guppy) return true;
	    Guppy.active_guppy.backend.space_caret = 0;
	    Guppy.active_guppy.backend[Guppy.kb.k_controls[i]]();
	    Guppy.active_guppy.temp_cursor.node = null;
	    Guppy.active_guppy.render(["up","down","right","left","home","end","sel_left","sel_right"].indexOf(i) < 0);
	    Guppy.active_guppy.render(false);
	    return false;
	}}(i));
}

module.exports = Guppy;

},{"../lib/katex/katex-modified.min.js":1,"./guppy_backend.js":4,"./guppy_symbols.js":6,"./guppy_utils.js":7,"mousetrap":2}],4:[function(require,module,exports){
Mousetrap = require('mousetrap');
katex = require('../lib/katex/katex-modified.min.js');
GuppyUtils = require('./guppy_utils.js');
GuppyDoc = require('./guppy_doc.js');
GuppySymbols = require('./guppy_symbols.js');

String.prototype.splice = function(idx, s){ return (this.slice(0,idx) + s + this.slice(idx)); };
String.prototype.splicen = function(idx, s, n){ return (this.slice(0,idx) + s + this.slice(idx+n));};
String.prototype.search_at = function(idx, s){ return (this.substring(idx-s.length,idx) == s); };

var GuppyBackend = function(config){
    var self = this;
    var config = config || {};
    var events = config['events'] || {};
    var options = config['options'] || {};

    this.blacklist = [];
    this.autoreplace = true;
    this.ready = false;
    this.events = {};
    
    var evts = ["ready", "change", "left_end", "right_end", "done", "completion", "debug", "error", "focus"];
    
    for(var i = 0; i < evts.length; i++){
	var e = evts[i];
	if(e in events) this.events[e] = e in events ? events[e] : null;
    }

    var opts = ["blank_caret", "empty_content", "blacklist", "autoreplace"];
    
    for(var i = 0; i < opts.length; i++){
	var p = opts[i];
	if(p in options) this[p] = options[p];
    }

    this.symbols = {};
    this.doc = new GuppyDoc();
    
    this.clipboard = null;
    this.current = this.doc.root().firstChild;
    this.caret = 0;
    this.space_caret = 0;
    this.sel_start = null;
    this.sel_end = null;
    this.undo_data = [];
    this.undo_now = -1;
    this.sel_status = GuppyBackend.SEL_NONE;
    this.checkpoint();
    if(GuppyBackend.ready && !this.ready){
    	this.ready = true;
	this.symbols = JSON.parse(JSON.stringify(GuppySymbols.symbols));
    	this.fire_event("ready");
    }
}

GuppyBackend.SEL_NONE = 0;
GuppyBackend.SEL_CURSOR_AT_START = 1;
GuppyBackend.SEL_CURSOR_AT_END = 2;

GuppyBackend.prototype.get_content = function(t,r){
    return this.doc.get_content(t,r);
}

GuppyBackend.prototype.set_content = function(xml_data){
    this.doc = new GuppyDoc(xml_data);
    this.clipboard = null;
    this.current = this.doc.root().firstChild;
    this.caret = 0;
    this.sel_start = null;
    this.sel_end = null;
    this.undo_data = [];
    this.undo_now = -1;
    this.sel_status = GuppyBackend.SEL_NONE;
    this.checkpoint();
}

GuppyBackend.prototype.fire_event = function(event, args){
    if(this.events[event]) this.events[event](args);
}

GuppyBackend.prototype.add_symbols = function(name, sym){
    var new_syms = GuppySymbols.add_symbols(name, sym);
    for(var s in new_syms){
	this.symbols[s] = new_syms[s];
    }
}

GuppyBackend.prototype.add_symbol_func = function(name, group){
    var new_syms = GuppySymbols.add_symbols("_func", [{"group":group,"symbols":[name]}]);
    for(var s in new_syms)
	this.symbols[s] = new_syms[s];
}

GuppyBackend.prototype.add_symbol_raw = function(name, latex, text, group){
    var s = {}
    s[name] = {"latex":latex,"text":text}
    var new_syms = GuppySymbols.add_symbols("_raw", [{"group":group,"symbols":s}]);
    for(var s in new_syms)
	this.symbols[s] = new_syms[s];
}

GuppyBackend.prototype.select_to = function(loc, sel_cursor, sel_caret, mouse){
    if(loc.current == sel_cursor && loc.caret == sel_caret){
	this.current = loc.current;
	this.caret = loc.caret;
	this.sel_status = GuppyBackend.SEL_NONE;
    }
    else if(loc.pos == "left"){
	this.sel_end = {"node":sel_cursor,"caret":sel_caret};
	this.current = loc.current;
	this.caret = loc.caret;
	this.set_sel_boundary(GuppyBackend.SEL_CURSOR_AT_START, mouse);
    }
    else if(loc.pos == "right"){
	this.sel_start = {"node":sel_cursor,"caret":sel_caret};
	this.current = loc.current;
	this.caret = loc.caret;
	this.set_sel_boundary(GuppyBackend.SEL_CURSOR_AT_END, mouse);
    }
}

GuppyBackend.prototype.set_sel_start = function(){
    this.sel_start = {"node":this.current, "caret":this.caret};
}

GuppyBackend.prototype.set_sel_end = function(){
    this.sel_end = {"node":this.current, "caret":this.caret};
}

GuppyBackend.prototype.add_paths = function(n,path){
    if(n.nodeName == "e"){
	n.setAttribute("path",path);
    }
    else{
	var es = 1, fs = 1, cs = 1, ls = 1;
	for(var c = n.firstChild; c != null; c = c.nextSibling){
	    if(c.nodeName == "c"){ this.add_paths(c, path+"_c"+cs); cs++; }
	    else if(c.nodeName == "f"){ this.add_paths(c, path+"_f"+fs); fs++; }
	    else if(c.nodeName == "l"){ this.add_paths(c, path+"_l"+ls); ls++; }
	    else if(c.nodeName == "e"){ this.add_paths(c, path+"_e"+es); es++; }
	}
    }
}

GuppyBackend.prototype.add_classes_cursors = function(n,path){
    if(n.nodeName == "e"){
	var text = n.firstChild.nodeValue;
	ans = "";
	var sel_cursor;
	var text_node = GuppyUtils.is_text(n);
	if(this.sel_status == GuppyBackend.SEL_CURSOR_AT_START) sel_cursor = this.sel_end;
	if(this.sel_status == GuppyBackend.SEL_CURSOR_AT_END) sel_cursor = this.sel_start;
	if(this.sel_status != GuppyBackend.SEL_NONE){
	    var sel_caret_text = GuppyUtils.is_small(sel_cursor.node) ? GuppyUtils.SMALL_SEL_CARET : GuppyUtils.SEL_CARET;
	    if(!text_node && text.length == 0 && n.parentNode.childElementCount > 1){
		sel_caret_text = "\\blue{\\xmlClass{guppy_elt guppy_blank guppy_loc_"+n.getAttribute("path")+"_0}{"+sel_caret_text+"}}";
	    }
	    else{
		sel_caret_text = "\\blue{"+sel_caret_text+"}";
	    }
	    if(this.sel_status == GuppyBackend.SEL_CURSOR_AT_END) sel_caret_text = text_node ? "[" : sel_caret_text + "\\"+GuppyUtils.SEL_COLOR+"{";
	    if(this.sel_status == GuppyBackend.SEL_CURSOR_AT_START) sel_caret_text = text_node ? "]" : "}" + sel_caret_text;
	}
	var caret_text = "";
	var temp_caret_text = "";
	if(text.length == 0){
	    if(text_node) caret_text = "\\_";
	    else if(n.parentNode.childElementCount == 1){
		if(this.current == n){
		    var blank_caret = this.blank_caret || (GuppyUtils.is_small(this.current) ? GuppyUtils.SMALL_CARET : GuppyUtils.CARET);
		    ans = "\\red{\\xmlClass{main_cursor guppy_elt guppy_blank guppy_loc_"+n.getAttribute("path")+"_0"+"}{"+blank_caret+"}}";
		}
		else if(this.temp_cursor.node == n)
		    ans = "\\gray{\\xmlClass{guppy_elt guppy_blank guppy_loc_"+n.getAttribute("path")+"_0"+"}{[?]}}";
		else
		    ans = "\\blue{\\xmlClass{guppy_elt guppy_blank guppy_loc_"+n.getAttribute("path")+"_0"+"}{[?]}}";
	    }
	    else if(this.temp_cursor.node != n && this.current != n && (!(sel_cursor) || sel_cursor.node != n)){
		// These are the empty e elements at either end of
		// a c or m node, such as the space before and
		// after both the sin and x^2 in sin(x^2)
		//
		// Here, we add in a small element so that we can
		// use the mouse to select these areas
		ans = "\\phantom{\\xmlClass{guppy_elt guppy_blank guppy_loc_"+n.getAttribute("path")+"_0"+"}{\\cursor[0.1ex]{1ex}}}";
	    }
	}
	for(var i = 0; i < text.length+1; i++){
	    if(n == this.current && i == this.caret && (text.length > 0 || n.parentNode.childElementCount > 1)){
		if(text_node){
		    if(this.sel_status == GuppyBackend.SEL_CURSOR_AT_START)
			caret_text = "[";
		    else if(this.sel_status == GuppyBackend.SEL_CURSOR_AT_END)
			caret_text = "]";
		    else
			caret_text = "\\_";
		}
		else{
		    caret_text = GuppyUtils.is_small(this.current) ? GuppyUtils.SMALL_CARET : GuppyUtils.CARET;
		    if(text.length == 0)
			caret_text = "\\red{\\xmlClass{main_cursor guppy_elt guppy_blank guppy_loc_"+n.getAttribute("path")+"_0}{"+caret_text+"}}";
		    else{
			caret_text = "\\red{\\xmlClass{main_cursor}{"+caret_text+"}}"
		    }
		    if(this.sel_status == GuppyBackend.SEL_CURSOR_AT_START)
			caret_text = caret_text + "\\"+GuppyUtils.SEL_COLOR+"{";
		    else if(this.sel_status == GuppyBackend.SEL_CURSOR_AT_END)
			caret_text = "}" + caret_text;
		}
		ans += caret_text;
	    }
	    else if(n == this.current && i == this.caret && text_node){
		ans += caret_text;
	    }
	    else if(this.sel_status != GuppyBackend.SEL_NONE && sel_cursor.node == n && i == sel_cursor.caret){
		ans += sel_caret_text;
	    }
	    else if(this.temp_cursor.node == n && i == this.temp_cursor.caret && (text.length > 0 || n.parentNode.childElementCount > 1)){
		if(text_node) 
		    temp_caret_text = ".";
		else{
		    temp_caret_text = GuppyUtils.is_small(this.current) ? GuppyUtils.TEMP_SMALL_CARET : GuppyUtils.TEMP_CARET;
		    if(text.length == 0){
			temp_caret_text = "\\gray{\\xmlClass{guppy_elt guppy_blank guppy_loc_"+n.getAttribute("path")+"_0}{"+temp_caret_text+"}}";
		    }
		    else
			temp_caret_text = "\\gray{"+temp_caret_text+"}";
		}
		ans += temp_caret_text;
	    }
	    if(i < text.length) ans += "\\xmlClass{guppy_elt guppy_loc_"+n.getAttribute("path")+"_"+i+"}{"+text[i]+"}";
	}
	n.setAttribute("render", ans);
	n.removeAttribute("path");
    }
    else{
	for(var c = n.firstChild; c != null; c = c.nextSibling){
	    if(c.nodeName == "c" || c.nodeName == "l" || c.nodeName == "f" || c.nodeName == "e"){ this.add_classes_cursors(c); }
	}
    }
}

GuppyBackend.prototype.remove_cursors_classes = function(n){
    if(n.nodeName == "e"){
	n.removeAttribute("path");
	n.removeAttribute("render");
	n.removeAttribute("current");
	n.removeAttribute("temp");
    }
    else{
	for(var c = n.firstChild; c != null; c = c.nextSibling){
	    if(c.nodeType == 1){ this.remove_cursors_classes(c); }
	}
    }
}

GuppyBackend.prototype.down_from_f = function(){
    var nn = this.current.firstChild;
    while(nn != null && nn.nodeName != 'c' && nn.nodeName != 'l') nn = nn.nextSibling;
    if(nn != null){
	while(nn.nodeName == 'l') nn = nn.firstChild;
	this.current = nn.firstChild;
    }
}

GuppyBackend.prototype.down_from_f_to_blank = function(){
    var nn = this.current.firstChild;
    while(nn != null && !(nn.nodeName == 'c' && nn.children.length == 1 && nn.firstChild.firstChild.nodeValue == "")){
	nn = nn.nextSibling;
    }
    if(nn != null){
	//Sanity check:
	
	while(nn.nodeName == 'l') nn = nn.firstChild;
	if(nn.nodeName != 'c' || nn.firstChild.nodeName != 'e'){
	    this.problem('dfftb');
	    return;
	}
	this.current = nn.firstChild;
    }
    else this.down_from_f();
}

GuppyBackend.prototype.delete_from_f = function(to_insert){
    var n = this.current;
    var p = n.parentNode;
    var prev = n.previousSibling;
    var next = n.nextSibling;
    var middle = to_insert || "";
    var new_node = this.make_e(prev.firstChild.textContent + middle + next.firstChild.textContent);
    this.current = new_node;
    this.caret = prev.firstChild.textContent.length;
    p.insertBefore(new_node, prev);
    p.removeChild(prev);
    p.removeChild(n);
    p.removeChild(next);
}

GuppyBackend.prototype.symbol_to_node = function(sym_name, content){
    // sym_name is a key in the symbols dictionary
    //
    // content is a list of nodes to insert
    var base = this.doc.base;
    var s = this.symbols[sym_name];
    var f = base.createElement("f");
    if("type" in s) f.setAttribute("type",s["type"])
    if("group" in s) f.setAttribute("group",s["group"])
    if(s['char']) f.setAttribute("c","yes");
    
    var first_ref = -1;
    var refs_count = 0;
    var lists = {}
    var first;

    // Make the b nodes for rendering each output    
    for(var t in s["output"]){
	var b = base.createElement("b");
	b.setAttribute("p",t);

	var out = s["output"][t];
	if(typeof out == 'string'){
	    out = out.split(/(\{\$[0-9]+(?:\{[^}]+\})*\})/g);
	    for(var i = 0; i < out.length; i++){
		m = out[i].match(/^\{\$([0-9]+)((?:\{[^}]+\})*)\}$/);
		if(m){
		    //console.log("O",out);
		    out[i] = {'ref':parseInt(m[1])};
		    if(m[2].length > 0){
			mm = m[2].match(/\{[^}]*\}/g);
			out[i]['d'] = mm.length;
			for(var j = 0; j < mm.length; j++){
			    out[i]['sep'+j] = mm[j].substring(1,mm[j].length-1);
			}
		    }
		}
	    }
	}
	for(var i = 0; i < out.length; i++){
	    if(typeof out[i] == 'string' || out[i] instanceof String){
		var nt = base.createTextNode(out[i]);
		b.appendChild(nt);
	    }
	    else{
		var nt = base.createElement("r");
		for(var attr in out[i]){
		    nt.setAttribute(attr,out[i][attr]);
		}
		if(t == 'latex') {
		    if(first_ref == -1) first_ref = out[i]['ref'];
		    if('d' in out[i]) lists[refs_count] = out[i]['d']
		    refs_count++;
		}
		b.appendChild(nt);
	    }
	}
	f.appendChild(b);
    }
    // Now make the c nodes for storing the content
    for(var i = 0; i < refs_count; i++){
	var nc = base.createElement("c");
	if(i in content){
	    var node_list = content[i];
	    for(var se = 0; se < node_list.length; se++){
		nc.appendChild(node_list[se].cloneNode(true));
	    }
	}
	else nc.appendChild(this.make_e(""));
	if(i+1 == first_ref) first = nc.lastChild;
	if(s['attrs'])
	    for(var a in (s['attrs'][i] || {}))
		nc.setAttribute(a,s['attrs'][i][a]);
	    // for(var a in s['attrs'])
	    // 	if(s['attrs'][a][i] != 0) nc.setAttribute(a,s['attrs'][a][i]);
	if(i in lists){
	    var par = f;
	    for(var j = 0; j < lists[i]; j++){
		var nl = base.createElement("l");
		nl.setAttribute("s","1");
		par.appendChild(nl);
		par = nl;
		if(j == lists[i]-1) nl.appendChild(nc);
	    }
	}
	else f.appendChild(nc);
    }
    return {"f":f, "first":first};
}

GuppyBackend.prototype.insert_symbol = function(sym_name){
    var s = this.symbols[sym_name];
    if(this.is_blacklisted(s['type'])){
	return false;
    }
    var node_list = {};
    var content = {};
    var left_piece,right_piece;
    var cur = s['current'] == null ? 0 : parseInt(s['current']);
    var to_remove = [];
    var to_replace = null;
    var replace_f = false;
    
    
    if(cur > 0){
	cur--;
	if(this.sel_status != GuppyBackend.SEL_NONE){
	    var sel = this.sel_get();
	    sel_parent = sel.involved[0].parentNode;
	    to_remove = sel.involved;
	    left_piece = this.make_e(sel.remnant.firstChild.nodeValue.slice(0,this.sel_start.caret));
	    right_piece = this.make_e(sel.remnant.firstChild.nodeValue.slice(this.sel_start.caret));
	    content[cur] = sel.node_list;
	}
	else if(s['current_type'] == 'token'){
	    // If we're at the beginning, then the token is the previous f node
	    if(this.caret == 0 && this.current.previousSibling != null){
		content[cur] = [this.make_e(""), this.current.previousSibling, this.make_e("")];
		to_replace = this.current.previousSibling;
		replace_f = true;
	    }
	    else{
		// look for [0-9.]+|[a-zA-Z] immediately preceeding the caret and use that as token
		var prev = this.current.firstChild.nodeValue.substring(0,this.caret);
		var token = prev.match(/[0-9.]+$|[a-zA-Z]$/);
		if(token != null && token.length > 0){
		    token = token[0];
		    left_piece = this.make_e(this.current.firstChild.nodeValue.slice(0,this.caret-token.length));
		    right_piece = this.make_e(this.current.firstChild.nodeValue.slice(this.caret));
		    content[cur] = [this.make_e(token)];
		}
	    }
	}
    }
    if(!replace_f && (left_piece == null || right_piece == null)){
	left_piece = this.make_e(this.current.firstChild.nodeValue.slice(0,this.caret));
	right_piece = this.make_e(this.current.firstChild.nodeValue.slice(this.caret));
	to_remove = [this.current];
    }

    // By now:
    // 
    // content contains whatever we want to pre-populate the 'current' field with (if any)
    //
    // right_piece contains whatever content was in an involved node
    // to the right of the cursor but is not part of the insertion.
    // Analogously for left_piece
    //
    // Thus all we should have to do now is symbol_to_node(sym_type,
    // content) and then add the left_piece, resulting node, and
    // right_piece in that order.
    
    var new_current = null;
    var current_parent = this.current.parentNode;
    
    var sym = this.symbol_to_node(sym_name,content);
    var f = sym.f;
    var new_current = sym.first;

    var next = this.current.nextSibling;

    if(replace_f){
	current_parent.replaceChild(f,to_replace);
    }
    else{
	if(to_remove.length == 0) this.current.parentNode.removeChild(this.current);
	
	for(var i = 0; i < to_remove.length; i++){
	    if(next == to_remove[i]) next = next.nextSibling;
	    current_parent.removeChild(to_remove[i]);
	}
	current_parent.insertBefore(left_piece, next);
	current_parent.insertBefore(f, next);
	current_parent.insertBefore(right_piece, next);
    }
    
    this.caret = 0;
    this.current = f;
    if(s['char']){
	this.current = this.current.nextSibling;
    }
    else this.down_from_f_to_blank();

    this.sel_clear();
    this.checkpoint();
    return true;
}

GuppyBackend.prototype.sel_get = function(){
    if(this.sel_status == GuppyBackend.SEL_NONE){
	return null;
    }
    var involved = [];
    var node_list = [];
    var remnant = null;

    if(this.sel_start.node == this.sel_end.node){
	return {"node_list":[this.make_e(this.sel_start.node.firstChild.nodeValue.substring(this.sel_start.caret, this.sel_end.caret))],
		"remnant":this.make_e(this.sel_start.node.firstChild.nodeValue.substring(0, this.sel_start.caret) + this.sel_end.node.firstChild.nodeValue.substring(this.sel_end.caret)),
		"involved":[this.sel_start.node]};
    }
    
    node_list.push(this.make_e(this.sel_start.node.firstChild.nodeValue.substring(this.sel_start.caret)));
    involved.push(this.sel_start.node);
    involved.push(this.sel_end.node);
    remnant = this.make_e(this.sel_start.node.firstChild.nodeValue.substring(0, this.sel_start.caret) + this.sel_end.node.firstChild.nodeValue.substring(this.sel_end.caret));
    var n = this.sel_start.node.nextSibling;
    while(n != null && n != this.sel_end.node){
	involved.push(n);
	node_list.push(n);
	n = n.nextSibling;
    }
    node_list.push(this.make_e(this.sel_end.node.firstChild.nodeValue.substring(0, this.sel_end.caret)));
    return {"node_list":node_list,
	    "remnant":remnant,
	    "involved":involved,
	    "cursor":0};
}

// GuppyBackend.prototype.print_selection = function(){
//     var sel = this.sel_get();
//     if(sel == null) return "[none]";
//     var ans = "";
//     ans += "node_list: \n";
//     for(var i = 0; i < sel.node_list.length; i++){
// 	var n = sel.node_list[i];
// 	ans += (new XMLSerializer()).serializeToString(n) + "\n";
//     }
//     ans += "\ninvolved: \n";
//     for(var i = 0; i < sel.involved.length; i++){
// 	var n = sel.involved[i];
// 	ans += (new XMLSerializer()).serializeToString(n) + "\n";
//     }
// }

GuppyBackend.prototype.make_e = function(text){
    var base = this.doc.base;
    var new_node = base.createElement("e");
    new_node.appendChild(base.createTextNode(text));
    return new_node;
}

GuppyBackend.prototype.insert_string = function(s){
    if(this.sel_status != GuppyBackend.SEL_NONE){
	this.sel_delete();
	this.sel_clear();
    }
    this.current.firstChild.nodeValue = this.current.firstChild.nodeValue.splice(this.caret,s)
    this.caret += s.length;
    this.checkpoint();
    if(this.autoreplace) this.check_for_symbol();
}

GuppyBackend.prototype.sel_copy = function(){
    var sel = this.sel_get();
    if(!sel) return;
    this.clipboard = [];
    for(var i = 0; i < sel.node_list.length; i++){
	this.clipboard.push(sel.node_list[i].cloneNode(true));
    }
    this.sel_clear();
}

GuppyBackend.prototype.sel_cut = function(){
    var node_list = this.sel_delete();
    if(!node_list) return;
    this.clipboard = [];
    for(var i = 0; i < node_list.length; i++){
	this.clipboard.push(node_list[i].cloneNode(true));
    }
    this.sel_clear();
    this.checkpoint();
}

GuppyBackend.prototype.insert_nodes = function(node_list, move_cursor){
    var real_clipboard = [];
    for(var i = 0; i < node_list.length; i++){
	real_clipboard.push(node_list[i].cloneNode(true));
    }

    if(real_clipboard.length == 1){
	this.current.firstChild.nodeValue = this.current.firstChild.nodeValue.substring(0,this.caret) + real_clipboard[0].firstChild.nodeValue + this.current.firstChild.nodeValue.substring(this.caret);
	if(move_cursor) this.caret += real_clipboard[0].firstChild.nodeValue.length;
    }
    else{
	var nn = this.make_e(real_clipboard[real_clipboard.length-1].firstChild.nodeValue + this.current.firstChild.nodeValue.substring(this.caret));
	this.current.firstChild.nodeValue = this.current.firstChild.nodeValue.substring(0,this.caret) + real_clipboard[0].firstChild.nodeValue;
	if(this.current.nextSibling == null)
	    this.current.parentNode.appendChild(nn)
	else
	    this.current.parentNode.insertBefore(nn, this.current.nextSibling)
	for(var i = 1; i < real_clipboard.length - 1; i++)
	    this.current.parentNode.insertBefore(real_clipboard[i], nn);
	if(move_cursor){
	    this.current = nn;
	    this.caret = real_clipboard[real_clipboard.length-1].firstChild.nodeValue.length
	}
    }
}

GuppyBackend.prototype.sel_paste = function(){
    this.sel_delete();
    this.sel_clear();
    if(!(this.clipboard) || this.clipboard.length == 0) return;
    this.insert_nodes(this.clipboard, true);
    this.checkpoint();
    return;
}

GuppyBackend.prototype.sel_clear = function(){
    this.sel_start = null;    
    this.sel_end = null;
    this.sel_status = GuppyBackend.SEL_NONE;
}

GuppyBackend.prototype.sel_delete = function(){
    var sel = this.sel_get();
    if(!sel) return null;
    sel_parent = sel.involved[0].parentNode;
    sel_prev = sel.involved[0].previousSibling;
    for(var i = 0; i < sel.involved.length; i++){
	var n = sel.involved[i];
	sel_parent.removeChild(n);
    }
    if(sel_prev == null){
	if(sel_parent.firstChild == null)
	    sel_parent.appendChild(sel.remnant);
	else
	    sel_parent.insertBefore(sel.remnant, sel_parent.firstChild);
    }
    else if(sel_prev.nodeName == 'f'){
	if(sel_prev.nextSibling == null)
	    sel_parent.appendChild(sel.remnant);
	else
	    sel_parent.insertBefore(sel.remnant, sel_prev.nextSibling);
    }
    this.current = sel.remnant
    this.caret = this.sel_start.caret;
    return sel.node_list;
}

GuppyBackend.prototype.sel_all = function(){
    this.home();
    this.set_sel_start();
    this.end();
    this.set_sel_end();
    if(this.sel_start.node != this.sel_end.node || this.sel_start.caret != this.sel_end.caret)
	this.sel_status = GuppyBackend.SEL_CURSOR_AT_END;
}

GuppyBackend.prototype.sel_right = function(){
    if(this.sel_status == GuppyBackend.SEL_NONE){
	this.set_sel_start();
	this.sel_status = GuppyBackend.SEL_CURSOR_AT_END;
    }
    if(this.caret >= GuppyUtils.get_length(this.current)){
	var nn = this.current.nextSibling;
	if(nn != null){
	    this.current = nn.nextSibling;
	    this.caret = 0;
	    this.set_sel_boundary(GuppyBackend.SEL_CURSOR_AT_END);
	}
	else{
	    this.set_sel_boundary(GuppyBackend.SEL_CURSOR_AT_END);
	}
    }
    else{
	this.caret += 1;
	this.set_sel_boundary(GuppyBackend.SEL_CURSOR_AT_END);
    }
    if(this.sel_start.node == this.sel_end.node && this.sel_start.caret == this.sel_end.caret){
	this.sel_status = GuppyBackend.SEL_NONE;
    }
}

GuppyBackend.prototype.set_sel_boundary = function(sstatus, mouse){
    if(this.sel_status == GuppyBackend.SEL_NONE || mouse) this.sel_status = sstatus;
    if(this.sel_status == GuppyBackend.SEL_CURSOR_AT_START)
	this.set_sel_start();
    else if(this.sel_status == GuppyBackend.SEL_CURSOR_AT_END)
	this.set_sel_end();
}

GuppyBackend.prototype.sel_left = function(){
    if(this.sel_status == GuppyBackend.SEL_NONE){
	this.set_sel_end();
	this.sel_status = GuppyBackend.SEL_CURSOR_AT_START;
    }
    if(this.caret <= 0){
	var nn = this.current.previousSibling;
	if(nn != null){
	    this.current = nn.previousSibling;
	    this.caret = this.current.firstChild.nodeValue.length;
	    this.set_sel_boundary(GuppyBackend.SEL_CURSOR_AT_START);
	}
	else{
	    this.set_sel_boundary(GuppyBackend.SEL_CURSOR_AT_START);
	}
    }
    else{
	this.caret -= 1;
	this.set_sel_boundary(GuppyBackend.SEL_CURSOR_AT_START);
    }
    if(this.sel_start.node == this.sel_end.node && this.sel_start.caret == this.sel_end.caret){
	this.sel_status = GuppyBackend.SEL_NONE;
    }
}

GuppyBackend.prototype.list_extend_copy_right = function(){this.list_extend("right", true);}
GuppyBackend.prototype.list_extend_copy_left = function(){this.list_extend("left", true);}
GuppyBackend.prototype.list_extend_right = function(){this.list_extend("right", false);}
GuppyBackend.prototype.list_extend_left = function(){this.list_extend("left", false);}
GuppyBackend.prototype.list_extend_up = function(){this.list_extend("up", false);}
GuppyBackend.prototype.list_extend_down = function(){this.list_extend("down", false);}
GuppyBackend.prototype.list_extend_copy_up = function(){this.list_extend("up", true);}
GuppyBackend.prototype.list_extend_copy_down = function(){this.list_extend("down", true);}

GuppyBackend.prototype.list_vertical_move = function(down){
    var n = this.current;
    while(n.parentNode && n.parentNode.parentNode && !(n.nodeName == 'c' && n.parentNode.nodeName == 'l' && n.parentNode.parentNode.nodeName == 'l')){
	n = n.parentNode;
    }
    if(!n.parentNode) return;
    var pos = 1;
    var cc = n;
    while(cc.previousSibling != null){
	pos++;
	cc = cc.previousSibling;
    }
    var new_l = down ? n.parentNode.nextSibling : n.parentNode.previousSibling
    if(!new_l) return;
    var idx = 1;
    var nn = new_l.firstChild;
    while(idx < pos){
	idx++;
	nn = nn.nextSibling;
    }
    this.current = nn.firstChild;
    this.caret = down ? 0 : this.current.firstChild.textContent.length;
}

GuppyBackend.prototype.list_extend = function(direction, copy){
    var base = this.doc.base;
    var vertical = direction == "up" || direction == "down";
    var before = direction == "up" || direction == "left";
    var this_name = vertical ? "l" : "c";
    var n = this.current;
    while(n.parentNode && !(n.nodeName == this_name && n.parentNode.nodeName == 'l')){
	n = n.parentNode;
    }
    if(!n.parentNode) return;
    var to_insert;
    
    // check if 2D and horizontal and extend all the other rows if so 
    if(!vertical && n.parentNode.parentNode.nodeName == "l"){
	to_insert = base.createElement("c");
	to_insert.appendChild(this.make_e(""));
	var pos = 1;
	var cc = n;
	while(cc.previousSibling != null){
	    pos++;
	    cc = cc.previousSibling;
	}
	var to_modify = [];
	var iterator = this.doc.xpath_list("./l/c[position()="+pos+"]", n.parentNode.parentNode);
	try{ for(var nn = iterator.iterateNext(); nn != null; nn = iterator.iterateNext()){ to_modify.push(nn); }}
	catch(e) { this.fire_event("error",{"message":'XML modified during iteration? ' + e}); }
	for(var j = 0; j < to_modify.length; j++){
	    var nn = to_modify[j];
	    if(copy) nn.parentNode.insertBefore(nn.cloneNode(true), before ? nn : nn.nextSibling);
	    else nn.parentNode.insertBefore(to_insert.cloneNode(true), before ? nn : nn.nextSibling);
	    nn.parentNode.setAttribute("s",parseInt(nn.parentNode.getAttribute("s"))+1);
	}
	this.current = before ? n.previousSibling.lastChild : n.nextSibling.firstChild;
	this.caret = this.current.firstChild.textContent.length;
	this.checkpoint();
	return;
    }
    
    if(copy){
	to_insert = n.cloneNode(true);
    }
    else{
	if(vertical){
	    to_insert = base.createElement("l");
	    to_insert.setAttribute("s",n.getAttribute("s"))
	    for(var i = 0; i < parseInt(n.getAttribute("s")); i++){
		var c = base.createElement("c");
		c.appendChild(this.make_e(""));
		to_insert.appendChild(c);
	    }
	}
	else{
	    to_insert = base.createElement("c");
	    to_insert.appendChild(this.make_e(""));
	}
    }
    n.parentNode.setAttribute("s",parseInt(n.parentNode.getAttribute("s"))+1);
    n.parentNode.insertBefore(to_insert, before ? n : n.nextSibling);
    if(vertical) this.current = to_insert.firstChild.firstChild;
    else this.current = to_insert.firstChild;
    this.caret = 0;
    this.checkpoint();
}

GuppyBackend.prototype.list_remove_col = function(){
    var n = this.current;
    while(n.parentNode && n.parentNode.parentNode && !(n.nodeName == 'c' && n.parentNode.nodeName == 'l' && n.parentNode.parentNode.nodeName == 'l')){
	n = n.parentNode;
    }
    if(!n.parentNode) return;
    
    // Don't remove if there is only a single column:
    if(n.previousSibling != null){
	this.current = n.previousSibling.lastChild;
	this.caret = n.previousSibling.lastChild.firstChild.textContent.length;
    }
    else if(n.nextSibling != null){
	this.current = n.nextSibling.firstChild;
	this.caret = 0;
    }
    else return;
    
    var pos = 1;
    var cc = n;
    
    // Find position of column
    while(cc.previousSibling != null){
	pos++;
	cc = cc.previousSibling;
    }
    var to_modify = [];
    var iterator = this.doc.xpath_list("./l/c[position()="+pos+"]", n.parentNode.parentNode)
    try{ for(var nn = iterator.iterateNext(); nn != null; nn = iterator.iterateNext()){ to_modify.push(nn); }}
    catch(e) { this.fire_event("error",{"message":'XML modified during iteration? ' + e}); }
    for(var j = 0; j < to_modify.length; j++){
	var nn = to_modify[j];
	nn.parentNode.setAttribute("s",parseInt(nn.parentNode.getAttribute("s"))-1);
	nn.parentNode.removeChild(nn);
    }
}

GuppyBackend.prototype.list_remove_row = function(){
    var n = this.current;
    while(n.parentNode && !(n.nodeName == 'l' && n.parentNode.nodeName == 'l')){
	n = n.parentNode;
    }
    if(!n.parentNode) return;
    // Don't remove if there is only a single row:
    if(n.previousSibling != null){
	this.current = n.previousSibling.firstChild.lastChild;
	this.caret = n.previousSibling.lastChild.firstChild.textContent.length;
    }
    else if(n.nextSibling != null){
	this.current = n.nextSibling.firstChild.firstChild;
	this.caret = 0;
    }
    else return;

    n.parentNode.setAttribute("s",parseInt(n.parentNode.getAttribute("s"))-1);
    n.parentNode.removeChild(n);
}

GuppyBackend.prototype.list_remove = function(){
    var n = this.current;
    while(n.parentNode && !(n.nodeName == 'c' && n.parentNode.nodeName == 'l')){
	n = n.parentNode;
    }
    if(!n.parentNode) return;
    if(n.parentNode.parentNode && n.parentNode.parentNode.nodeName == "l"){
	this.list_remove_col();
	return;
    }
    if(n.previousSibling != null){
	this.current = n.previousSibling.lastChild;
	this.caret = n.previousSibling.lastChild.firstChild.textContent.length;
    }
    else if(n.nextSibling != null){
	this.current = n.nextSibling.firstChild;
	this.caret = 0;
    }
    else return;
    n.parentNode.setAttribute("s",parseInt(n.parentNode.getAttribute("s"))-1);
    n.parentNode.removeChild(n);
}

GuppyBackend.prototype.right = function(){
    this.sel_clear();
    if(this.caret >= GuppyUtils.get_length(this.current)){
	var nn = this.doc.xpath_node("following::e[1]", this.current);
	if(nn != null){
	    this.current = nn;
	    this.caret = 0;
	}
	else{
	    this.fire_event("right_end");
	}
    }
    else{
	this.caret += 1;
    }
}

GuppyBackend.prototype.spacebar = function(){
    this.space_caret = this.caret;
}

GuppyBackend.prototype.left = function(){
    this.sel_clear();
    if(this.caret <= 0){
	var pn = this.doc.xpath_node("preceding::e[1]", this.current);
	if(pn != null){
	    this.current = pn;
	    this.caret = this.current.firstChild.nodeValue.length;
	}
	else{
	    this.fire_event("left_end");
	}
    }
    else{
	this.caret -= 1;
    }
}

GuppyBackend.prototype.delete_from_c = function(){
    var pos = 0;
    var c = this.current.parentNode;
    while(c && c.nodeName == "c"){
	pos++;
	c = c.previousSibling;
    }
    var idx = this.current.parentNode.getAttribute("delete");
    var survivor_node = this.doc.xpath_node("./c[position()="+idx+"]", this.current.parentNode.parentNode);
    var survivor_nodes = [];
    for(var n = survivor_node.firstChild; n != null; n = n.nextSibling){
	survivor_nodes.push(n);
    }
    this.current = this.current.parentNode.parentNode;
    this.delete_from_f();
    this.insert_nodes(survivor_nodes, pos > idx);
}

GuppyBackend.prototype.delete_from_e = function(){
    // return false if we deleted something, and true otherwise.
    if(this.caret > 0){
	this.current.firstChild.nodeValue = this.current.firstChild.nodeValue.splicen(this.caret-1,"",1);
	this.caret--;
    }
    else{
	// The order of these is important
	if(this.current.previousSibling != null && this.current.previousSibling.getAttribute("c") == "yes"){
	    // The previous node is an f node but is really just a character.  Delete it.
	    this.current = this.current.previousSibling;
	    this.delete_from_f();
	}
	else if(this.current.previousSibling != null && this.current.previousSibling.nodeName == 'f'){
	    // We're in an e node just after an f node.  Move back into the f node (delete it?)
	    this.left();
	    return false;
	}
	else if(this.current.parentNode.previousSibling != null && this.current.parentNode.previousSibling.nodeName == 'c'){
	    // We're in a c child of an f node, but not the first one.  Go to the previous c
	    if(this.current.parentNode.hasAttribute("delete")){
		this.delete_from_c();
	    }
	    else{
		this.left();
		return false;
	    }
	}
	else if(this.current.previousSibling == null && this.current.parentNode.nodeName == 'c' && (this.current.parentNode.previousSibling == null || this.current.parentNode.previousSibling.nodeName != 'c')){
	    // We're in the first c child of an f node and at the beginning--delete the f node
	    var par = this.current.parentNode;
	    while(par.parentNode.nodeName == 'l' || par.parentNode.nodeName == 'c'){
		par = par.parentNode;
	    }
	    if(par.hasAttribute("delete")){
		this.delete_from_c();
	    }
	    else{
		this.current = par.parentNode;
		this.delete_from_f();
	    }
	}
	else{
	    // We're at the beginning (hopefully!) 
	    return false;
	}
    }
    return true;
}

GuppyBackend.prototype.delete_forward_from_e = function(){
    // return false if we deleted something, and true otherwise.
    if(this.caret < this.current.firstChild.nodeValue.length){
	this.current.firstChild.nodeValue = this.current.firstChild.nodeValue.splicen(this.caret,"",1);
    }
    else{
	//We're at the end
	if(this.current.nextSibling != null){
	    // The next node is an f node.  Delete it.
	    this.current = this.current.nextSibling;
	    this.delete_from_f();
	}
	else if(this.current.parentNode.nodeName == 'c'){
	    // We're in a c child of an f node.  Do nothing
	    return false;
	}
    }
    return true;
}

GuppyBackend.prototype.backspace = function(){
    if(this.sel_status != GuppyBackend.SEL_NONE){
	this.sel_delete();
	this.sel_status = GuppyBackend.SEL_NONE;
	this.checkpoint();
    }
    else if(this.delete_from_e()){
	this.checkpoint();
    }
}

GuppyBackend.prototype.delete_key = function(){
    if(this.sel_status != GuppyBackend.SEL_NONE){
	this.sel_delete();
	this.sel_status = GuppyBackend.SEL_NONE;
	this.checkpoint();
    }
    else if(this.delete_forward_from_e()){
	this.checkpoint();
    }
}

GuppyBackend.prototype.backslash = function(){
    if(GuppyUtils.is_text(this.current)) return;
    this.insert_symbol("sym_name");
}

GuppyBackend.prototype.tab = function(){
    if(!GuppyUtils.is_symbol(this.current)){
	this.check_for_symbol();
	return;
    }
    var sym_name = this.current.firstChild.textContent;
    var candidates = [];
    for(var n in this.symbols){
	if(n.startsWith(sym_name)) candidates.push(n);
    }
    if(candidates.length == 1){
	this.current.firstChild.textContent = candidates[0];
	this.caret = candidates[0].length;
    }
    else {
	this.fire_event("completion",{"candidates":candidates});
    }
}

GuppyBackend.prototype.right_paren = function(){
    if(this.current.nodeName == 'e' && this.caret < this.current.firstChild.nodeValue.length - 1) return;
    else this.right();
}

GuppyBackend.prototype.up = function(){
    this.sel_clear();
    if(this.current.parentNode.hasAttribute("up")){
	var t = parseInt(this.current.parentNode.getAttribute("up"));
	var f = this.current.parentNode.parentNode;
	var n = f.firstChild;
	while(n != null && t > 0){
	    if(n.nodeName == 'c') t--;
	    if(t > 0) n = n.nextSibling;
	}
	this.current = n.lastChild;
	this.caret = this.current.firstChild.nodeValue.length;
    }
    else this.list_vertical_move(false);
}

GuppyBackend.prototype.down = function(){
    this.sel_clear();
    if(this.current.parentNode.hasAttribute("down")){
	var t = parseInt(this.current.parentNode.getAttribute("down"));
	var f = this.current.parentNode.parentNode;
	var n = f.firstChild;
	while(n != null && t > 0){
	    if(n.nodeName == 'c') t--;
	    if(t > 0) n = n.nextSibling;
	}
	this.current = n.lastChild;
	this.caret = this.current.firstChild.nodeValue.length;
    }
    else this.list_vertical_move(true);
}

GuppyBackend.prototype.home = function(){
    this.current = this.doc.root().firstChild;
    this.caret = 0;
}

GuppyBackend.prototype.end = function(){
    this.current = this.doc.root().lastChild;
    this.caret = this.current.firstChild.nodeValue.length;
}

GuppyBackend.prototype.checkpoint = function(){
    var base = this.doc.base;
    this.current.setAttribute("current","yes");
    this.current.setAttribute("caret",this.caret.toString());
    this.undo_now++;
    this.undo_data[this.undo_now] = base.cloneNode(true);
    this.undo_data.splice(this.undo_now+1, this.undo_data.length);
    this.fire_event("change",{"old":this.undo_data[this.undo_now-1],"new":this.undo_data[this.undo_now]});
    this.current.removeAttribute("current");
    this.current.removeAttribute("caret");
}

GuppyBackend.prototype.restore = function(t){
    this.doc.base = this.undo_data[t].cloneNode(true);
    this.find_current();
    this.current.removeAttribute("current");
    this.current.removeAttribute("caret");
}

GuppyBackend.prototype.find_current = function(){
    this.current = this.doc.xpath_node("//*[@current='yes']");
    this.caret = parseInt(this.current.getAttribute("caret"));
}

GuppyBackend.prototype.undo = function(){
    this.sel_clear();
    if(this.undo_now <= 0) return;
    this.undo_now--;
    this.restore(this.undo_now);
}

GuppyBackend.prototype.redo = function(){
    this.sel_clear();
    if(this.undo_now >= this.undo_data.length-1) return;
    this.undo_now++;
    this.restore(this.undo_now);
}

GuppyBackend.prototype.done = function(s){
    if(GuppyUtils.is_symbol(this.current)) this.complete_symbol();
    else this.fire_event("done");
}

GuppyBackend.prototype.complete_symbol = function(){
    var sym_name = this.current.firstChild.textContent;
    if(!(this.symbols[sym_name])) return;
    this.current = this.current.parentNode.parentNode;
    this.delete_from_f();
    this.insert_symbol(sym_name);
}

GuppyBackend.prototype.problem = function(message){
    this.fire_event("error",{"message":message});
}

GuppyBackend.prototype.is_blacklisted = function(symb_type){
    for(var i = 0; i < this.blacklist.length; i++)
	if(symb_type == this.blacklist[i]) return true;
    return false;
}

GuppyBackend.prototype.check_for_symbol = function(){
    var instance = this;
    if(GuppyUtils.is_text(this.current)) return;
    for(var s in this.symbols){
	if(instance.current.nodeName == 'e' && s.length <= (instance.caret - instance.space_caret) && !(GuppyUtils.is_blank(instance.current)) && instance.current.firstChild.nodeValue.search_at(instance.caret,s)){
	    var temp = instance.current.firstChild.nodeValue;
	    var temp_caret = instance.caret;
	    instance.current.firstChild.nodeValue = instance.current.firstChild.nodeValue.slice(0,instance.caret-s.length)+instance.current.firstChild.nodeValue.slice(instance.caret);
	    instance.caret -= s.length;
	    var success = instance.insert_symbol(s);
	    if(!success){
		instance.current.firstChild.nodeValue = temp;
		instance.caret = temp_caret;
	    }
	    break;
	}
    }
}

module.exports = GuppyBackend;

},{"../lib/katex/katex-modified.min.js":1,"./guppy_doc.js":5,"./guppy_symbols.js":6,"./guppy_utils.js":7,"mousetrap":2}],5:[function(require,module,exports){
var GuppyDoc = function(doc){
    doc = doc || "<m><e></e></m>";
    this.set_content(doc);
}

GuppyDoc.prototype.is_small = function(nn){
    var n = nn.parentNode;
    while(n != null && n.nodeName != 'm'){
	if(n.getAttribute("small") == "yes") return true;
	n = n.parentNode
	while(n != null && n.nodeName != 'c') n = n.parentNode;
    }
    return false;
}

GuppyDoc.prototype.ensure_text_nodes = function(){
    var l = this.base.getElementsByTagName("e");
    for(var i = 0; i < l.length; i++){
	if(!(l[i].firstChild)) l[i].appendChild(this.base.createTextNode(""));
    }
}

GuppyDoc.prototype.root = function(){
    return this.base.documentElement;
}

GuppyDoc.prototype.get_content = function(t,r){
    if(t != "xml"){
	var ans = this.manual_render(t,this.root(),r);
	return ans;
    }
    else return (new XMLSerializer()).serializeToString(this.base);
}

GuppyDoc.prototype.xpath_node = function(xpath, node){
    node = node || this.root()
    return this.base.evaluate(xpath, node, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
}

GuppyDoc.prototype.xpath_list = function(xpath, node){
    node = node || this.root()
    return this.base.evaluate(xpath, node, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);
}

GuppyDoc.prototype.get_symbols = function(groups){
    var types = {};
    var ans = [];
    var iterator = groups ? this.xpath_list("//f") : this.xpath_list("//f[@group='"+groups[i]+"']");
    for(var nn = iterator.iterateNext(); nn != null; nn = iterator.iterateNext())
	types[nn.getAttribute("type")] = true;
    for(var t in types)
	ans.push(t);
    return ans;
}

GuppyDoc.prototype.set_content = function(xml_data){
    this.base = (new window.DOMParser()).parseFromString(xml_data, "text/xml");
    this.ensure_text_nodes();
}

GuppyDoc.bracket_xpath = "(count(./*) != 1 and not \
		          ( \
                            count(./e)=2 and \
			    count(./f)=1 and \
			    count(./e[string-length(text())=0])=2 and \
			    ( \
			      (\
                                count(./f/c)=1 and\
			        count(./f/c[@is_bracket='yes'])=1\
			      )\
			      or\
			      (\
			        f/@c='yes' and \
				count(./e[@current='yes'])=0 and \
				count(./e[@temp='yes'])=0 \
			      )\
			    )\
			  )\
			)  \
			or\
		        (\
			  count(./*) = 1 and \
			  string-length(./e/text()) != 1 and \
			  number(./e/text()) != ./e/text() \
			) \
			or \
		        ( \
			  count(./*) = 1 and \
			  ./e/@current = 'yes' \
			) \
			or \
		        ( \
			  count(./*) = 1 and \
			  ./e/@temp = 'yes' \
			)"

GuppyDoc.prototype.manual_render = function(t,n,r){
    var ans = "";
    if(n.nodeName == "e"){
	if(t == "latex" && r){
	    ans = n.getAttribute("render");
	}
	else{
	    ans = n.firstChild.textContent;
	}
    }
    else if(n.nodeName == "f"){
	var real_type = (t == "latex" && this.is_small(n)) ? "small_latex" : t;
	var nn = this.xpath_node("./b[@p='"+real_type+"']", n) || this.xpath_node("./b[@p='"+t+"']", n);
	if(nn) ans = this.manual_render(t,nn,r);
    }
    else if(n.nodeName == "b"){
	var cs = []
	var i = 1;
	var par = n.parentNode;
	for(var nn = par.firstChild; nn != null; nn = nn.nextSibling)
	    if(nn.nodeName == "c" || nn.nodeName == "l") cs[i++] = this.manual_render(t,nn,r);
	for(var nn = n.firstChild; nn != null; nn = nn.nextSibling){
	    if(nn.nodeType == 3) ans += nn.textContent;
	    else if(nn.nodeType == 1){
		if(nn.hasAttribute("d")){
		    var dim = parseInt(nn.getAttribute("d"));
		    var joiner = function(d,l){
			if(d > 1) for(var k = 0; k < l.length; k++) l[k] = joiner(d-1,l[k]);
			return l.join(nn.getAttribute('sep'+(d-1)));
		    }
		    ans += joiner(dim,cs[parseInt(nn.getAttribute("ref"))]);
		}
		else ans += cs[parseInt(nn.getAttribute("ref"))];
	    }
	}
    }
    else if(n.nodeName == "l"){
	ans = [];
	var i = 0;
	for(var nn = n.firstChild; nn != null; nn = nn.nextSibling){
	    ans[i++] = this.manual_render(t,nn,r);
	}
    }
    else if(n.nodeName == "c" || n.nodeName == "m"){
	for(var nn = n.firstChild; nn != null; nn = nn.nextSibling)
	    ans += this.manual_render(t,nn,r);
	if(t == "latex" &&
           n.getAttribute("bracket") == "yes" &&
	   this.base.evaluate(GuppyDoc.bracket_xpath, n, null,
			 XPathResult.BOOLEAN_TYPE, null).booleanValue){ 
	    ans = "\\left("+ans+"\\right)";
	}
    }
    return ans;
}

GuppyDoc.prototype.path_to = function(n){
    var name = n.nodeName;
    if(name == "m") return "guppy_loc_m";
    var ns = 0;
    for(var nn = n; nn != null; nn = nn.previousSibling) if(nn.nodeType == 1 && nn.nodeName == name) ns++;
    return this.path_to(n.parentNode)+"_"+name+""+ns;
}

module.exports = GuppyDoc;

},{}],6:[function(require,module,exports){
GuppySymbols = {"symbols":{}};

GuppySymbols.symb_raw = function(symb_name,latex_symb,text_symb,group){
    return {"output":{"latex":latex_symb,
		      "text":text_symb},
	    "group":group,
	    "char":true,
	    "type":symb_name};
}

GuppySymbols.symb_func = function(func_name,group){
    return {"output":{"latex":"\\"+func_name+"\\left({$1}\\right)",
		      "text":" " + func_name+"({$1})"},
	    "type":func_name,
	    "group":group,
	    "attrs":[
		{"delete":"1"}
	    ]
	   };
}

GuppySymbols.add_symbols = function(name,sym){
    var symbols = {};
    if(name == "_raw")
	for(var i = 0; i < sym.length; i++)
	    for(var t in sym[i]['symbols'])
		symbols[t] = GuppySymbols.symb_raw(t, sym[i]['symbols'][t]["latex"], sym[i]['symbols'][t]["text"], sym[i]['group']);
    
    else if(name == "_literal")
	for(var j = 0; j < sym.length; j++)
	    for(var i = 0; i < sym[j]['symbols'].length; i++)
		symbols[sym[j]['symbols'][i]] = GuppySymbols.symb_raw(sym[j]['symbols'][i], "\\"+sym[j]['symbols'][i], " $"+sym[j]['symbols'][i]+" ", sym[j]['group']);
    
    else if(name == "_func")
	for(var j = 0; j < sym.length; j++)
	    for(var i = 0; i < sym[j]['symbols'].length; i++)
		symbols[sym[j]['symbols'][i]] = GuppySymbols.symb_func(sym[j]['symbols'][i], sym[j]['group']);
    
    else symbols[name] = sym;
    return symbols
}

module.exports = GuppySymbols;

},{}],7:[function(require,module,exports){
var GuppyUtils = {};

GuppyUtils.CARET = "\\cursor[-0.2ex]{0.7em}"
GuppyUtils.TEMP_SMALL_CARET = "\\cursor[0em]{0.6em}"
GuppyUtils.TEMP_CARET = "\\cursor[-0.2ex]{0.7em}"
GuppyUtils.SMALL_CARET = "\\cursor[-0.05em]{0.5em}"
GuppyUtils.SEL_CARET = "\\cursor[-0.2ex]{0.7em}"
GuppyUtils.SMALL_SEL_CARET = "\\cursor[-0.05em]{0.5em}"
GuppyUtils.SEL_COLOR = "red"

GuppyUtils.is_blank = function(n){
    return n.firstChild == null || n.firstChild.nodeValue == '';
}

GuppyUtils.get_length = function(n){
    if(GuppyUtils.is_blank(n) || n.nodeName == 'f') return 0
    return n.firstChild.nodeValue.length;
}

GuppyUtils.path_to = function(n){
    var name = n.nodeName;
    if(name == "m") return "guppy_loc_m";
    var ns = 0;
    for(var nn = n; nn != null; nn = nn.previousSibling) if(nn.nodeType == 1 && nn.nodeName == name) ns++;
    return GuppyUtils.path_to(n.parentNode)+"_"+name+""+ns;
}

GuppyUtils.is_text = function(nn){
    return nn.parentNode.getAttribute("mode") && (nn.parentNode.getAttribute("mode") == "text" || nn.parentNode.getAttribute("mode") == "symbol");
}

GuppyUtils.is_symbol = function(nn){
    return nn.parentNode.getAttribute("mode") && nn.parentNode.getAttribute("mode") == "symbol";
}

GuppyUtils.is_small = function(nn){
    var n = nn.parentNode;
    while(n != null && n.nodeName != 'm'){
	if(n.getAttribute("small") == "yes"){
	    return true;
	}
	n = n.parentNode
	while(n != null && n.nodeName != 'c')
	    n = n.parentNode;
    }
    return false;
}

module.exports = GuppyUtils;

},{}]},{},[3])(3)
});